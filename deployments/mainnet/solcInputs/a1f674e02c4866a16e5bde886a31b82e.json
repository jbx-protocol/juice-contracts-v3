{
  "language": "Solidity",
  "sources": {
    "contracts/abstract/JBControllerUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBControllerUtility.sol';\n\n/** \n  @notice\n  Provides tools for contracts with functionality that can only be accessed by a project's controller.\n\n  @dev\n  Adheres to -\n  IJBControllerUtility: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\nabstract contract JBControllerUtility is IJBControllerUtility {\n  //*********************************************************************//\n  // --------------------------- custom errors -------------------------- //\n  //*********************************************************************//\n  error CONTROLLER_UNAUTHORIZED();\n\n  //*********************************************************************//\n  // ---------------------------- modifiers ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Only allows the controller of the specified project to proceed. \n\n    @param _projectId The ID of the project. \n  */\n  modifier onlyController(uint256 _projectId) {\n    if (address(directory.controllerOf(_projectId)) != msg.sender) revert CONTROLLER_UNAUTHORIZED();\n    _;\n  }\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(IJBDirectory _directory) {\n    directory = _directory;\n  }\n}\n"
    },
    "contracts/interfaces/IJBControllerUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\n\ninterface IJBControllerUtility {\n  function directory() external view returns (IJBDirectory);\n}\n"
    },
    "contracts/interfaces/IJBDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBFundingCycleStore.sol';\nimport './IJBPaymentTerminal.sol';\nimport './IJBProjects.sol';\n\ninterface IJBDirectory {\n  event SetController(uint256 indexed projectId, address indexed controller, address caller);\n\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\n\n  event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller);\n\n  event SetPrimaryTerminal(\n    uint256 indexed projectId,\n    address indexed token,\n    IJBPaymentTerminal indexed terminal,\n    address caller\n  );\n\n  event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\n\n  function projects() external view returns (IJBProjects);\n\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\n\n  function controllerOf(uint256 _projectId) external view returns (address);\n\n  function isAllowedToSetFirstController(address _address) external view returns (bool);\n\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\n\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\n    external\n    view\n    returns (bool);\n\n  function primaryTerminalOf(uint256 _projectId, address _token)\n    external\n    view\n    returns (IJBPaymentTerminal);\n\n  function setControllerOf(uint256 _projectId, address _controller) external;\n\n  function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\n\n  function setPrimaryTerminalOf(\n    uint256 _projectId,\n    address _token,\n    IJBPaymentTerminal _terminal\n  ) external;\n\n  function setIsAllowedToSetFirstController(address _address, bool _flag) external;\n}\n"
    },
    "contracts/interfaces/IJBFundingCycleStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../enums/JBBallotState.sol';\nimport './../structs/JBFundingCycle.sol';\nimport './../structs/JBFundingCycleData.sol';\n\ninterface IJBFundingCycleStore {\n  event Configure(\n    uint256 indexed configuration,\n    uint256 indexed projectId,\n    JBFundingCycleData data,\n    uint256 metadata,\n    uint256 mustStartAtOrAfter,\n    address caller\n  );\n\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\n\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\n\n  function get(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    returns (JBFundingCycle memory);\n\n  function latestConfiguredOf(uint256 _projectId)\n    external\n    view\n    returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState);\n\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle);\n\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle);\n\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\n\n  function configureFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    uint256 _metadata,\n    uint256 _mustStartAtOrAfter\n  ) external returns (JBFundingCycle memory fundingCycle);\n}\n"
    },
    "contracts/interfaces/IJBPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\ninterface IJBPaymentTerminal is IERC165 {\n  function acceptsToken(address _token, uint256 _projectId) external view returns (bool);\n\n  function currencyForToken(address _token) external view returns (uint256);\n\n  function decimalsForToken(address _token) external view returns (uint256);\n\n  // Return value must be a fixed point number with 18 decimals.\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\n\n  function pay(\n    uint256 _projectId,\n    uint256 _amount,\n    address _token,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) external payable returns (uint256 beneficiaryTokenCount);\n\n  function addToBalanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    address _token,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) external payable;\n}\n"
    },
    "contracts/interfaces/IJBProjects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport './../structs/JBProjectMetadata.sol';\nimport './IJBTokenUriResolver.sol';\n\ninterface IJBProjects is IERC721 {\n  event Create(\n    uint256 indexed projectId,\n    address indexed owner,\n    JBProjectMetadata metadata,\n    address caller\n  );\n\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\n\n  event SetTokenUriResolver(IJBTokenUriResolver indexed resolver, address caller);\n\n  function count() external view returns (uint256);\n\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\n    external\n    view\n    returns (string memory);\n\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\n\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\n    external\n    returns (uint256 projectId);\n\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\n\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\n}\n"
    },
    "contracts/enums/JBBallotState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nenum JBBallotState {\n  Active,\n  Approved,\n  Failed\n}\n"
    },
    "contracts/structs/JBFundingCycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleBallot.sol';\n\n/** \n  @member number The funding cycle number for the cycle's project. Each funding cycle has a number that is an increment of the cycle that directly preceded it. Each project's first funding cycle has a number of 1.\n  @member configuration The timestamp when the parameters for this funding cycle were configured. This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\n  @member basedOn The `configuration` of the funding cycle that was active when this cycle was created.\n  @member start The timestamp marking the moment from which the funding cycle is considered active. It is a unix timestamp measured in seconds.\n  @member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active â€“ any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\n  @member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\n  @member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\n  @member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.\n  @member metadata Extra data that can be associated with a funding cycle.\n*/\nstruct JBFundingCycle {\n  uint256 number;\n  uint256 configuration;\n  uint256 basedOn;\n  uint256 start;\n  uint256 duration;\n  uint256 weight;\n  uint256 discountRate;\n  IJBFundingCycleBallot ballot;\n  uint256 metadata;\n}\n"
    },
    "contracts/structs/JBFundingCycleData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleBallot.sol';\n\n/** \n  @member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active â€“ any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\n  @member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\n  @member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\n  @member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.\n*/\nstruct JBFundingCycleData {\n  uint256 duration;\n  uint256 weight;\n  uint256 discountRate;\n  IJBFundingCycleBallot ballot;\n}\n"
    },
    "contracts/interfaces/IJBFundingCycleBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './../enums/JBBallotState.sol';\nimport './IJBFundingCycleStore.sol';\n\ninterface IJBFundingCycleBallot is IERC165 {\n  function duration() external view returns (uint256);\n\n  function stateOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    uint256 _start\n  ) external view returns (JBBallotState);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/structs/JBProjectMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/** \n  @member content The metadata content.\n  @member domain The domain within which the metadata applies.\n*/\nstruct JBProjectMetadata {\n  string content;\n  uint256 domain;\n}\n"
    },
    "contracts/interfaces/IJBTokenUriResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBTokenUriResolver {\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\n}\n"
    },
    "contracts/JBTokenStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './abstract/JBControllerUtility.sol';\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBTokenStore.sol';\nimport './libraries/JBOperations.sol';\nimport './JBToken.sol';\n\n/**\n  @notice\n  Manage token minting, burning, and account balances.\n\n  @dev\n  Token balances can be either represented internally or claimed as ERC-20s into wallets.\n  This contract manages these two representations and allows claiming.\n\n  @dev\n  The total supply of a project's tokens and the balance of each account are calculated in this contract.\n\n  @dev\n  Each project can bring their own token if they prefer, and swap between tokens at any time.\n  \n  @dev\n  Adheres to -\n  IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated.\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBTokenStore is IJBTokenStore, JBControllerUtility, JBOperatable {\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error CANT_REMOVE_TOKEN_IF_ITS_REQUIRED();\n  error EMPTY_NAME();\n  error EMPTY_SYMBOL();\n  error INSUFFICIENT_FUNDS();\n  error INSUFFICIENT_UNCLAIMED_TOKENS();\n  error PROJECT_ALREADY_HAS_TOKEN();\n  error RECIPIENT_ZERO_ADDRESS();\n  error TOKEN_ALREADY_IN_USE();\n  error TOKEN_NOT_FOUND();\n  error TOKENS_MUST_HAVE_18_DECIMALS();\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Each project's attached token contract.\n\n    _projectId The ID of the project to which the token belongs.\n  */\n  mapping(uint256 => IJBToken) public override tokenOf;\n\n  /**\n    @notice\n    The ID of the project that each token belongs to.\n\n    _token The token to check the project association of.\n  */\n  mapping(IJBToken => uint256) public override projectOf;\n\n  /**\n    @notice\n    The total supply of unclaimed tokens for each project.\n\n    _projectId The ID of the project to which the token belongs.\n  */\n  mapping(uint256 => uint256) public override unclaimedTotalSupplyOf;\n\n  /**\n    @notice\n    Each holder's balance of unclaimed tokens for each project.\n\n    _holder The holder of balance.\n    _projectId The ID of the project to which the token belongs.\n  */\n  mapping(address => mapping(uint256 => uint256)) public override unclaimedBalanceOf;\n\n  /**\n    @notice\n    A flag indicating if tokens are required to be issued as claimed for a particular project.\n\n    _projectId The ID of the project to which the requirement applies.\n  */\n  mapping(uint256 => bool) public override requireClaimFor;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The total supply of tokens for each project, including claimed and unclaimed tokens.\n\n    @param _projectId The ID of the project to get the total token supply of.\n\n    @return totalSupply The total supply of the project's tokens.\n  */\n  function totalSupplyOf(uint256 _projectId) external view override returns (uint256 totalSupply) {\n    // Get a reference to the total supply of the project's unclaimed tokens.\n    totalSupply = unclaimedTotalSupplyOf[_projectId];\n\n    // Get a reference to the project's current token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // If the project has a current token, add it's total supply to the total.\n    if (_token != IJBToken(address(0))) totalSupply = totalSupply + _token.totalSupply(_projectId);\n  }\n\n  /**\n    @notice\n    The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens.\n\n    @param _holder The token holder to get a balance for.\n    @param _projectId The project to get the `_holder`s balance of.\n\n    @return balance The project token balance of the `_holder\n  */\n  function balanceOf(address _holder, uint256 _projectId)\n    external\n    view\n    override\n    returns (uint256 balance)\n  {\n    // Get a reference to the holder's unclaimed balance for the project.\n    balance = unclaimedBalanceOf[_holder][_projectId];\n\n    // Get a reference to the project's current token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // If the project has a current token, add the holder's balance to the total.\n    if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_holder, _projectId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory\n  ) JBOperatable(_operatorStore) JBControllerUtility(_directory) {\n    projects = _projects;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Issues a project's ERC-20 tokens that'll be used when claiming tokens.\n\n    @dev\n    Deploys a project's ERC-20 token contract.\n\n    @dev\n    Only a project's current controller can issue its token.\n\n    @param _projectId The ID of the project being issued tokens.\n    @param _name The ERC-20's name.\n    @param _symbol The ERC-20's symbol.\n\n    @return token The token that was issued.\n  */\n  function issueFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external override onlyController(_projectId) returns (IJBToken token) {\n    // There must be a name.\n    if (bytes(_name).length == 0) revert EMPTY_NAME();\n\n    // There must be a symbol.\n    if (bytes(_symbol).length == 0) revert EMPTY_SYMBOL();\n\n    // The project shouldn't already have a token.\n    if (tokenOf[_projectId] != IJBToken(address(0))) revert PROJECT_ALREADY_HAS_TOKEN();\n\n    // Deploy the token contract.\n    token = new JBToken(_name, _symbol);\n\n    // Store the token contract.\n    tokenOf[_projectId] = token;\n\n    // Store the project for the token.\n    projectOf[token] = _projectId;\n\n    emit Issue(_projectId, token, _name, _symbol, msg.sender);\n  }\n\n  /**\n    @notice\n    Swap the current project's token for another, and transfer ownership of the current token to another address if needed.\n\n    @dev\n    Only a project's current controller can change its token.\n\n    @dev\n    This contract must have access to all of the token's `IJBToken` interface functions.\n\n    @dev\n    Can't change to a token that's currently being used by another project.\n\n    @dev\n    Changing to the zero address will remove the current token without adding a new one.\n\n    @param _projectId The ID of the project to which the changed token belongs.\n    @param _token The new token. Send an empty address to remove the project's current token without adding a new one, if claiming tokens isn't currency required by the project\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\n\n    @return oldToken The token that was removed as the project's token.\n  */\n  function changeFor(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external override onlyController(_projectId) returns (IJBToken oldToken) {\n    // Can't remove the project's token if the project requires claiming tokens.\n    if (_token == IJBToken(address(0)) && requireClaimFor[_projectId])\n      revert CANT_REMOVE_TOKEN_IF_ITS_REQUIRED();\n\n    // Can't change to a token already in use.\n    if (projectOf[_token] != 0) revert TOKEN_ALREADY_IN_USE();\n\n    // Can't change to a token that doesn't use 18 decimals.\n    if (_token != IJBToken(address(0)) && _token.decimals() != 18)\n      revert TOKENS_MUST_HAVE_18_DECIMALS();\n\n    // Get a reference to the current token for the project.\n    oldToken = tokenOf[_projectId];\n\n    // Store the new token.\n    tokenOf[_projectId] = _token;\n\n    // Store the project for the new token if the new token isn't the zero address.\n    if (_token != IJBToken(address(0))) projectOf[_token] = _projectId;\n\n    // Reset the project for the old token if it isn't the zero address.\n    if (oldToken != IJBToken(address(0))) projectOf[oldToken] = 0;\n\n    // If there's a current token and a new owner was provided, transfer ownership of the old token to the new owner.\n    if (_newOwner != address(0) && oldToken != IJBToken(address(0)))\n      oldToken.transferOwnership(_projectId, _newOwner);\n\n    emit Change(_projectId, _token, oldToken, _newOwner, msg.sender);\n  }\n\n  /**\n    @notice\n    Mint new project tokens.\n\n    @dev\n    Only a project's current controller can mint its tokens.\n\n    @param _holder The address receiving the new tokens.\n    @param _projectId The ID of the project to which the tokens belong.\n    @param _amount The amount of tokens to mint.\n    @param _preferClaimedTokens A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.\n  */\n  function mintFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external override onlyController(_projectId) {\n    // Get a reference to the project's current token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // Save a reference to whether there exists a token and the caller prefers these claimed tokens or the project requires it.\n    bool _shouldClaimTokens = (requireClaimFor[_projectId] || _preferClaimedTokens) &&\n      _token != IJBToken(address(0));\n\n    if (_shouldClaimTokens)\n      // If tokens should be claimed, mint tokens into the holder's wallet.\n      _token.mint(_projectId, _holder, _amount);\n    else {\n      // Otherwise, add the tokens to the unclaimed balance and total supply.\n      unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] + _amount;\n      unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] + _amount;\n    }\n\n    emit Mint(_holder, _projectId, _amount, _shouldClaimTokens, _preferClaimedTokens, msg.sender);\n  }\n\n  /**\n    @notice\n    Burns a project's tokens.\n\n    @dev\n    Only a project's current controller can burn its tokens.\n\n    @param _holder The address that owns the tokens being burned.\n    @param _projectId The ID of the project to which the burned tokens belong.\n    @param _amount The amount of tokens to burn.\n    @param _preferClaimedTokens A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.\n  */\n  function burnFrom(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external override onlyController(_projectId) {\n    // Get a reference to the project's current token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // Get a reference to the amount of unclaimed project tokens the holder has.\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n    // Get a reference to the amount of the project's current token the holder has in their wallet.\n    uint256 _claimedBalance = _token == IJBToken(address(0))\n      ? 0\n      : _token.balanceOf(_holder, _projectId);\n\n    // There must be adequate tokens to burn across the holder's claimed and unclaimed balance.\n    if (_amount > _claimedBalance + _unclaimedBalance) revert INSUFFICIENT_FUNDS();\n\n    // The amount of tokens to burn.\n    uint256 _claimedTokensToBurn;\n\n    // If there's no balance, redeem no tokens.\n    if (_claimedBalance == 0)\n      _claimedTokensToBurn = 0;\n      // If prefer converted, redeem tokens before redeeming unclaimed tokens.\n    else if (_preferClaimedTokens)\n      _claimedTokensToBurn = _claimedBalance < _amount ? _claimedBalance : _amount;\n      // Otherwise, redeem unclaimed tokens before claimed tokens.\n    else _claimedTokensToBurn = _unclaimedBalance < _amount ? _amount - _unclaimedBalance : 0;\n\n    // The amount of unclaimed tokens to redeem.\n    uint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\n\n    // Subtract the tokens from the unclaimed balance and total supply.\n    if (_unclaimedTokensToBurn > 0) {\n      // Reduce the holders balance and the total supply.\n      unclaimedBalanceOf[_holder][_projectId] =\n        unclaimedBalanceOf[_holder][_projectId] -\n        _unclaimedTokensToBurn;\n      unclaimedTotalSupplyOf[_projectId] =\n        unclaimedTotalSupplyOf[_projectId] -\n        _unclaimedTokensToBurn;\n    }\n\n    // Burn the claimed tokens.\n    if (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\n\n    emit Burn(\n      _holder,\n      _projectId,\n      _amount,\n      _unclaimedBalance,\n      _claimedBalance,\n      _preferClaimedTokens,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Claims internally accounted for tokens into a holder's wallet.\n\n    @dev\n    Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.\n\n    @param _holder The owner of the tokens being claimed.\n    @param _projectId The ID of the project whose tokens are being claimed.\n    @param _amount The amount of tokens to claim.\n  */\n  function claimFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external override requirePermission(_holder, _projectId, JBOperations.CLAIM) {\n    // Get a reference to the project's current token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // The project must have a token contract attached.\n    if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND();\n\n    // Get a reference to the amount of unclaimed project tokens the holder has.\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n    // There must be enough unclaimed tokens to claim.\n    if (_unclaimedBalance < _amount) revert INSUFFICIENT_UNCLAIMED_TOKENS();\n\n    // Subtract the claim amount from the holder's unclaimed project token balance.\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\n\n    // Subtract the claim amount from the project's unclaimed total supply.\n    unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _amount;\n\n    // Mint the equivalent amount of the project's token for the holder.\n    _token.mint(_projectId, _holder, _amount);\n\n    emit Claim(_holder, _projectId, _unclaimedBalance, _amount, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows a holder to transfer unclaimed tokens to another account.\n\n    @dev\n    Only a token holder or an operator can transfer its unclaimed tokens.\n\n    @param _holder The address to transfer tokens from.\n    @param _projectId The ID of the project whose tokens are being transferred.\n    @param _recipient The recipient of the tokens.\n    @param _amount The amount of tokens to transfer.\n  */\n  function transferFrom(\n    address _holder,\n    uint256 _projectId,\n    address _recipient,\n    uint256 _amount\n  ) external override requirePermission(_holder, _projectId, JBOperations.TRANSFER) {\n    // Can't transfer to the zero address.\n    if (_recipient == address(0)) revert RECIPIENT_ZERO_ADDRESS();\n\n    // Get a reference to the holder's unclaimed project token balance.\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n    // The holder must have enough unclaimed tokens to transfer.\n    if (_amount > _unclaimedBalance) revert INSUFFICIENT_UNCLAIMED_TOKENS();\n\n    // Subtract from the holder's unclaimed token balance.\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\n\n    // Add the unclaimed project tokens to the recipient's balance.\n    unclaimedBalanceOf[_recipient][_projectId] =\n      unclaimedBalanceOf[_recipient][_projectId] +\n      _amount;\n\n    emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows a project to force all future mints of its tokens to be claimed into the holder's wallet, or revoke the flag if it's already set.\n\n    @dev\n    Only a token holder or an operator can require claimed token.\n\n    @param _projectId The ID of the project being affected.\n    @param _flag A flag indicating whether or not claiming should be required.\n  */\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag)\n    external\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.REQUIRE_CLAIM)\n  {\n    // Get a reference to the project's current token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // The project must have a token contract attached.\n    if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND();\n\n    // Store the flag.\n    requireClaimFor[_projectId] = _flag;\n\n    emit ShouldRequireClaim(_projectId, _flag, msg.sender);\n  }\n}\n"
    },
    "contracts/abstract/JBOperatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBOperatable.sol';\n\n/** \n  @notice\n  Modifiers to allow access to functions based on the message sender's operator status.\n\n  @dev\n  Adheres to -\n  IJBOperatable: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\nabstract contract JBOperatable is IJBOperatable {\n  //*********************************************************************//\n  // --------------------------- custom errors -------------------------- //\n  //*********************************************************************//\n  error UNAUTHORIZED();\n\n  //*********************************************************************//\n  // ---------------------------- modifiers ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Only allows the speficied account or an operator of the account to proceed. \n\n    @param _account The account to check for.\n    @param _domain The domain namespace to look for an operator within. \n    @param _permissionIndex The index of the permission to check for. \n  */\n  modifier requirePermission(\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) {\n    _requirePermission(_account, _domain, _permissionIndex);\n    _;\n  }\n\n  /** \n    @notice\n    Only allows the speficied account, an operator of the account to proceed, or a truthy override flag. \n\n    @param _account The account to check for.\n    @param _domain The domain namespace to look for an operator within. \n    @param _permissionIndex The index of the permission to check for. \n    @param _override A condition to force allowance for.\n  */\n  modifier requirePermissionAllowingOverride(\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex,\n    bool _override\n  ) {\n    _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override);\n    _;\n  }\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    A contract storing operator assignments.\n  */\n  IJBOperatorStore public immutable override operatorStore;\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n  */\n  constructor(IJBOperatorStore _operatorStore) {\n    operatorStore = _operatorStore;\n  }\n\n  //*********************************************************************//\n  // -------------------------- internal views ------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Require the message sender is either the account or has the specified permission.\n\n    @param _account The account to allow.\n    @param _domain The domain namespace within which the permission index will be checked.\n    @param _permissionIndex The permission index that an operator must have within the specified domain to be allowed.\n  */\n  function _requirePermission(\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) internal view {\n    if (\n      msg.sender != _account &&\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\n    ) revert UNAUTHORIZED();\n  }\n\n  /** \n    @notice\n    Require the message sender is either the account, has the specified permission, or the override condition is true.\n\n    @param _account The account to allow.\n    @param _domain The domain namespace within which the permission index will be checked.\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\n    @param _override The override condition to allow.\n  */\n  function _requirePermissionAllowingOverride(\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex,\n    bool _override\n  ) internal view {\n    if (\n      !_override &&\n      msg.sender != _account &&\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\n    ) revert UNAUTHORIZED();\n  }\n}\n"
    },
    "contracts/interfaces/IJBTokenStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBProjects.sol';\nimport './IJBToken.sol';\n\ninterface IJBTokenStore {\n  event Issue(\n    uint256 indexed projectId,\n    IJBToken indexed token,\n    string name,\n    string symbol,\n    address caller\n  );\n\n  event Mint(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 amount,\n    bool tokensWereClaimed,\n    bool preferClaimedTokens,\n    address caller\n  );\n\n  event Burn(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 amount,\n    uint256 initialUnclaimedBalance,\n    uint256 initialClaimedBalance,\n    bool preferClaimedTokens,\n    address caller\n  );\n\n  event Claim(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 initialUnclaimedBalance,\n    uint256 amount,\n    address caller\n  );\n\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\n\n  event Change(\n    uint256 indexed projectId,\n    IJBToken indexed newToken,\n    IJBToken indexed oldToken,\n    address owner,\n    address caller\n  );\n\n  event Transfer(\n    address indexed holder,\n    uint256 indexed projectId,\n    address indexed recipient,\n    uint256 amount,\n    address caller\n  );\n\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\n\n  function projectOf(IJBToken _token) external view returns (uint256);\n\n  function projects() external view returns (IJBProjects);\n\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\n\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\n\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\n\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\n\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\n\n  function issueFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external returns (IJBToken token);\n\n  function changeFor(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external returns (IJBToken oldToken);\n\n  function burnFrom(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external;\n\n  function mintFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external;\n\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\n\n  function claimFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external;\n\n  function transferFrom(\n    address _holder,\n    uint256 _projectId,\n    address _recipient,\n    uint256 _amount\n  ) external;\n}\n"
    },
    "contracts/libraries/JBOperations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBOperations {\n  uint256 public constant RECONFIGURE = 1;\n  uint256 public constant REDEEM = 2;\n  uint256 public constant MIGRATE_CONTROLLER = 3;\n  uint256 public constant MIGRATE_TERMINAL = 4;\n  uint256 public constant PROCESS_FEES = 5;\n  uint256 public constant SET_METADATA = 6;\n  uint256 public constant ISSUE = 7;\n  uint256 public constant CHANGE_TOKEN = 8;\n  uint256 public constant MINT = 9;\n  uint256 public constant BURN = 10;\n  uint256 public constant CLAIM = 11;\n  uint256 public constant TRANSFER = 12;\n  uint256 public constant REQUIRE_CLAIM = 13;\n  uint256 public constant SET_CONTROLLER = 14;\n  uint256 public constant SET_TERMINALS = 15;\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\n  uint256 public constant USE_ALLOWANCE = 17;\n  uint256 public constant SET_SPLITS = 18;\n}\n"
    },
    "contracts/JBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interfaces/IJBToken.sol';\n\n/** \n  @notice\n  An ERC-20 token that can be used by a project in the `JBTokenStore`.\n\n  @dev\n  Adheres to -\n  IJBToken: Allows this contract to be used by projects in the JBTokenStore.\n\n  @dev\n  Inherits from -\n  ERC20Permit: General token standard for fungible accounting. \n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBToken is IJBToken, ERC20Permit, Ownable {\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The total supply of this ERC20.\n\n    @param _projectId the ID of the project to which the token belongs. This is ignored.\n\n    @return The total supply of this ERC20, as a fixed point number.\n  */\n  function totalSupply(uint256 _projectId) external view override returns (uint256) {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    return super.totalSupply();\n  }\n\n  /** \n    @notice\n    An account's balance of this ERC20.\n\n    @param _account The account to get a balance of.\n    @param _projectId is the ID of the project to which the token belongs. This is ignored.\n\n    @return The balance of the `_account` of this ERC20, as a fixed point number with 18 decimals.\n  */\n  function balanceOf(address _account, uint256 _projectId)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    _account; // Prevents unused var compiler and natspec complaints.\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    return super.balanceOf(_account);\n  }\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The number of decimals included in the fixed point accounting of this token.\n\n    @return The number of decimals.\n  */\n  function decimals() public view override(ERC20, IJBToken) returns (uint8) {\n    return super.decimals();\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _name The name of the token.\n    @param _symbol The symbol that the token should be represented by.\n  */\n  constructor(string memory _name, string memory _symbol)\n    ERC20(_name, _symbol)\n    ERC20Permit(_name)\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Mints more of the token.\n\n    @dev\n    Only the owner of this contract cant mint more of it.\n\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\n    @param _account The account to mint the tokens for.\n    @param _amount The amount of tokens to mint, as a fixed point number with 18 decimals.\n  */\n  function mint(\n    uint256 _projectId,\n    address _account,\n    uint256 _amount\n  ) external override onlyOwner {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    return _mint(_account, _amount);\n  }\n\n  /** \n    @notice\n    Burn some outstanding tokens.\n\n    @dev\n    Only the owner of this contract cant burn some of its supply.\n\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\n    @param _account The account to burn tokens from.\n    @param _amount The amount of tokens to burn, as a fixed point number with 18 decimals.\n  */\n  function burn(\n    uint256 _projectId,\n    address _account,\n    uint256 _amount\n  ) external override onlyOwner {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    return _burn(_account, _amount);\n  }\n\n  /** \n    @notice\n    Approves an account to spend tokens on the `msg.sender`s behalf.\n\n    @param _projectId the ID of the project to which the token belongs. This is ignored.\n    @param _spender The address that will be spending tokens on the `msg.sender`s behalf.\n    @param _amount The amount the `_spender` is allowed to spend.\n  */\n  function approve(\n    uint256 _projectId,\n    address _spender,\n    uint256 _amount\n  ) external override {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    approve(_spender, _amount);\n  }\n\n  /** \n    @notice\n    Transfer tokens to an account.\n    \n    @param _projectId The ID of the project to which the token belongs. This is ignored.\n    @param _to The destination address.\n    @param _amount The amount of the transfer, as a fixed point number with 18 decimals.\n  */\n  function transfer(\n    uint256 _projectId,\n    address _to,\n    uint256 _amount\n  ) external override {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    transfer(_to, _amount);\n  }\n\n  /** \n    @notice\n    Transfer tokens between accounts.\n\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\n    @param _from The originating address.\n    @param _to The destination address.\n    @param _amount The amount of the transfer, as a fixed point number with 18 decimals.\n  */\n  function transferFrom(\n    uint256 _projectId,\n    address _from,\n    address _to,\n    uint256 _amount\n  ) external override {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    transferFrom(_from, _to, _amount);\n  }\n\n  //*********************************************************************//\n  // ------------------------ public transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Transfer ownership of this contract to another address.\n\n    @dev\n    Only the owner of this contract can transfer it.\n\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\n    @param _newOwner The new owner.\n  */\n  function transferOwnership(uint256 _projectId, address _newOwner)\n    public\n    virtual\n    override\n    onlyOwner\n  {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    return super.transferOwnership(_newOwner);\n  }\n}\n"
    },
    "contracts/interfaces/IJBOperatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBOperatorStore.sol';\n\ninterface IJBOperatable {\n  function operatorStore() external view returns (IJBOperatorStore);\n}\n"
    },
    "contracts/interfaces/IJBOperatorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../structs/JBOperatorData.sol';\n\ninterface IJBOperatorStore {\n  event SetOperator(\n    address indexed operator,\n    address indexed account,\n    uint256 indexed domain,\n    uint256[] permissionIndexes,\n    uint256 packed\n  );\n\n  function permissionsOf(\n    address _operator,\n    address _account,\n    uint256 _domain\n  ) external view returns (uint256);\n\n  function hasPermission(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) external view returns (bool);\n\n  function hasPermissions(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256[] calldata _permissionIndexes\n  ) external view returns (bool);\n\n  function setOperator(JBOperatorData calldata _operatorData) external;\n\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\n}\n"
    },
    "contracts/structs/JBOperatorData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/** \n  @member operator The address of the operator.\n  @member domain The domain within which the operator is being given permissions. A domain of 0 is a wildcard domain, which gives an operator access to all domains.\n  @member permissionIndexes The indexes of the permissions the operator is being given.\n*/\nstruct JBOperatorData {\n  address operator;\n  uint256 domain;\n  uint256[] permissionIndexes;\n}\n"
    },
    "contracts/interfaces/IJBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBToken {\n  function decimals() external view returns (uint8);\n\n  function totalSupply(uint256 _projectId) external view returns (uint256);\n\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\n\n  function mint(\n    uint256 _projectId,\n    address _account,\n    uint256 _amount\n  ) external;\n\n  function burn(\n    uint256 _projectId,\n    address _account,\n    uint256 _amount\n  ) external;\n\n  function approve(\n    uint256,\n    address _spender,\n    uint256 _amount\n  ) external;\n\n  function transfer(\n    uint256 _projectId,\n    address _to,\n    uint256 _amount\n  ) external;\n\n  function transferFrom(\n    uint256 _projectId,\n    address _from,\n    address _to,\n    uint256 _amount\n  ) external;\n\n  function transferOwnership(uint256 _projectId, address _newOwner) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n Ã· 2 + 1, and for v in (302): v âˆˆ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/system_tests/helpers/TestBaseWorkflow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './hevm.sol';\nimport '../../../lib/ds-test/src/test.sol';\n\nimport '../../JBController.sol';\nimport '../../JBDirectory.sol';\nimport '../../JBETHPaymentTerminal.sol';\nimport '../../JBERC20PaymentTerminal.sol';\nimport '../../JBSingleTokenPaymentTerminalStore.sol';\nimport '../../JBFundingCycleStore.sol';\nimport '../../JBOperatorStore.sol';\nimport '../../JBPrices.sol';\nimport '../../JBProjects.sol';\nimport '../../JBSplitsStore.sol';\nimport '../../JBToken.sol';\nimport '../../JBTokenStore.sol';\n\nimport '../../structs/JBDidPayData.sol';\nimport '../../structs/JBDidRedeemData.sol';\nimport '../../structs/JBFee.sol';\nimport '../../structs/JBFundAccessConstraints.sol';\nimport '../../structs/JBFundingCycle.sol';\nimport '../../structs/JBFundingCycleData.sol';\nimport '../../structs/JBFundingCycleMetadata.sol';\nimport '../../structs/JBGroupedSplits.sol';\nimport '../../structs/JBOperatorData.sol';\nimport '../../structs/JBPayParamsData.sol';\nimport '../../structs/JBProjectMetadata.sol';\nimport '../../structs/JBRedeemParamsData.sol';\nimport '../../structs/JBSplit.sol';\n\nimport '../../interfaces/IJBPaymentTerminal.sol';\nimport '../../interfaces/IJBToken.sol';\n\nimport './AccessJBLib.sol';\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\n\n// Base contract for Juicebox system tests.\n//\n// Provides common functionality, such as deploying contracts on test setup.\ncontract TestBaseWorkflow is DSTest {\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  // Multisig address used for testing.\n  address private _multisig = address(123);\n\n  address private _beneficiary = address(69420);\n\n  // EVM Cheat codes - test addresses via prank and startPrank in hevm\n  Hevm public evm = Hevm(HEVM_ADDRESS);\n\n  // JBOperatorStore\n  JBOperatorStore private _jbOperatorStore;\n  // JBProjects\n  JBProjects private _jbProjects;\n  // JBPrices\n  JBPrices private _jbPrices;\n  // JBDirectory\n  JBDirectory private _jbDirectory;\n  // JBFundingCycleStore\n  JBFundingCycleStore private _jbFundingCycleStore;\n  // JBToken\n  JBToken private _jbToken;\n  // JBTokenStore\n  JBTokenStore private _jbTokenStore;\n  // JBSplitsStore\n  JBSplitsStore private _jbSplitsStore;\n  // JBController\n  JBController private _jbController;\n  // JBETHPaymentTerminalStore\n  JBSingleTokenPaymentTerminalStore private _jbPaymentTerminalStore;\n  // JBETHPaymentTerminal\n  JBETHPaymentTerminal private _jbETHPaymentTerminal;\n  // JBERC20PaymentTerminal\n  JBERC20PaymentTerminal private _jbERC20PaymentTerminal;\n  // AccessJBLib\n  AccessJBLib private _accessJBLib;\n\n  //*********************************************************************//\n  // ------------------------- internal views -------------------------- //\n  //*********************************************************************//\n\n  function multisig() internal view returns (address) {\n    return _multisig;\n  }\n\n  function beneficiary() internal view returns (address) {\n    return _beneficiary;\n  }\n\n  function jbOperatorStore() internal view returns (JBOperatorStore) {\n    return _jbOperatorStore;\n  }\n\n  function jbProjects() internal view returns (JBProjects) {\n    return _jbProjects;\n  }\n\n  function jbPrices() internal view returns (JBPrices) {\n    return _jbPrices;\n  }\n\n  function jbDirectory() internal view returns (JBDirectory) {\n    return _jbDirectory;\n  }\n\n  function jbFundingCycleStore() internal view returns (JBFundingCycleStore) {\n    return _jbFundingCycleStore;\n  }\n\n  function jbTokenStore() internal view returns (JBTokenStore) {\n    return _jbTokenStore;\n  }\n\n  function jbSplitsStore() internal view returns (JBSplitsStore) {\n    return _jbSplitsStore;\n  }\n\n  function jbController() internal view returns (JBController) {\n    return _jbController;\n  }\n\n  function jbPaymentTerminalStore() internal view returns (JBSingleTokenPaymentTerminalStore) {\n    return _jbPaymentTerminalStore;\n  }\n\n  function jbETHPaymentTerminal() internal view returns (JBETHPaymentTerminal) {\n    return _jbETHPaymentTerminal;\n  }\n\n  function jbERC20PaymentTerminal() internal view returns (JBERC20PaymentTerminal) {\n    return _jbERC20PaymentTerminal;\n  }\n\n  function jbToken() internal view returns (JBToken) {\n    return _jbToken;\n  }\n\n  function jbLibraries() internal view returns (AccessJBLib) {\n    return _accessJBLib;\n  }\n\n  //*********************************************************************//\n  // --------------------------- test setup ---------------------------- //\n  //*********************************************************************//\n\n  // Deploys and initializes contracts for testing.\n  function setUp() public virtual {\n    // Labels\n    evm.label(_multisig, 'projectOwner');\n    evm.label(_beneficiary, 'beneficiary');\n\n    // JBOperatorStore\n    _jbOperatorStore = new JBOperatorStore();\n    evm.label(address(_jbOperatorStore), 'JBOperatorStore');\n\n    // JBProjects\n    _jbProjects = new JBProjects(_jbOperatorStore);\n    evm.label(address(_jbProjects), 'JBProjects');\n\n    // JBPrices\n    _jbPrices = new JBPrices(_multisig);\n    evm.label(address(_jbPrices), 'JBPrices');\n\n    address contractAtNoncePlusOne = addressFrom(address(this), 5);\n\n    // JBFundingCycleStore\n    _jbFundingCycleStore = new JBFundingCycleStore(IJBDirectory(contractAtNoncePlusOne));\n    evm.label(address(_jbFundingCycleStore), 'JBFundingCycleStore');\n\n    // JBDirectory\n    _jbDirectory = new JBDirectory(_jbOperatorStore, _jbProjects, _jbFundingCycleStore, _multisig);\n    evm.label(address(_jbDirectory), 'JBDirectory');\n\n    // JBTokenStore\n    _jbTokenStore = new JBTokenStore(_jbOperatorStore, _jbProjects, _jbDirectory);\n    evm.label(address(_jbTokenStore), 'JBTokenStore');\n\n    // JBSplitsStore\n    _jbSplitsStore = new JBSplitsStore(_jbOperatorStore, _jbProjects, _jbDirectory);\n    evm.label(address(_jbSplitsStore), 'JBSplitsStore');\n\n    // JBController\n    _jbController = new JBController(\n      _jbOperatorStore,\n      _jbProjects,\n      _jbDirectory,\n      _jbFundingCycleStore,\n      _jbTokenStore,\n      _jbSplitsStore\n    );\n    evm.label(address(_jbController), 'JBController');\n\n    evm.prank(_multisig);\n    _jbDirectory.setIsAllowedToSetFirstController(address(_jbController), true);\n\n    // JBETHPaymentTerminalStore\n    _jbPaymentTerminalStore = new JBSingleTokenPaymentTerminalStore(\n      _jbDirectory,\n      _jbFundingCycleStore,\n      _jbPrices\n    );\n    evm.label(address(_jbPaymentTerminalStore), 'JBSingleTokenPaymentTerminalStore');\n\n    // AccessJBLib\n    _accessJBLib = new AccessJBLib();\n\n    // JBETHPaymentTerminal\n    _jbETHPaymentTerminal = new JBETHPaymentTerminal(\n      _accessJBLib.ETH(),\n      _jbOperatorStore,\n      _jbProjects,\n      _jbDirectory,\n      _jbSplitsStore,\n      _jbPrices,\n      _jbPaymentTerminalStore,\n      _multisig\n    );\n    evm.label(address(_jbETHPaymentTerminal), 'JBETHPaymentTerminal');\n\n    evm.prank(_multisig);\n    _jbToken = new JBToken('MyToken', 'MT');\n\n    evm.prank(_multisig);\n    _jbToken.mint(0, _multisig, 100 * 10**18);\n\n    // JBERC20PaymentTerminal\n    _jbERC20PaymentTerminal = new JBERC20PaymentTerminal(\n      _jbToken,\n      _accessJBLib.ETH(), // currency\n      _accessJBLib.ETH(), // base weight currency\n      1, // JBSplitsGroupe\n      _jbOperatorStore,\n      _jbProjects,\n      _jbDirectory,\n      _jbSplitsStore,\n      _jbPrices,\n      _jbPaymentTerminalStore,\n      _multisig\n    );\n    evm.label(address(_jbERC20PaymentTerminal), 'JBERC20PaymentTerminal');\n  }\n\n  //https://ethereum.stackexchange.com/questions/24248/how-to-calculate-an-ethereum-contracts-address-during-its-creation-using-the-so\n  function addressFrom(address _origin, uint256 _nonce) internal pure returns (address _address) {\n    bytes memory data;\n    if (_nonce == 0x00) data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), _origin, bytes1(0x80));\n    else if (_nonce <= 0x7f)\n      data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), _origin, uint8(_nonce));\n    else if (_nonce <= 0xff)\n      data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), _origin, bytes1(0x81), uint8(_nonce));\n    else if (_nonce <= 0xffff)\n      data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), _origin, bytes1(0x82), uint16(_nonce));\n    else if (_nonce <= 0xffffff)\n      data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), _origin, bytes1(0x83), uint24(_nonce));\n    else data = abi.encodePacked(bytes1(0xda), bytes1(0x94), _origin, bytes1(0x84), uint32(_nonce));\n    bytes32 hash = keccak256(data);\n    assembly {\n      mstore(0, hash)\n      _address := mload(0)\n    }\n  }\n}\n"
    },
    "contracts/system_tests/helpers/hevm.sol": {
      "content": "pragma solidity 0.8.6;\n\n/// @dev the cheat-code contract lives at 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\ninterface Hevm {\n  // Set block.timestamp (newTimestamp)\n  function warp(uint256) external;\n\n  // Set block.height (newHeight)\n  function roll(uint256) external;\n\n  // Set block.basefee (newBasefee)\n  function fee(uint256) external;\n\n  // Loads a storage slot from an address (who, slot)\n  function load(address, bytes32) external returns (bytes32);\n\n  // Stores a value to an address' storage slot, (who, slot, value)\n  function store(\n    address,\n    bytes32,\n    bytes32\n  ) external;\n\n  // Signs data, (privateKey, digest) => (v, r, s)\n  function sign(uint256, bytes32)\n    external\n    returns (\n      uint8,\n      bytes32,\n      bytes32\n    );\n\n  // Gets address for a given private key, (privateKey) => (address)\n  function addr(uint256) external returns (address);\n\n  // Performs a foreign function call via terminal, (stringInputs) => (result)\n  function ffi(string[] calldata) external returns (bytes memory);\n\n  // Sets the *next* call's msg.sender to be the input address\n  function prank(address) external;\n\n  // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n  function startPrank(address) external;\n\n  // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\n  function prank(address, address) external;\n\n  // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\n  function startPrank(address, address) external;\n\n  // Resets subsequent calls' msg.sender to be `address(this)`\n  function stopPrank() external;\n\n  // Sets an address' balance, (who, newBalance)\n  function deal(address, uint256) external;\n\n  // Sets an address' code, (who, newCode)\n  function etch(address, bytes calldata) external;\n\n  // Expects an error on next call\n  function expectRevert(bytes calldata) external;\n\n  function expectRevert(bytes4) external;\n\n  // Record all storage reads and writes\n  function record() external;\n\n  // Gets all accessed reads and write slot from a recording session, for a given address\n  function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n\n  // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\n  // Call this function, then emit an event, then call a function. Internally after the call, we check if\n  // logs were emitted in the expected order with the expected topics and data (as specified by the booleans)\n  function expectEmit(\n    bool,\n    bool,\n    bool,\n    bool\n  ) external;\n\n  // Mocks a call to an address, returning specified data.\n  // Calldata can either be strict or a partial match, e.g. if you only\n  // pass a Solidity selector to the expected calldata, then the entire Solidity\n  // function will be mocked.\n  function mockCall(\n    address,\n    bytes calldata,\n    bytes calldata\n  ) external;\n\n  // Clears all mocked calls\n  function clearMockedCalls() external;\n\n  // Expect a call to an address with the specified calldata.\n  // Calldata can either be strict or a partial match\n  function expectCall(address, bytes calldata) external;\n\n  // Gets the code from an artifact file. Takes in the relative path to the json file\n  function getCode(string calldata) external returns (bytes memory);\n\n  // Labels an address in call traces\n  function label(address, string calldata) external;\n\n  // If the condition is false, discard this run's fuzz inputs and generate new ones\n  function assume(bool) external;\n}\n"
    },
    "lib/ds-test/src/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSTest {\n  event log(string);\n  event logs(bytes);\n\n  event log_address(address);\n  event log_bytes32(bytes32);\n  event log_int(int256);\n  event log_uint(uint256);\n  event log_bytes(bytes);\n  event log_string(string);\n\n  event log_named_address(string key, address val);\n  event log_named_bytes32(string key, bytes32 val);\n  event log_named_decimal_int(string key, int256 val, uint256 decimals);\n  event log_named_decimal_uint(string key, uint256 val, uint256 decimals);\n  event log_named_int(string key, int256 val);\n  event log_named_uint(string key, uint256 val);\n  event log_named_bytes(string key, bytes val);\n  event log_named_string(string key, string val);\n\n  bool public IS_TEST = true;\n  bool public failed;\n\n  address constant HEVM_ADDRESS = address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n  modifier mayRevert() {\n    _;\n  }\n  modifier testopts(string memory) {\n    _;\n  }\n\n  function fail() internal {\n    failed = true;\n  }\n\n  modifier logs_gas() {\n    uint256 startGas = gasleft();\n    _;\n    uint256 endGas = gasleft();\n    emit log_named_uint('gas', startGas - endGas);\n  }\n\n  function assertTrue(bool condition) internal {\n    if (!condition) {\n      emit log('Error: Assertion Failed');\n      fail();\n    }\n  }\n\n  function assertTrue(bool condition, string memory err) internal {\n    if (!condition) {\n      emit log_named_string('Error', err);\n      assertTrue(condition);\n    }\n  }\n\n  function assertEq(address a, address b) internal {\n    if (a != b) {\n      emit log('Error: a == b not satisfied [address]');\n      emit log_named_address('  Expected', b);\n      emit log_named_address('    Actual', a);\n      fail();\n    }\n  }\n\n  function assertEq(\n    address a,\n    address b,\n    string memory err\n  ) internal {\n    if (a != b) {\n      emit log_named_string('Error', err);\n      assertEq(a, b);\n    }\n  }\n\n  function assertEq(bytes32 a, bytes32 b) internal {\n    if (a != b) {\n      emit log('Error: a == b not satisfied [bytes32]');\n      emit log_named_bytes32('  Expected', b);\n      emit log_named_bytes32('    Actual', a);\n      fail();\n    }\n  }\n\n  function assertEq(\n    bytes32 a,\n    bytes32 b,\n    string memory err\n  ) internal {\n    if (a != b) {\n      emit log_named_string('Error', err);\n      assertEq(a, b);\n    }\n  }\n\n  function assertEq32(bytes32 a, bytes32 b) internal {\n    assertEq(a, b);\n  }\n\n  function assertEq32(\n    bytes32 a,\n    bytes32 b,\n    string memory err\n  ) internal {\n    assertEq(a, b, err);\n  }\n\n  function assertEq(int256 a, int256 b) internal {\n    if (a != b) {\n      emit log('Error: a == b not satisfied [int]');\n      emit log_named_int('  Expected', b);\n      emit log_named_int('    Actual', a);\n      fail();\n    }\n  }\n\n  function assertEq(\n    int256 a,\n    int256 b,\n    string memory err\n  ) internal {\n    if (a != b) {\n      emit log_named_string('Error', err);\n      assertEq(a, b);\n    }\n  }\n\n  function assertEq(uint256 a, uint256 b) internal {\n    if (a != b) {\n      emit log('Error: a == b not satisfied [uint]');\n      emit log_named_uint('  Expected', b);\n      emit log_named_uint('    Actual', a);\n      fail();\n    }\n  }\n\n  function assertEq(\n    uint256 a,\n    uint256 b,\n    string memory err\n  ) internal {\n    if (a != b) {\n      emit log_named_string('Error', err);\n      assertEq(a, b);\n    }\n  }\n\n  function assertEqDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals\n  ) internal {\n    if (a != b) {\n      emit log('Error: a == b not satisfied [decimal int]');\n      emit log_named_decimal_int('  Expected', b, decimals);\n      emit log_named_decimal_int('    Actual', a, decimals);\n      fail();\n    }\n  }\n\n  function assertEqDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a != b) {\n      emit log_named_string('Error', err);\n      assertEqDecimal(a, b, decimals);\n    }\n  }\n\n  function assertEqDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals\n  ) internal {\n    if (a != b) {\n      emit log('Error: a == b not satisfied [decimal uint]');\n      emit log_named_decimal_uint('  Expected', b, decimals);\n      emit log_named_decimal_uint('    Actual', a, decimals);\n      fail();\n    }\n  }\n\n  function assertEqDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a != b) {\n      emit log_named_string('Error', err);\n      assertEqDecimal(a, b, decimals);\n    }\n  }\n\n  function assertGt(uint256 a, uint256 b) internal {\n    if (a <= b) {\n      emit log('Error: a > b not satisfied [uint]');\n      emit log_named_uint('  Value a', a);\n      emit log_named_uint('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertGt(\n    uint256 a,\n    uint256 b,\n    string memory err\n  ) internal {\n    if (a <= b) {\n      emit log_named_string('Error', err);\n      assertGt(a, b);\n    }\n  }\n\n  function assertGt(int256 a, int256 b) internal {\n    if (a <= b) {\n      emit log('Error: a > b not satisfied [int]');\n      emit log_named_int('  Value a', a);\n      emit log_named_int('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertGt(\n    int256 a,\n    int256 b,\n    string memory err\n  ) internal {\n    if (a <= b) {\n      emit log_named_string('Error', err);\n      assertGt(a, b);\n    }\n  }\n\n  function assertGtDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals\n  ) internal {\n    if (a <= b) {\n      emit log('Error: a > b not satisfied [decimal int]');\n      emit log_named_decimal_int('  Value a', a, decimals);\n      emit log_named_decimal_int('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertGtDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a <= b) {\n      emit log_named_string('Error', err);\n      assertGtDecimal(a, b, decimals);\n    }\n  }\n\n  function assertGtDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals\n  ) internal {\n    if (a <= b) {\n      emit log('Error: a > b not satisfied [decimal uint]');\n      emit log_named_decimal_uint('  Value a', a, decimals);\n      emit log_named_decimal_uint('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertGtDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a <= b) {\n      emit log_named_string('Error', err);\n      assertGtDecimal(a, b, decimals);\n    }\n  }\n\n  function assertGe(uint256 a, uint256 b) internal {\n    if (a < b) {\n      emit log('Error: a >= b not satisfied [uint]');\n      emit log_named_uint('  Value a', a);\n      emit log_named_uint('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertGe(\n    uint256 a,\n    uint256 b,\n    string memory err\n  ) internal {\n    if (a < b) {\n      emit log_named_string('Error', err);\n      assertGe(a, b);\n    }\n  }\n\n  function assertGe(int256 a, int256 b) internal {\n    if (a < b) {\n      emit log('Error: a >= b not satisfied [int]');\n      emit log_named_int('  Value a', a);\n      emit log_named_int('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertGe(\n    int256 a,\n    int256 b,\n    string memory err\n  ) internal {\n    if (a < b) {\n      emit log_named_string('Error', err);\n      assertGe(a, b);\n    }\n  }\n\n  function assertGeDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals\n  ) internal {\n    if (a < b) {\n      emit log('Error: a >= b not satisfied [decimal int]');\n      emit log_named_decimal_int('  Value a', a, decimals);\n      emit log_named_decimal_int('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertGeDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a < b) {\n      emit log_named_string('Error', err);\n      assertGeDecimal(a, b, decimals);\n    }\n  }\n\n  function assertGeDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals\n  ) internal {\n    if (a < b) {\n      emit log('Error: a >= b not satisfied [decimal uint]');\n      emit log_named_decimal_uint('  Value a', a, decimals);\n      emit log_named_decimal_uint('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertGeDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a < b) {\n      emit log_named_string('Error', err);\n      assertGeDecimal(a, b, decimals);\n    }\n  }\n\n  function assertLt(uint256 a, uint256 b) internal {\n    if (a >= b) {\n      emit log('Error: a < b not satisfied [uint]');\n      emit log_named_uint('  Value a', a);\n      emit log_named_uint('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertLt(\n    uint256 a,\n    uint256 b,\n    string memory err\n  ) internal {\n    if (a >= b) {\n      emit log_named_string('Error', err);\n      assertLt(a, b);\n    }\n  }\n\n  function assertLt(int256 a, int256 b) internal {\n    if (a >= b) {\n      emit log('Error: a < b not satisfied [int]');\n      emit log_named_int('  Value a', a);\n      emit log_named_int('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertLt(\n    int256 a,\n    int256 b,\n    string memory err\n  ) internal {\n    if (a >= b) {\n      emit log_named_string('Error', err);\n      assertLt(a, b);\n    }\n  }\n\n  function assertLtDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals\n  ) internal {\n    if (a >= b) {\n      emit log('Error: a < b not satisfied [decimal int]');\n      emit log_named_decimal_int('  Value a', a, decimals);\n      emit log_named_decimal_int('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertLtDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a >= b) {\n      emit log_named_string('Error', err);\n      assertLtDecimal(a, b, decimals);\n    }\n  }\n\n  function assertLtDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals\n  ) internal {\n    if (a >= b) {\n      emit log('Error: a < b not satisfied [decimal uint]');\n      emit log_named_decimal_uint('  Value a', a, decimals);\n      emit log_named_decimal_uint('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertLtDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a >= b) {\n      emit log_named_string('Error', err);\n      assertLtDecimal(a, b, decimals);\n    }\n  }\n\n  function assertLe(uint256 a, uint256 b) internal {\n    if (a > b) {\n      emit log('Error: a <= b not satisfied [uint]');\n      emit log_named_uint('  Value a', a);\n      emit log_named_uint('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertLe(\n    uint256 a,\n    uint256 b,\n    string memory err\n  ) internal {\n    if (a > b) {\n      emit log_named_string('Error', err);\n      assertLe(a, b);\n    }\n  }\n\n  function assertLe(int256 a, int256 b) internal {\n    if (a > b) {\n      emit log('Error: a <= b not satisfied [int]');\n      emit log_named_int('  Value a', a);\n      emit log_named_int('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertLe(\n    int256 a,\n    int256 b,\n    string memory err\n  ) internal {\n    if (a > b) {\n      emit log_named_string('Error', err);\n      assertLe(a, b);\n    }\n  }\n\n  function assertLeDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals\n  ) internal {\n    if (a > b) {\n      emit log('Error: a <= b not satisfied [decimal int]');\n      emit log_named_decimal_int('  Value a', a, decimals);\n      emit log_named_decimal_int('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertLeDecimal(\n    int256 a,\n    int256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a > b) {\n      emit log_named_string('Error', err);\n      assertLeDecimal(a, b, decimals);\n    }\n  }\n\n  function assertLeDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals\n  ) internal {\n    if (a > b) {\n      emit log('Error: a <= b not satisfied [decimal uint]');\n      emit log_named_decimal_uint('  Value a', a, decimals);\n      emit log_named_decimal_uint('  Value b', b, decimals);\n      fail();\n    }\n  }\n\n  function assertLeDecimal(\n    uint256 a,\n    uint256 b,\n    uint256 decimals,\n    string memory err\n  ) internal {\n    if (a > b) {\n      emit log_named_string('Error', err);\n      assertGeDecimal(a, b, decimals);\n    }\n  }\n\n  function assertEq(string memory a, string memory b) internal {\n    if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n      emit log('Error: a == b not satisfied [string]');\n      emit log_named_string('  Value a', a);\n      emit log_named_string('  Value b', b);\n      fail();\n    }\n  }\n\n  function assertEq(\n    string memory a,\n    string memory b,\n    string memory err\n  ) internal {\n    if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n      emit log_named_string('Error', err);\n      assertEq(a, b);\n    }\n  }\n\n  function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n    ok = true;\n    if (a.length == b.length) {\n      for (uint256 i = 0; i < a.length; i++) {\n        if (a[i] != b[i]) {\n          ok = false;\n        }\n      }\n    } else {\n      ok = false;\n    }\n  }\n\n  function assertEq0(bytes memory a, bytes memory b) internal {\n    if (!checkEq0(a, b)) {\n      emit log('Error: a == b not satisfied [bytes]');\n      emit log_named_bytes('  Expected', a);\n      emit log_named_bytes('    Actual', b);\n      fail();\n    }\n  }\n\n  function assertEq0(\n    bytes memory a,\n    bytes memory b,\n    string memory err\n  ) internal {\n    if (!checkEq0(a, b)) {\n      emit log_named_string('Error', err);\n      assertEq0(a, b);\n    }\n  }\n}\n"
    },
    "contracts/JBController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBController.sol';\nimport './interfaces/IJBMigratable.sol';\nimport './interfaces/IJBOperatorStore.sol';\nimport './interfaces/IJBPaymentTerminal.sol';\nimport './interfaces/IJBProjects.sol';\nimport './libraries/JBConstants.sol';\nimport './libraries/JBFundingCycleMetadataResolver.sol';\nimport './libraries/JBOperations.sol';\nimport './libraries/JBSplitsGroups.sol';\n\n/**\n  @notice\n  Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.\n\n  @dev\n  Adheres to -\n  IJBController: General interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the protocol's rules.\n  IJBMigratable: Allows migrating to this contract, with a hook called to prepare for the migration.\n\n  @dev\n  Inherits from -\n  JBOperatable: Several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\n  ERC165: Introspection on interface adherance. \n*/\ncontract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n  // A library that parses the packed funding cycle metadata into a more friendly format.\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\n\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\n  error CANT_MIGRATE_TO_CURRENT_CONTROLLER();\n  error CHANGE_TOKEN_NOT_ALLOWED();\n  error FUNDING_CYCLE_ALREADY_LAUNCHED();\n  error INVALID_BALLOT_REDEMPTION_RATE();\n  error INVALID_DISTRIBUTION_LIMIT();\n  error INVALID_DISTRIBUTION_LIMIT_CURRENCY();\n  error INVALID_OVERFLOW_ALLOWANCE();\n  error INVALID_OVERFLOW_ALLOWANCE_CURRENCY();\n  error INVALID_REDEMPTION_RATE();\n  error INVALID_RESERVED_RATE();\n  error MIGRATION_NOT_ALLOWED();\n  error MINT_NOT_ALLOWED_AND_NOT_TERMINAL_DELEGATE();\n  error NO_BURNABLE_TOKENS();\n  error NOT_CURRENT_CONTROLLER();\n  error ZERO_TOKENS_TO_MINT();\n\n  //*********************************************************************//\n  // --------------------- internal stored properties ------------------ //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that still need to have reserves minted against them.\n\n    _projectId The ID of the project to get the tracker of.\n  */\n  mapping(uint256 => int256) internal _processedTokenTrackerOf;\n\n  /**\n    @notice\n    Data regarding the distribution limit of a project during a configuration.\n\n    @dev\n    bits 0-231: The amount of token that a project can distribute per funding cycle.\n\n    @dev\n    bits 232-255: The currency of amount that a project can distribute.\n\n    _projectId The ID of the project to get the packed distribution limit data of.\n    _configuration The configuration during which the packed distribution limit data applies.\n    _terminal The terminal from which distributions are being limited.\n    _token The token for which distributions are being limited.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => mapping(address => uint256))))\n    internal _packedDistributionLimitDataOf;\n\n  /**\n    @notice\n    Data regarding the overflow allowance of a project during a configuration.\n\n    @dev\n    bits 0-231: The amount of overflow that a project is allowed to tap into on-demand throughout the configuration.\n\n    @dev\n    bits 232-255: The currency of the amount of overflow that a project is allowed to tap.\n\n    _projectId The ID of the project to get the packed overflow allowance data of.\n    _configuration The configuration during which the packed overflow allowance data applies.\n    _terminal The terminal managing the overflow.\n    _token The token for which overflow is being allowed.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => mapping(address => uint256))))\n    internal _packedOverflowAllowanceDataOf;\n\n  //*********************************************************************//\n  // --------------- public immutable stored properties ---------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Mints ERC-721's that represent project ownership.\n  */\n  IJBProjects public immutable override projects;\n\n  /**\n    @notice\n    The contract storing all funding cycle configurations.\n  */\n  IJBFundingCycleStore public immutable override fundingCycleStore;\n\n  /**\n    @notice\n    The contract that manages token minting and burning.\n  */\n  IJBTokenStore public immutable override tokenStore;\n\n  /**\n    @notice\n    The contract that stores splits for each project.\n  */\n  IJBSplitsStore public immutable override splitsStore;\n\n  /**\n    @notice\n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.\n\n    @dev\n    The number of decimals in the returned fixed point amount is the same as that of the specified terminal. \n\n    @param _projectId The ID of the project to get the distribution limit of.\n    @param _configuration The configuration during which the distribution limit applies.\n    @param _terminal The terminal from which distributions are being limited.\n    @param _token The token for which the distribution limit applies.\n\n    @return The distribution limit, as a fixed point number with the same number of decimals as the provided terminal.\n    @return The currency of the distribution limit.\n  */\n  function distributionLimitOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal,\n    address _token\n  ) external view override returns (uint256, uint256) {\n    // Get a reference to the packed data.\n    uint256 _data = _packedDistributionLimitDataOf[_projectId][_configuration][_terminal][_token];\n\n    // The limit is in bits 0-231. The currency is in bits 232-255.\n    return (uint256(uint232(_data)), _data >> 232);\n  }\n\n  /**\n    @notice\n    The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.\n\n    @dev\n    The number of decimals in the returned fixed point amount is the same as that of the specified terminal. \n\n    @param _projectId The ID of the project to get the overflow allowance of.\n    @param _configuration The configuration of the during which the allowance applies.\n    @param _terminal The terminal managing the overflow.\n    @param _token The token for which the overflow allowance applies.\n\n    @return The overflow allowance, as a fixed point number with the same number of decimals as the provided terminal.\n    @return The currency of the overflow allowance.\n  */\n  function overflowAllowanceOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal,\n    address _token\n  ) external view override returns (uint256, uint256) {\n    // Get a reference to the packed data.\n    uint256 _data = _packedOverflowAllowanceDataOf[_projectId][_configuration][_terminal][_token];\n\n    // The allowance is in bits 0-231. The currency is in bits 232-255.\n    return (uint256(uint232(_data)), _data >> 232);\n  }\n\n  /**\n    @notice\n    Gets the amount of reserved tokens that a project has available to distribute.\n\n    @param _projectId The ID of the project to get a reserved token balance of.\n    @param _reservedRate The reserved rate to use when making the calculation.\n\n    @return The current amount of reserved tokens.\n  */\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return\n      _reservedTokenAmountFrom(\n        _processedTokenTrackerOf[_projectId],\n        _reservedRate,\n        tokenStore.totalSupplyOf(_projectId)\n      );\n  }\n\n  /**\n    @notice\n    Gets the current total amount of outstanding tokens for a project, given a reserved rate.\n\n    @param _projectId The ID of the project to get total outstanding tokens of.\n    @param _reservedRate The reserved rate to use when making the calculation.\n\n    @return The current total amount of outstanding tokens for the project.\n  */\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    // Get the total number of tokens in circulation.\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\n\n    // Get the number of reserved tokens the project has.\n    uint256 _reservedTokenAmount = _reservedTokenAmountFrom(\n      _processedTokenTrackerOf[_projectId],\n      _reservedRate,\n      _totalSupply\n    );\n\n    // Add the reserved tokens to the total supply.\n    return _totalSupply + _reservedTokenAmount;\n  }\n\n  /** \n    @notice\n    A project's funding cycle for the specified configuration along with its metadata.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n  \n    @return fundingCycle The funding cycle.\n    @return metadata The funding cycle's metadata.\n  */\n  function getFundingCycleOf(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata)\n  {\n    fundingCycle = fundingCycleStore.get(_projectId, _configuration);\n    metadata = fundingCycle.expandMetadata();\n  }\n\n  /** \n    @notice\n    A project's latest configured funding cycle along with its metadata and the ballot state of the configuration.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n  \n    @return fundingCycle The latest configured funding cycle.\n    @return metadata The latest configured funding cycle's metadata.\n    @return ballotState The state of the configuration.\n  */\n  function latestConfiguredFundingCycleOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (\n      JBFundingCycle memory fundingCycle,\n      JBFundingCycleMetadata memory metadata,\n      JBBallotState ballotState\n    )\n  {\n    (fundingCycle, ballotState) = fundingCycleStore.latestConfiguredOf(_projectId);\n    metadata = fundingCycle.expandMetadata();\n  }\n\n  /** \n    @notice\n    A project's current funding cycle along with its metadata.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n  \n    @return fundingCycle The current funding cycle.\n    @return metadata The current funding cycle's metadata.\n  */\n  function currentFundingCycleOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata)\n  {\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n    metadata = fundingCycle.expandMetadata();\n  }\n\n  /** \n    @notice\n    A project's queued funding cycle along with its metadata.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n  \n    @return fundingCycle The queued funding cycle.\n    @return metadata The queued funding cycle's metadata.\n  */\n  function queuedFundingCycleOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata)\n  {\n    fundingCycle = fundingCycleStore.queuedOf(_projectId);\n    metadata = fundingCycle.expandMetadata();\n  }\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBController).interfaceId ||\n      _interfaceId == type(IJBMigratable).interfaceId ||\n      _interfaceId == type(IJBOperatable).interfaceId ||\n      super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // ---------------------------- constructor -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\n    @param _tokenStore A contract that manages token minting and burning.\n    @param _splitsStore A contract that stores splits for each project.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBFundingCycleStore _fundingCycleStore,\n    IJBTokenStore _tokenStore,\n    IJBSplitsStore _splitsStore\n  ) JBOperatable(_operatorStore) {\n    projects = _projects;\n    directory = _directory;\n    fundingCycleStore = _fundingCycleStore;\n    tokenStore = _tokenStore;\n    splitsStore = _splitsStore;\n  }\n\n  //*********************************************************************//\n  // --------------------- external transactions ----------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits.\n\n    @dev\n    Each operation within this transaction can be done in sequence separately.\n\n    @dev\n    Anyone can deploy a project on an owner's behalf.\n\n    @param _owner The address to set as the owner of the project. The project ERC-721 will be owned by this address.\n    @param _projectMetadata Metadata to associate with the project within a particular domain. This can be updated any time by the owner of the project.\n    @param _data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\n    @param _groupedSplits An array of splits to set for any number of groups. \n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The `_distributionLimit` and `_overflowAllowance` parameters must fit in a `uint232`.\n    @param _terminals Payment terminals to add for the project.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return projectId The ID of the project.\n  */\n  function launchProjectFor(\n    address _owner,\n    JBProjectMetadata calldata _projectMetadata,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] calldata _groupedSplits,\n    JBFundAccessConstraints[] calldata _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals,\n    string memory _memo\n  ) external virtual override returns (uint256 projectId) {\n    // Mint the project into the wallet of the message sender.\n    projectId = projects.createFor(_owner, _projectMetadata);\n\n    // Set this contract as the project's controller in the directory.\n    directory.setControllerOf(projectId, address(this));\n\n    // Configure the first funding cycle.\n    uint256 _configuration = _configure(\n      projectId,\n      _data,\n      _metadata,\n      _mustStartAtOrAfter,\n      _groupedSplits,\n      _fundAccessConstraints\n    );\n\n    // Add the provided terminals to the list of terminals.\n    if (_terminals.length > 0) directory.setTerminalsOf(projectId, _terminals);\n\n    emit LaunchProject(_configuration, projectId, _memo, msg.sender);\n  }\n\n  /**\n    @notice\n    Creates a funding cycle for an already existing project ERC-721.\n\n    @dev\n    Each operation within this transaction can be done in sequence separately.\n\n    @dev\n    Only a project owner or operator can launch its funding cycles.\n\n    @param _projectId The ID of the project to launch funding cycles for.\n    @param _data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\n    @param _groupedSplits An array of splits to set for any number of groups. \n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The `_distributionLimit` and `_overflowAllowance` parameters must fit in a `uint232`.\n    @param _terminals Payment terminals to add for the project.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return configuration The configuration of the funding cycle that was successfully created.\n  */\n  function launchFundingCyclesFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] calldata _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals,\n    string memory _memo\n  )\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\n    returns (uint256 configuration)\n  {\n    // If there is a previous configuration, reconfigureFundingCyclesOf should be called instead\n    if (fundingCycleStore.latestConfigurationOf(_projectId) > 0)\n      revert FUNDING_CYCLE_ALREADY_LAUNCHED();\n\n    // Set this contract as the project's controller in the directory.\n    directory.setControllerOf(_projectId, address(this));\n\n    // Configure the first funding cycle.\n    configuration = _configure(\n      _projectId,\n      _data,\n      _metadata,\n      _mustStartAtOrAfter,\n      _groupedSplits,\n      _fundAccessConstraints\n    );\n\n    // Add the provided terminals to the list of terminals.\n    if (_terminals.length > 0) directory.setTerminalsOf(_projectId, _terminals);\n\n    emit LaunchFundingCycles(configuration, _projectId, _memo, msg.sender);\n  }\n\n  /**\n    @notice\n    Proposes a configuration of a subsequent funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot.\n\n    @dev\n    Only a project's owner or a designated operator can configure its funding cycles.\n\n    @param _projectId The ID of the project whose funding cycles are being reconfigured.\n    @param _data Data that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle.\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\n    @param _groupedSplits An array of splits to set for any number of groups. \n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The `_distributionLimit` and `_overflowAllowance` parameters must fit in a `uint232`.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return configuration The configuration of the funding cycle that was successfully reconfigured.\n  */\n  function reconfigureFundingCyclesOf(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] calldata _groupedSplits,\n    JBFundAccessConstraints[] calldata _fundAccessConstraints,\n    string calldata _memo\n  )\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\n    returns (uint256 configuration)\n  {\n    // Configure the next funding cycle.\n    configuration = _configure(\n      _projectId,\n      _data,\n      _metadata,\n      _mustStartAtOrAfter,\n      _groupedSplits,\n      _fundAccessConstraints\n    );\n\n    emit ReconfigureFundingCycles(configuration, _projectId, _memo, msg.sender);\n  }\n\n  /**\n    @notice\n    Issues an owner's ERC20 JBTokens that'll be used when claiming tokens.\n\n    @dev\n    Deploys a project's ERC20 JBToken contract.\n\n    @dev\n    Only a project's owner or operator can issue its token.\n\n    @param _projectId The ID of the project being issued tokens.\n    @param _name The ERC20's name.\n    @param _symbol The ERC20's symbol.\n  */\n  function issueTokenFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  )\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE)\n    returns (IJBToken token)\n  {\n    // Issue the token in the store.\n    return tokenStore.issueFor(_projectId, _name, _symbol);\n  }\n\n  /**\n    @notice\n    Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\n\n    @dev\n    Only a project's owner or operator can change its token.\n\n    @param _projectId The ID of the project to which the changed token belongs.\n    @param _token The new token.\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\n  */\n  function changeTokenOf(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  )\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CHANGE_TOKEN)\n  {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The current funding cycle must not be paused.\n    if (!_fundingCycle.changeTokenAllowed()) revert CHANGE_TOKEN_NOT_ALLOWED();\n\n    // Change the token in the store.\n    tokenStore.changeFor(_projectId, _token, _newOwner);\n  }\n\n  /**\n    @notice\n    Mint new token supply into an account, and optionally reserve a supply to be distributed according to the project's current funding cycle configuration.\n\n    @dev\n    Only a project's owner, a designated operator, one of its terminals, or the current data source can mint its tokens.\n\n    @param _projectId The ID of the project to which the tokens being minted belong.\n    @param _tokenCount The amount of tokens to mint in total, counting however many should be reserved.\n    @param _beneficiary The account that the tokens are being minted for.\n    @param _memo A memo to pass along to the emitted event.\n    @param _preferClaimedTokens A flag indicating whether a project's attached token contract should be minted if they have been issued.\n    @param _useReservedRate Whether to use the current funding cycle's reserved rate in the mint calculation.\n\n    @return beneficiaryTokenCount The amount of tokens minted for the beneficiary.\n  */\n  function mintTokensOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _beneficiary,\n    string calldata _memo,\n    bool _preferClaimedTokens,\n    bool _useReservedRate\n  ) external virtual override returns (uint256 beneficiaryTokenCount) {\n    // There should be tokens to mint.\n    if (_tokenCount == 0) revert ZERO_TOKENS_TO_MINT();\n\n    // Define variables that will be needed outside scoped section below.\n    // Keep a reference to the reserved rate to use\n    uint256 _reservedRate;\n\n    // Scoped section prevents stack too deep. `_fundingCycle` only used within scope.\n    {\n      // Get a reference to the project's current funding cycle.\n      JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n      // Minting limited to: project owner, authorized callers, project terminal and current funding cycle data source\n      _requirePermissionAllowingOverride(\n        projects.ownerOf(_projectId),\n        _projectId,\n        JBOperations.MINT,\n        directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender)) ||\n          msg.sender == address(_fundingCycle.dataSource())\n      );\n\n      // If the message sender is not a terminal or a datasource, the current funding cycle must allow minting.\n      if (\n        !_fundingCycle.mintingAllowed() &&\n        !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender)) &&\n        msg.sender != address(_fundingCycle.dataSource())\n      ) revert MINT_NOT_ALLOWED_AND_NOT_TERMINAL_DELEGATE();\n\n      // Determine the reserved rate to use.\n      _reservedRate = _useReservedRate ? _fundingCycle.reservedRate() : 0;\n    }\n\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE)\n      // Subtract the total weighted amount from the tracker so the full reserved token amount can be printed later.\n      _processedTokenTrackerOf[_projectId] =\n        _processedTokenTrackerOf[_projectId] -\n        int256(_tokenCount);\n    else {\n      // The unreserved token count that will be minted for the beneficiary.\n      beneficiaryTokenCount = PRBMath.mulDiv(\n        _tokenCount,\n        JBConstants.MAX_RESERVED_RATE - _reservedRate,\n        JBConstants.MAX_RESERVED_RATE\n      );\n\n      if (_reservedRate == 0)\n        // If there's no reserved rate, increment the tracker with the newly minted tokens.\n        _processedTokenTrackerOf[_projectId] =\n          _processedTokenTrackerOf[_projectId] +\n          int256(beneficiaryTokenCount);\n\n      // Mint the tokens.\n      tokenStore.mintFor(_beneficiary, _projectId, beneficiaryTokenCount, _preferClaimedTokens);\n    }\n\n    emit MintTokens(\n      _beneficiary,\n      _projectId,\n      _tokenCount,\n      beneficiaryTokenCount,\n      _memo,\n      _reservedRate,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Burns a token holder's supply.\n\n    @dev\n    Only a token's holder, a designated operator, or a project's terminal can burn it.\n\n    @param _holder The account that is having its tokens burned.\n    @param _projectId The ID of the project to which the tokens being burned belong.\n    @param _tokenCount The number of tokens to burn.\n    @param _memo A memo to pass along to the emitted event.\n    @param _preferClaimedTokens A flag indicating whether a project's attached token contract should be burned first if they have been issued.\n  */\n  function burnTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string calldata _memo,\n    bool _preferClaimedTokens\n  )\n    external\n    virtual\n    override\n    requirePermissionAllowingOverride(\n      _holder,\n      _projectId,\n      JBOperations.BURN,\n      directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\n    )\n  {\n    // There should be tokens to burn\n    if (_tokenCount == 0) revert NO_BURNABLE_TOKENS();\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // If the message sender is not a terminal, the current funding cycle must not be paused.\n    if (\n      _fundingCycle.burnPaused() &&\n      !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\n    ) revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\n\n    // Update the token tracker so that reserved tokens will still be correctly mintable.\n    _processedTokenTrackerOf[_projectId] =\n      _processedTokenTrackerOf[_projectId] -\n      int256(_tokenCount);\n\n    // Burn the tokens.\n    tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens);\n\n    emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\n  }\n\n  /**\n    @notice\n    Distributes all outstanding reserved tokens for a project.\n\n    @param _projectId The ID of the project to which the reserved tokens belong.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return The amount of minted reserved tokens.\n  */\n  function distributeReservedTokensOf(uint256 _projectId, string calldata _memo)\n    external\n    virtual\n    override\n    returns (uint256)\n  {\n    return _distributeReservedTokensOf(_projectId, _memo);\n  }\n\n  /**\n    @notice\n    Allows other controllers to signal to this one that a migration is expected for the specified project.\n\n    @dev\n    This controller should not yet be the project's controller.\n\n    @param _projectId The ID of the project that will be migrated to this controller.\n    @param _from The controller being migrated from.\n  */\n  function prepForMigrationOf(uint256 _projectId, address _from) external virtual override {\n    // This controller must not be the project's current controller.\n    if (directory.controllerOf(_projectId) == address(this))\n      revert CANT_MIGRATE_TO_CURRENT_CONTROLLER();\n\n    // Set the tracker as the total supply.\n    _processedTokenTrackerOf[_projectId] = int256(tokenStore.totalSupplyOf(_projectId));\n\n    emit PrepMigration(_projectId, _from, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows a project to migrate from this controller to another.\n\n    @dev\n    Only a project's owner or a designated operator can migrate it.\n\n    @param _projectId The ID of the project that will be migrated from this controller.\n    @param _to The controller to which the project is migrating.\n  */\n  function migrate(uint256 _projectId, IJBMigratable _to)\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_CONTROLLER)\n  {\n    // This controller must be the project's current controller.\n    if (directory.controllerOf(_projectId) != address(this)) revert NOT_CURRENT_CONTROLLER();\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Migration must be allowed.\n    if (!_fundingCycle.controllerMigrationAllowed()) revert MIGRATION_NOT_ALLOWED();\n\n    // All reserved tokens must be minted before migrating.\n    if (uint256(_processedTokenTrackerOf[_projectId]) != tokenStore.totalSupplyOf(_projectId))\n      _distributeReservedTokensOf(_projectId, '');\n\n    // Make sure the new controller is prepped for the migration.\n    _to.prepForMigrationOf(_projectId, address(this));\n\n    // Set the new controller.\n    directory.setControllerOf(_projectId, address(_to));\n\n    emit Migrate(_projectId, _to, msg.sender);\n  }\n\n  //*********************************************************************//\n  // ------------------------ internal functions ----------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Distributes all outstanding reserved tokens for a project.\n\n    @param _projectId The ID of the project to which the reserved tokens belong.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return tokenCount The amount of minted reserved tokens.\n  */\n  function _distributeReservedTokensOf(uint256 _projectId, string memory _memo)\n    internal\n    returns (uint256 tokenCount)\n  {\n    // Get the current funding cycle to read the reserved rate from.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Get a reference to new total supply of tokens before minting reserved tokens.\n    uint256 _totalTokens = tokenStore.totalSupplyOf(_projectId);\n\n    // Get a reference to the number of tokens that need to be minted.\n    tokenCount = _reservedTokenAmountFrom(\n      _processedTokenTrackerOf[_projectId],\n      _fundingCycle.reservedRate(),\n      _totalTokens\n    );\n\n    // Set the tracker to be the new total supply.\n    _processedTokenTrackerOf[_projectId] = int256(_totalTokens + tokenCount);\n\n    // Get a reference to the project owner.\n    address _owner = projects.ownerOf(_projectId);\n\n    // Distribute tokens to splits and get a reference to the leftover amount to mint after all splits have gotten their share.\n    uint256 _leftoverTokenCount = tokenCount == 0\n      ? 0\n      : _distributeToReservedTokenSplitsOf(\n        _projectId,\n        _fundingCycle.configuration,\n        JBSplitsGroups.RESERVED_TOKENS,\n        tokenCount\n      );\n\n    // Mint any leftover tokens to the project owner.\n    if (_leftoverTokenCount > 0) tokenStore.mintFor(_owner, _projectId, _leftoverTokenCount, false);\n\n    emit DistributeReservedTokens(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _owner,\n      tokenCount,\n      _leftoverTokenCount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Distribute tokens to the splits according to the specified funding cycle configuration.\n\n    @param _projectId The ID of the project for which reserved token splits are being distributed.\n    @param _domain The domain of the splits to distribute the reserved tokens between.\n    @param _group The group of the splits to distribute the reserved tokens between.\n    @param _amount The total amount of tokens to mint.\n\n    @return leftoverAmount If the splits percents dont add up to 100%, the leftover amount is returned.\n  */\n  function _distributeToReservedTokenSplitsOf(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group,\n    uint256 _amount\n  ) internal returns (uint256 leftoverAmount) {\n    // Set the leftover amount to the initial amount.\n    leftoverAmount = _amount;\n\n    // Get a reference to the project's reserved token splits.\n    JBSplit[] memory _splits = splitsStore.splitsOf(_projectId, _domain, _group);\n\n    //Transfer between all splits.\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\n      // Get a reference to the split being iterated on.\n      JBSplit memory _split = _splits[_i];\n\n      // The amount to send towards the split.\n      uint256 _tokenCount = PRBMath.mulDiv(\n        _amount,\n        _split.percent,\n        JBConstants.SPLITS_TOTAL_PERCENT\n      );\n\n      // Mints tokens for the split if needed.\n      if (_tokenCount > 0) {\n        tokenStore.mintFor(\n          // If an allocator is set in the splits, set it as the beneficiary.\n          // Otherwise if a projectId is set in the split, set the project's owner as the beneficiary.\n          // If the split has a beneficiary send to the split's beneficiary. Otherwise send to the msg.sender.\n          _split.allocator != IJBSplitAllocator(address(0))\n            ? address(_split.allocator)\n            : _split.projectId != 0\n            ? projects.ownerOf(_split.projectId)\n            : _split.beneficiary != address(0)\n            ? _split.beneficiary\n            : msg.sender,\n          _projectId,\n          _tokenCount,\n          _split.preferClaimed\n        );\n\n        // If there's an allocator set, trigger its `allocate` function.\n        if (_split.allocator != IJBSplitAllocator(address(0)))\n          _split.allocator.allocate(\n            JBSplitAllocationData(\n              address(tokenStore.tokenOf(_projectId)),\n              _tokenCount,\n              18,\n              _projectId,\n              _group,\n              _split\n            )\n          );\n\n        // Subtract from the amount to be sent to the beneficiary.\n        leftoverAmount = leftoverAmount - _tokenCount;\n      }\n\n      emit DistributeToReservedTokenSplit(\n        _projectId,\n        _domain,\n        _group,\n        _split,\n        _tokenCount,\n        msg.sender\n      );\n    }\n  }\n\n  /**\n    @notice\n    Configures a funding cycle and stores information pertinent to the configuration.\n\n    @param _projectId The ID of the project whose funding cycles are being reconfigured.\n    @param _data Data that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle.\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\n    @param _groupedSplits An array of splits to set for any number of groups. \n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\n\n    @return configuration The configuration of the funding cycle that was successfully reconfigured.\n  */\n  function _configure(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints\n  ) internal returns (uint256) {\n    // Make sure the provided reserved rate is valid.\n    if (_metadata.reservedRate > JBConstants.MAX_RESERVED_RATE) revert INVALID_RESERVED_RATE();\n\n    // Make sure the provided redemption rate is valid.\n    if (_metadata.redemptionRate > JBConstants.MAX_REDEMPTION_RATE)\n      revert INVALID_REDEMPTION_RATE();\n\n    // Make sure the provided ballot redemption rate is valid.\n    if (_metadata.ballotRedemptionRate > JBConstants.MAX_REDEMPTION_RATE)\n      revert INVALID_BALLOT_REDEMPTION_RATE();\n\n    // Configure the funding cycle's properties.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.configureFor(\n      _projectId,\n      _data,\n      JBFundingCycleMetadataResolver.packFundingCycleMetadata(_metadata),\n      _mustStartAtOrAfter\n    );\n\n    // Set splits for the group.\n    splitsStore.set(_projectId, _fundingCycle.configuration, _groupedSplits);\n\n    // Set distribution limits if there are any.\n    for (uint256 _i; _i < _fundAccessConstraints.length; _i++) {\n      JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i];\n\n      // If distribution limit value is larger than 232 bits, revert.\n      if (_constraints.distributionLimit > type(uint232).max) revert INVALID_DISTRIBUTION_LIMIT();\n\n      // If distribution limit currency value is larger than 24 bits, revert.\n      if (_constraints.distributionLimitCurrency > type(uint24).max)\n        revert INVALID_DISTRIBUTION_LIMIT_CURRENCY();\n\n      // If overflow allowance value is larger than 232 bits, revert.\n      if (_constraints.overflowAllowance > type(uint232).max) revert INVALID_OVERFLOW_ALLOWANCE();\n\n      // If overflow allowance currency value is larger than 24 bits, revert.\n      if (_constraints.overflowAllowanceCurrency > type(uint24).max)\n        revert INVALID_OVERFLOW_ALLOWANCE_CURRENCY();\n\n      // Set the distribution limit if there is one.\n      if (_constraints.distributionLimit > 0)\n        _packedDistributionLimitDataOf[_projectId][_fundingCycle.configuration][\n          _constraints.terminal\n        ][_constraints.token] =\n          _constraints.distributionLimit |\n          (_constraints.distributionLimitCurrency << 232);\n\n      // Set the overflow allowance if there is one.\n      if (_constraints.overflowAllowance > 0)\n        _packedOverflowAllowanceDataOf[_projectId][_fundingCycle.configuration][\n          _constraints.terminal\n        ][_constraints.token] =\n          _constraints.overflowAllowance |\n          (_constraints.overflowAllowanceCurrency << 232);\n\n      emit SetFundAccessConstraints(\n        _fundingCycle.configuration,\n        _fundingCycle.number,\n        _projectId,\n        _constraints,\n        msg.sender\n      );\n    }\n\n    return _fundingCycle.configuration;\n  }\n\n  /**\n    @notice\n    Gets the amount of reserved tokens currently tracked for a project given a reserved rate.\n\n    @param _processedTokenTracker The tracker to make the calculation with.\n    @param _reservedRate The reserved rate to use to make the calculation.\n    @param _totalEligibleTokens The total amount to make the calculation with.\n\n    @return amount reserved token amount.\n  */\n  function _reservedTokenAmountFrom(\n    int256 _processedTokenTracker,\n    uint256 _reservedRate,\n    uint256 _totalEligibleTokens\n  ) internal pure returns (uint256) {\n    // Get a reference to the amount of tokens that are unprocessed.\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker >= 0\n      ? _totalEligibleTokens - uint256(_processedTokenTracker)\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\n\n    // If there are no unprocessed tokens, return.\n    if (_unprocessedTokenBalanceOf == 0) return 0;\n\n    // If all tokens are reserved, return the full unprocessed amount.\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf;\n\n    return\n      PRBMath.mulDiv(\n        _unprocessedTokenBalanceOf,\n        JBConstants.MAX_RESERVED_RATE,\n        JBConstants.MAX_RESERVED_RATE - _reservedRate\n      ) - _unprocessedTokenBalanceOf;\n  }\n}\n"
    },
    "contracts/JBDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBDirectory.sol';\nimport './libraries/JBGlobalFundingCycleMetadataResolver.sol';\nimport './libraries/JBOperations.sol';\n\n/**\n  @notice\n  Keeps a reference of which terminal contracts each project is currently accepting funds through, and which controller contract is managing each project's tokens and funding cycles.\n\n  @dev\n  Adheres to -\n  IJBDirectory: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n  // A library that parses the packed funding cycle metadata into a friendlier format.\n  using JBGlobalFundingCycleMetadataResolver for uint8;\n\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error DUPLICATE_TERMINALS();\n  error INVALID_PROJECT_ID_IN_DIRECTORY();\n  error SET_CONTROLLER_NOT_ALLOWED();\n  error SET_TERMINALS_NOT_ALLOWED();\n  error TOKEN_NOT_ACCEPTED();\n\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    For each project ID, the terminals that are currently managing its funds.\n\n    _projectId The ID of the project to get terminals of.\n  */\n  mapping(uint256 => IJBPaymentTerminal[]) private _terminalsOf;\n\n  /**\n    @notice\n    The project's primary terminal for a token.\n\n    _projectId The ID of the project to get the primary terminal of.\n    _token The token to get the project's primary terminal of.\n  */\n  mapping(uint256 => mapping(address => IJBPaymentTerminal)) private _primaryTerminalOf;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  /**\n    @notice\n    The contract storing all funding cycle configurations.\n  */\n  IJBFundingCycleStore public immutable override fundingCycleStore;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    For each project ID, the controller that manages how terminals interact with tokens and funding cycles.\n\n    _projectId The ID of the project to get the controller of.\n  */\n  mapping(uint256 => address) public override controllerOf;\n\n  /**\n    @notice\n    Addresses that can set a project's first controller on their behalf. These addresses/contracts have been vetted and verified by this contract's owner.\n\n    _address The address that is either allowed or not.\n  */\n  mapping(address => bool) public override isAllowedToSetFirstController;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    For each project ID, the terminals that are currently managing its funds.\n\n    @param _projectId The ID of the project to get terminals of.\n\n    @return An array of terminal addresses.\n  */\n  function terminalsOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (IJBPaymentTerminal[] memory)\n  {\n    return _terminalsOf[_projectId];\n  }\n\n  /**\n    @notice\n    The primary terminal that is managing funds for a project for a specified token.\n\n    @dev\n    The zero address is returned if a terminal isn't found for the specified token.\n\n    @param _projectId The ID of the project to get a terminal for.\n    @param _token The token the terminal accepts.\n\n    @return The primary terminal for the project for the specified token.\n  */\n  function primaryTerminalOf(uint256 _projectId, address _token)\n    external\n    view\n    override\n    returns (IJBPaymentTerminal)\n  {\n    // If a primary terminal for the token was specifically set and its one of the project's terminals, return it.\n    if (\n      _primaryTerminalOf[_projectId][_token] != IJBPaymentTerminal(address(0)) &&\n      isTerminalOf(_projectId, _primaryTerminalOf[_projectId][_token])\n    ) return _primaryTerminalOf[_projectId][_token];\n\n    // Return the first terminal which accepts the specified token.\n    for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++) {\n      IJBPaymentTerminal _terminal = _terminalsOf[_projectId][_i];\n      if (_terminal.acceptsToken(_token, _projectId)) return _terminal;\n    }\n\n    // Not found.\n    return IJBPaymentTerminal(address(0));\n  }\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Whether or not a specified terminal is a terminal of the specified project.\n\n    @param _projectId The ID of the project to check within.\n    @param _terminal The address of the terminal to check for.\n\n    @return A flag indicating whether or not the specified terminal is a terminal of the specified project.\n  */\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\n    public\n    view\n    override\n    returns (bool)\n  {\n    for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++)\n      if (_terminalsOf[_projectId][_i] == _terminal) return true;\n    return false;\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\n    @param _owner The address that will own the contract.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBFundingCycleStore _fundingCycleStore,\n    address _owner\n  ) JBOperatable(_operatorStore) {\n    projects = _projects;\n    fundingCycleStore = _fundingCycleStore;\n\n    _transferOwnership(_owner);\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Update the controller that manages how terminals interact with the ecosystem.\n\n    @dev\n    A controller can be set if:\n    - the message sender is the project owner or an operator having the correct authorization.\n    - the message sender is the project's current controller.\n    - or, an allowedlisted address is setting a controller for a project that doesn't already have a controller.\n\n    @param _projectId The ID of the project to set a new controller for.\n    @param _controller The new controller to set.\n  */\n  function setControllerOf(uint256 _projectId, address _controller)\n    external\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.SET_CONTROLLER,\n      (msg.sender == address(controllerOf[_projectId]) ||\n        (isAllowedToSetFirstController[msg.sender] && controllerOf[_projectId] == address(0)))\n    )\n  {\n    // The project must exist.\n    if (projects.count() < _projectId) revert INVALID_PROJECT_ID_IN_DIRECTORY();\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Setting controller is allowed if called from the current controller, or if the project doesn't have a current controller, or if the project's funding cycle allows setting the controller. Revert otherwise.\n    if (\n      msg.sender != address(controllerOf[_projectId]) &&\n      controllerOf[_projectId] != address(0) &&\n      !uint8(_fundingCycle.metadata >> 8).setControllerAllowed()\n    ) revert SET_CONTROLLER_NOT_ALLOWED();\n\n    // Set the new controller.\n    controllerOf[_projectId] = _controller;\n\n    emit SetController(_projectId, _controller, msg.sender);\n  }\n\n  /** \n    @notice \n    Set a project's terminals.\n\n    @dev\n    Only a project owner, an operator, or its controller can set its terminals.\n\n    @param _projectId The ID of the project having terminals set.\n    @param _terminals The terminal to set.\n  */\n  function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals)\n    external\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.SET_TERMINALS,\n      msg.sender == address(controllerOf[_projectId])\n    )\n  {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Setting terminals must be allowed if not called from the current controller.\n    if (\n      msg.sender != address(controllerOf[_projectId]) &&\n      !uint8(_fundingCycle.metadata >> 8).setTerminalsAllowed()\n    ) revert SET_TERMINALS_NOT_ALLOWED();\n\n    // Delete the stored terminals for the project.\n    _terminalsOf[_projectId] = _terminals;\n\n    // Make sure duplicates were not added.\n    if (_terminals.length > 1)\n      for (uint256 _i; _i < _terminals.length; _i++)\n        for (uint256 _j = _i + 1; _j < _terminals.length; _j++)\n          if (_terminals[_i] == _terminals[_j]) revert DUPLICATE_TERMINALS();\n\n    emit SetTerminals(_projectId, _terminals, msg.sender);\n  }\n\n  /**\n    @notice\n    Project's can set which terminal should be their primary for a particular token.\n    This is useful in case a project has several terminals connected for a particular token.\n\n    @dev\n    The terminal will be set as the primary terminal where ecosystem contracts should route tokens.\n\n    @dev\n    If setting a newly added terminal and the funding cycle doesn't allow new terminals, the caller must be the current controller.\n\n    @param _projectId The ID of the project for which a primary token is being set.\n    @param _token The token to set the primary terminal of.\n    @param _terminal The terminal to make primary.\n  */\n  function setPrimaryTerminalOf(\n    uint256 _projectId,\n    address _token,\n    IJBPaymentTerminal _terminal\n  )\n    external\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.SET_PRIMARY_TERMINAL)\n  {\n    // Can't set the primary terminal for a token if it doesn't accept the token.\n    if (!_terminal.acceptsToken(_token, _projectId)) revert TOKEN_NOT_ACCEPTED();\n\n    // Add the terminal to the project if it hasn't been already.\n    _addTerminalIfNeeded(_projectId, _terminal);\n\n    // Store the terminal as the primary for the particular token.\n    _primaryTerminalOf[_projectId][_token] = _terminal;\n\n    emit SetPrimaryTerminal(_projectId, _token, _terminal, msg.sender);\n  }\n\n  /** \n    @notice\t\n    Set a contract to the list of trusted addresses that can set a first controller for any project.\t\n\n    @dev\n    The owner can add addresses which are allowed to change projects' first controllers. \n    These addresses are known and vetted controllers as well as contracts designed to launch new projects. \n    A project can set its own controller without it being on the allow list.\n\n    @dev\n    If you would like an address/contract allowlisted, please reach out to the contract owner.\n\n    @param _address The address to allow or revoke allowance from.\n    @param _flag Whether allowance is being added or revoked.\n  */\n  function setIsAllowedToSetFirstController(address _address, bool _flag)\n    external\n    override\n    onlyOwner\n  {\n    // Set the flag in the allowlist.\n    isAllowedToSetFirstController[_address] = _flag;\n\n    emit SetIsAllowedToSetFirstController(_address, _flag, msg.sender);\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Add a terminal to a project's list of terminals if it hasn't been already.\n\n    @param _projectId The ID of the project having a terminal added.\n    @param _terminal The terminal to add.\n  */\n  function _addTerminalIfNeeded(uint256 _projectId, IJBPaymentTerminal _terminal) private {\n    // Check that the terminal has not already been added.\n    if (isTerminalOf(_projectId, _terminal)) return;\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Setting terminals must be allowed if not called from the current controller.\n    if (\n      msg.sender != address(controllerOf[_projectId]) &&\n      !uint8(_fundingCycle.metadata >> 8).setTerminalsAllowed()\n    ) revert SET_TERMINALS_NOT_ALLOWED();\n\n    // Add the new terminal.\n    _terminalsOf[_projectId].push(_terminal);\n\n    emit AddTerminal(_projectId, _terminal, msg.sender);\n  }\n}\n"
    },
    "contracts/JBETHPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport './abstract/JBPayoutRedemptionPaymentTerminal.sol';\n\n/**\n  @notice\n  Manages all inflows and outflows of ETH funds into the protocol ecosystem.\n\n  @dev\n  Inherits from -\n  JBPayoutRedemptionPaymentTerminal: Generic terminal managing all inflows and outflows of funds into the protocol ecosystem.\n*/\ncontract JBETHPaymentTerminal is JBPayoutRedemptionPaymentTerminal {\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _baseWeightCurrency The currency to base token issuance on.\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _splitsStore A contract that stores splits for each project.\n    @param _prices A contract that exposes price feeds.\n    @param _store A contract that stores the terminal's data.\n    @param _owner The address that will own this contract.\n  */\n  constructor(\n    uint256 _baseWeightCurrency,\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBSplitsStore _splitsStore,\n    IJBPrices _prices,\n    IJBSingleTokenPaymentTerminalStore _store,\n    address _owner\n  )\n    JBPayoutRedemptionPaymentTerminal(\n      JBTokens.GAS_TOKEN,\n      18, // 18 decimals.\n      JBCurrencies.GAS_CURRENCY,\n      _baseWeightCurrency,\n      JBSplitsGroups.ETH_PAYOUT,\n      _operatorStore,\n      _projects,\n      _directory,\n      _splitsStore,\n      _prices,\n      _store,\n      _owner\n    )\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  //*********************************************************************//\n  // ---------------------- internal transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Transfers tokens.\n\n    @param _from The address from which the transfer should originate.\n    @param _to The address to which the transfer should go.\n    @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal.\n  */\n  function _transferFrom(\n    address _from,\n    address payable _to,\n    uint256 _amount\n  ) internal override {\n    _from; // Prevents unused var compiler and natspec complaints.\n\n    Address.sendValue(_to, _amount);\n  }\n\n  /** \n    @notice\n    Logic to be triggered before transferring tokens from this terminal.\n\n    @param _to The address to which the transfer is going.\n    @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal.\n  */\n  function _beforeTransferTo(address _to, uint256 _amount) internal pure override {\n    _to; // Prevents unused var compiler and natspec complaints.\n    _amount; // Prevents unused var compiler and natspec complaints.\n  }\n}\n"
    },
    "contracts/JBERC20PaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './abstract/JBPayoutRedemptionPaymentTerminal.sol';\n\n/** \n  @notice \n  Manages the inflows and outflows of an ERC-20 token.\n\n  @dev\n  Adheres to -\n  IJBProjectPayer:  General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBPayoutRedemptionPaymentTerminal: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBERC20PaymentTerminal is JBPayoutRedemptionPaymentTerminal {\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _token The token that this terminal manages.\n    @param _currency The currency that this terminal's token adheres to for price feeds.\n    @param _baseWeightCurrency The currency to base token issuance on.\n    @param _payoutSplitsGroup The group that denotes payout splits from this terminal in the splits store.\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _splitsStore A contract that stores splits for each project.\n    @param _prices A contract that exposes price feeds.\n    @param _store A contract that stores the terminal's data.\n    @param _owner The address that will own this contract.\n  */\n  constructor(\n    IERC20Metadata _token,\n    uint256 _currency,\n    uint256 _baseWeightCurrency,\n    uint256 _payoutSplitsGroup,\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBSplitsStore _splitsStore,\n    IJBPrices _prices,\n    IJBSingleTokenPaymentTerminalStore _store,\n    address _owner\n  )\n    JBPayoutRedemptionPaymentTerminal(\n      address(_token),\n      _token.decimals(),\n      _currency,\n      _baseWeightCurrency,\n      _payoutSplitsGroup,\n      _operatorStore,\n      _projects,\n      _directory,\n      _splitsStore,\n      _prices,\n      _store,\n      _owner\n    )\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  //*********************************************************************//\n  // ---------------------- internal transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Transfers tokens.\n\n    @param _from The address from which the transfer should originate.\n    @param _to The address to which the transfer should go.\n    @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal.\n  */\n  function _transferFrom(\n    address _from,\n    address payable _to,\n    uint256 _amount\n  ) internal override {\n    _from == address(this)\n      ? IERC20(token).transfer(_to, _amount)\n      : IERC20(token).transferFrom(_from, _to, _amount);\n  }\n\n  /** \n    @notice\n    Logic to be triggered before transferring tokens from this terminal.\n\n    @param _to The address to which the transfer is going.\n    @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal.\n  */\n  function _beforeTransferTo(address _to, uint256 _amount) internal override {\n    IERC20(token).approve(_to, _amount);\n  }\n}\n"
    },
    "contracts/JBSingleTokenPaymentTerminalStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './interfaces/IJBController.sol';\nimport './interfaces/IJBSingleTokenPaymentTerminalStore.sol';\nimport './libraries/JBConstants.sol';\nimport './libraries/JBCurrencies.sol';\nimport './libraries/JBFixedPointNumber.sol';\nimport './libraries/JBFundingCycleMetadataResolver.sol';\n\n/**\n  @notice\n  Manages all bookkeeping for inflows and outflows of funds from any ISingleTokenPaymentTerminal.\n\n  @dev\n  Adheres to:\n  IJBSingleTokenPaymentTerminalStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  ReentrancyGuard: Contract module that helps prevent reentrant calls to a function.\n*/\ncontract JBSingleTokenPaymentTerminalStore is IJBSingleTokenPaymentTerminalStore, ReentrancyGuard {\n  // A library that parses the packed funding cycle metadata into a friendlier format.\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\n\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error CURRENCY_MISMATCH();\n  error DISTRIBUTION_AMOUNT_LIMIT_REACHED();\n  error FUNDING_CYCLE_PAYMENT_PAUSED();\n  error FUNDING_CYCLE_DISTRIBUTION_PAUSED();\n  error FUNDING_CYCLE_REDEEM_PAUSED();\n  error INADEQUATE_CONTROLLER_ALLOWANCE();\n  error INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\n  error INSUFFICIENT_TOKENS();\n  error INVALID_FUNDING_CYCLE();\n  error PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\n\n  //*********************************************************************//\n  // -------------------------- private constants ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Ensures a maximum number of decimal points of persisted fidelity on mulDiv operations of fixed point numbers. \n  */\n  uint256 private constant _MAX_FIXED_POINT_FIDELITY = 18;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  /**\n    @notice\n    The contract storing all funding cycle configurations.\n  */\n  IJBFundingCycleStore public immutable override fundingCycleStore;\n\n  /**\n    @notice\n    The contract that exposes price feeds.\n  */\n  IJBPrices public immutable override prices;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The amount of tokens that each project has for each terminal, in terms of the terminal's token.\n\n    @dev\n    The used distribution limit is represented as a fixed point number with the same amount of decimals as its relative terminal.\n\n    _terminal The terminal to which the balance applies.\n    _projectId The ID of the project to get the balance of.\n  */\n  mapping(IJBSingleTokenPaymentTerminal => mapping(uint256 => uint256)) public override balanceOf;\n\n  /**\n    @notice\n    The amount of funds that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the distribution limit's currency.\n\n    @dev\n    Increases as projects use their preconfigured distribution limits.\n\n    @dev\n    The used distribution limit is represented as a fixed point number with the same amount of decimals as its relative terminal.\n\n    _terminal The terminal to which the used distribution limit applies.\n    _projectId The ID of the project to get the used distribution limit of.\n    _fundingCycleNumber The number of the funding cycle during which the distribution limit was used.\n  */\n  mapping(IJBSingleTokenPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))\n    public\n    override usedDistributionLimitOf;\n\n  /**\n    @notice\n    The amount of funds that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the overflow allowance's currency.\n\n    @dev\n    Increases as projects use their allowance.\n\n    @dev\n    The used allowance is represented as a fixed point number with the same amount of decimals as its relative terminal.\n\n    _terminal The terminal to which the overflow allowance applies.\n    _projectId The ID of the project to get the used overflow allowance of.\n    _configuration The configuration of the during which the allowance was used.\n  */\n  mapping(IJBSingleTokenPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))\n    public\n    override usedOverflowAllowanceOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Gets the current overflowed amount in a terminal for a specified project.\n\n    @dev\n    The current overflow is represented as a fixed point number with the same amount of decimals as the specified terminal.\n\n    @param _terminal The terminal for which the overflow is being calculated.\n    @param _projectId The ID of the project to get overflow for.\n\n    @return The current amount of overflow that project has in the specified terminal.\n  */\n  function currentOverflowOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    // Return the overflow during the project's current funding cycle.\n    return\n      _overflowDuring(\n        _terminal,\n        _projectId,\n        fundingCycleStore.currentOf(_projectId),\n        _terminal.currency()\n      );\n  }\n\n  /**\n    @notice\n    Gets the current overflowed amount for a specified project across all terminals.\n\n    @param _projectId The ID of the project to get total overflow for.\n    @param _decimals The number of decimals that the fixed point overflow should include.\n    @param _currency The currency that the total overflow should be in terms of.\n\n    @return The current total amount of overflow that project has across all terminals.\n  */\n  function currentTotalOverflowOf(\n    uint256 _projectId,\n    uint256 _decimals,\n    uint256 _currency\n  ) external view override returns (uint256) {\n    return _currentTotalOverflowOf(_projectId, _decimals, _currency);\n  }\n\n  /**\n    @notice\n    The current amount of overflowed tokens from a terminal that can be reclaimed by the specified number of tokens, using the total token supply and overflow in the ecosystem.\n\n    @dev \n    If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\n\n    @dev\n    The current reclaimable overflow is returned in terms of the specified terminal's currency.\n\n    @dev\n    The reclaimable overflow is represented as a fixed point number with the same amount of decimals as the specified terminal.\n\n    @param _terminal The terminal from which the reclaimable amount would come.\n    @param _projectId The ID of the project to get the reclaimable overflow amount for.\n    @param _tokenCount The number of tokens to make the calculation with, as a fixed point number with 18 decimals.\n    @param _useTotalOverflow A flag indicating whether the overflow used in the calculation should be summed from all of the project's terminals. If false, overflow should be limited to the amount in the specified `_terminal`.\n\n    @return The amount of overflowed tokens that can be reclaimed, as a fixed point number with the same number of decimals as the provided `_terminal`.\n  */\n  function currentReclaimableOverflowOf(\n    IJBSingleTokenPaymentTerminal _terminal,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    bool _useTotalOverflow\n  ) external view override returns (uint256) {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Get the amount of current overflow.\n    // Use the project's total overflow across all of its terminals if the flag species specifies so. Otherwise, use the overflow local to the specified terminal.\n    uint256 _currentOverflow = _useTotalOverflow\n      ? _currentTotalOverflowOf(_projectId, _terminal.decimals(), _terminal.currency())\n      : _overflowDuring(_terminal, _projectId, _fundingCycle, _terminal.currency());\n\n    // If there's no overflow, there's no reclaimable overflow.\n    if (_currentOverflow == 0) return 0;\n\n    // Get the number of outstanding tokens the project has.\n    uint256 _totalSupply = IJBController(directory.controllerOf(_projectId))\n      .totalOutstandingTokensOf(_projectId, _fundingCycle.reservedRate());\n\n    // Can't redeem more tokens that is in the supply.\n    if (_tokenCount > _totalSupply) return 0;\n\n    // Return the reclaimable overflow amount.\n    return\n      _reclaimableOverflowDuring(\n        _projectId,\n        _fundingCycle,\n        _tokenCount,\n        _totalSupply,\n        _currentOverflow\n      );\n  }\n\n  /**\n    @notice\n    The current amount of overflowed tokens from a terminal that can be reclaimed by the specified number of tokens, using the specified total token supply and overflow amounts.\n\n    @dev \n    If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\n\n    @param _projectId The ID of the project to get the reclaimable overflow amount for.\n    @param _tokenCount The number of tokens to make the calculation with, as a fixed point number with 18 decimals.\n    @param _totalSupply The total number of tokens to make the calculation with, as a fixed point number with 18 decimals.\n    @param _overflow The amount of overflow to make the calculation with, as a fixed point number.\n\n    @return The amount of overflowed tokens that can be reclaimed, as a fixed point number with the same number of decimals as the provided `_overflow`.\n  */\n  function currentReclaimableOverflowOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    uint256 _totalSupply,\n    uint256 _overflow\n  ) external view override returns (uint256) {\n    // If there's no overflow, there's no reclaimable overflow.\n    if (_overflow == 0) return 0;\n\n    // Can't redeem more tokens that is in the supply.\n    if (_tokenCount > _totalSupply) return 0;\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Return the reclaimable overflow amount.\n    return\n      _reclaimableOverflowDuring(_projectId, _fundingCycle, _tokenCount, _totalSupply, _overflow);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\n    @param _prices A contract that exposes price feeds.\n  */\n  constructor(\n    IJBDirectory _directory,\n    IJBFundingCycleStore _fundingCycleStore,\n    IJBPrices _prices\n  ) {\n    directory = _directory;\n    fundingCycleStore = _fundingCycleStore;\n    prices = _prices;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Records newly contributed tokens to a project.\n\n    @dev\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\n\n    @dev\n    The msg.sender must be an IJBSingleTokenPaymentTerminal. The amount specified in the params is in terms of the msg.sender's tokens.\n\n    @param _payer The original address that sent the payment to the terminal.\n    @param _amount The amount of tokens being paid. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\n    @param _projectId The ID of the project being paid.\n    @param _baseWeightCurrency The currency to base token issuance on.\n    @param _beneficiary The specified address that should be the beneficiary of anything that results from the payment.\n    @param _memo A memo to pass along to the emitted event, and passed along to the funding cycle's data source.\n    @param _metadata Bytes to send along to the data source, if one is provided.\n\n    @return fundingCycle The project's funding cycle during which payment was made.\n    @return tokenCount The number of project tokens that were minted, as a fixed point number with 18 decimals.\n    @return delegate A delegate contract to use for subsequent calls.\n    @return memo A memo that should be passed along to the emitted event.\n  */\n  function recordPaymentFrom(\n    address _payer,\n    JBTokenAmount calldata _amount,\n    uint256 _projectId,\n    uint256 _baseWeightCurrency,\n    address _beneficiary,\n    string calldata _memo,\n    bytes memory _metadata\n  )\n    external\n    override\n    nonReentrant\n    returns (\n      JBFundingCycle memory fundingCycle,\n      uint256 tokenCount,\n      IJBPayDelegate delegate,\n      string memory memo\n    )\n  {\n    // Get a reference to the current funding cycle for the project.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The project must have a funding cycle configured.\n    if (fundingCycle.number == 0) revert INVALID_FUNDING_CYCLE();\n\n    // Must not be paused.\n    if (fundingCycle.payPaused()) revert FUNDING_CYCLE_PAYMENT_PAUSED();\n\n    // The weight according to which new token supply is to be minted, as a fixed point number with 18 decimals.\n    uint256 _weight;\n\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\n    if (fundingCycle.useDataSourceForPay()) {\n      // Create the params that'll be sent to the data source.\n      JBPayParamsData memory _data = JBPayParamsData(\n        IJBSingleTokenPaymentTerminal(msg.sender),\n        _payer,\n        _amount,\n        _projectId,\n        fundingCycle.configuration,\n        _beneficiary,\n        fundingCycle.weight,\n        fundingCycle.reservedRate(),\n        _memo,\n        _metadata\n      );\n      (_weight, memo, delegate) = IJBFundingCycleDataSource(fundingCycle.dataSource()).payParams(\n        _data\n      );\n    }\n    // Otherwise use the funding cycle's weight\n    else {\n      _weight = fundingCycle.weight;\n      memo = _memo;\n    }\n\n    // If there's no amount being recorded, there's nothing left to do.\n    if (_amount.value == 0) return (fundingCycle, 0, delegate, memo);\n\n    // Add the amount to the token balance of the project.\n    balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n      balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] +\n      _amount.value;\n\n    // If there's no weight, token count must be 0 so there's nothing left to do.\n    if (_weight == 0) return (fundingCycle, 0, delegate, memo);\n\n    // Get a reference to the number of decimals in the amount. (prevents stack too deep).\n    uint256 _decimals = _amount.decimals;\n\n    // If the terminal should base its weight on a different currency from the terminal's currency, determine the factor.\n    // The weight is always a fixed point mumber with 18 decimals. To ensure this, the ratio should use the same number of decimals as the `_amount`.\n    uint256 _weightRatio = _amount.currency == _baseWeightCurrency\n      ? 10**_decimals\n      : prices.priceFor(_amount.currency, _baseWeightCurrency, _decimals);\n\n    // Find the number of tokens to mint, as a fixed point number with as many decimals as `weight` has.\n    tokenCount = PRBMath.mulDiv(_amount.value, _weight, _weightRatio);\n  }\n\n  /**\n    @notice\n    Records newly redeemed tokens of a project.\n\n    @dev\n    Redeems the project's tokens according to values provided by a configured data source. If no data source is configured, redeems tokens along a redemption bonding curve that is a function of the number of tokens being burned.\n\n    @dev\n    The msg.sender must be an IJBSingleTokenPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\n\n    @param _holder The account that is having its tokens redeemed.\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\n    @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Bytes to send along to the data source, if one is provided.\n\n    @return fundingCycle The funding cycle during which the redemption was made.\n    @return reclaimAmount The amount of terminal tokens reclaimed, as a fixed point number with 18 decimals.\n    @return delegate A delegate contract to use for subsequent calls.\n    @return memo A memo that should be passed along to the emitted event.\n  */\n  function recordRedemptionFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string memory _memo,\n    bytes memory _metadata\n  )\n    external\n    override\n    nonReentrant\n    returns (\n      JBFundingCycle memory fundingCycle,\n      uint256 reclaimAmount,\n      IJBRedemptionDelegate delegate,\n      string memory memo\n    )\n  {\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The current funding cycle must not be paused.\n    if (fundingCycle.redeemPaused()) revert FUNDING_CYCLE_REDEEM_PAUSED();\n\n    // Scoped section prevents stack too deep. `_reclaimedTokenAmount`, `_currentOverflow`, and `_totalSupply` only used within scope.\n    {\n      // Get a reference to the reclaimed token amount struct, the current overflow, and the total token supply.\n      JBTokenAmount memory _reclaimedTokenAmount;\n      uint256 _currentOverflow;\n      uint256 _totalSupply;\n\n      // Another scoped section prevents stack too deep. `_token`, `_decimals`, and `_currency` only used within scope.\n      {\n        // Get a reference to the terminal's tokens.\n        address _token = IJBSingleTokenPaymentTerminal(msg.sender).token();\n\n        // Get a reference to the terminal's decimals.\n        uint256 _decimals = IJBSingleTokenPaymentTerminal(msg.sender).decimals();\n\n        // Get areference to the terminal's currency.\n        uint256 _currency = IJBSingleTokenPaymentTerminal(msg.sender).currency();\n\n        // Get the amount of current overflow.\n        // Use the local overflow if the funding cycle specifies that it should be used. Otherwise, use the project's total overflow across all of its terminals.\n        _currentOverflow = fundingCycle.useTotalOverflowForRedemptions()\n          ? _currentTotalOverflowOf(_projectId, _decimals, _currency)\n          : _overflowDuring(\n            IJBSingleTokenPaymentTerminal(msg.sender),\n            _projectId,\n            fundingCycle,\n            _currency\n          );\n\n        // Get the number of outstanding tokens the project has.\n        _totalSupply = IJBController(directory.controllerOf(_projectId)).totalOutstandingTokensOf(\n          _projectId,\n          fundingCycle.reservedRate()\n        );\n\n        // Can't redeem more tokens that is in the supply.\n        if (_tokenCount > _totalSupply) revert INSUFFICIENT_TOKENS();\n\n        if (_currentOverflow > 0)\n          // Calculate reclaim amount using the current overflow amount.\n          reclaimAmount = _reclaimableOverflowDuring(\n            _projectId,\n            fundingCycle,\n            _tokenCount,\n            _totalSupply,\n            _currentOverflow\n          );\n\n        _reclaimedTokenAmount = JBTokenAmount(_token, reclaimAmount, _decimals, _currency);\n      }\n\n      // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\n      if (fundingCycle.useDataSourceForRedeem()) {\n        // Create the params that'll be sent to the data source.\n        JBRedeemParamsData memory _data = JBRedeemParamsData(\n          IJBSingleTokenPaymentTerminal(msg.sender),\n          _holder,\n          _projectId,\n          fundingCycle.configuration,\n          _tokenCount,\n          _totalSupply,\n          _currentOverflow,\n          _reclaimedTokenAmount,\n          fundingCycle.useTotalOverflowForRedemptions(),\n          fundingCycle.redemptionRate(),\n          fundingCycle.ballotRedemptionRate(),\n          _memo,\n          _metadata\n        );\n        (reclaimAmount, memo, delegate) = IJBFundingCycleDataSource(fundingCycle.dataSource())\n          .redeemParams(_data);\n      } else {\n        memo = _memo;\n      }\n    }\n\n    // The amount being reclaimed must be within the project's balance.\n    if (reclaimAmount > balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId])\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\n\n    // Remove the reclaimed funds from the project's balance.\n    if (reclaimAmount > 0)\n      balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n        balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] -\n        reclaimAmount;\n  }\n\n  /**\n    @notice\n    Records newly distributed funds for a project.\n\n    @dev\n    The msg.sender must be an IJBSingleTokenPaymentTerminal. \n\n    @param _projectId The ID of the project that is having funds distributed.\n    @param _amount The amount to use from the distribution limit, as a fixed point number.\n    @param _currency The currency of the `_amount`. This must match the project's current funding cycle's currency.\n\n    @return fundingCycle The funding cycle during which the distribution was made.\n    @return distributedAmount The amount of terminal tokens distributed, as a fixed point number with the same amount of decimals as its relative terminal.\n  */\n  function recordDistributionFor(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency\n  )\n    external\n    override\n    nonReentrant\n    returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount)\n  {\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The funding cycle must not be configured to have distributions paused.\n    if (fundingCycle.distributionsPaused()) revert FUNDING_CYCLE_DISTRIBUTION_PAUSED();\n\n    // The new total amount that has been distributed during this funding cycle.\n    uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[\n      IJBSingleTokenPaymentTerminal(msg.sender)\n    ][_projectId][fundingCycle.number] + _amount;\n\n    // Amount must be within what is still distributable.\n    (uint256 _distributionLimitOf, uint256 _distributionLimitCurrencyOf) = IJBController(\n      directory.controllerOf(_projectId)\n    ).distributionLimitOf(\n        _projectId,\n        fundingCycle.configuration,\n        IJBSingleTokenPaymentTerminal(msg.sender),\n        IJBSingleTokenPaymentTerminal(msg.sender).token()\n      );\n\n    // Make sure the new used amount is within the distribution limit.\n    if (_newUsedDistributionLimitOf > _distributionLimitOf || _distributionLimitOf == 0)\n      revert DISTRIBUTION_AMOUNT_LIMIT_REACHED();\n\n    // Make sure the currencies match.\n    if (_currency != _distributionLimitCurrencyOf) revert CURRENCY_MISMATCH();\n\n    // Get a reference to the terminal's currency.\n    uint256 _balanceCurrency = IJBSingleTokenPaymentTerminal(msg.sender).currency();\n\n    // Convert the amount to the balance's currency.\n    distributedAmount = (_currency == _balanceCurrency)\n      ? _amount\n      : PRBMath.mulDiv(\n        _amount,\n        10**_MAX_FIXED_POINT_FIDELITY, // Use _MAX_FIXED_POINT_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\n        prices.priceFor(_currency, _balanceCurrency, _MAX_FIXED_POINT_FIDELITY)\n      );\n\n    // The amount being distributed must be available.\n    if (distributedAmount > balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId])\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\n\n    // Store the new amount.\n    usedDistributionLimitOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId][\n      fundingCycle.number\n    ] = _newUsedDistributionLimitOf;\n\n    // Removed the distributed funds from the project's token balance.\n    balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n      balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] -\n      distributedAmount;\n  }\n\n  /**\n    @notice\n    Records newly used allowance funds of a project.\n\n    @dev\n    The msg.sender must be an IJBSingleTokenPaymentTerminal. \n\n    @param _projectId The ID of the project to use the allowance of.\n    @param _amount The amount to use from the allowance, as a fixed point number. \n    @param _currency The currency of the `_amount`. Must match the currency of the overflow allowance.\n\n    @return fundingCycle The funding cycle during which the overflow allowance is being used.\n    @return usedAmount The amount of terminal tokens used, as a fixed point number with the same amount of decimals as its relative terminal.\n  */\n  function recordUsedAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency\n  )\n    external\n    override\n    nonReentrant\n    returns (JBFundingCycle memory fundingCycle, uint256 usedAmount)\n  {\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Get a reference to the new used overflow allowance for this funding cycle configuration.\n    uint256 _newUsedOverflowAllowanceOf = usedOverflowAllowanceOf[\n      IJBSingleTokenPaymentTerminal(msg.sender)\n    ][_projectId][fundingCycle.configuration] + _amount;\n\n    // There must be sufficient allowance available.\n    (uint256 _overflowAllowanceOf, uint256 _overflowAllowanceCurrency) = IJBController(\n      directory.controllerOf(_projectId)\n    ).overflowAllowanceOf(\n        _projectId,\n        fundingCycle.configuration,\n        IJBSingleTokenPaymentTerminal(msg.sender),\n        IJBSingleTokenPaymentTerminal(msg.sender).token()\n      );\n\n    // Make sure the new used amount is within the allowance.\n    if (_newUsedOverflowAllowanceOf > _overflowAllowanceOf || _overflowAllowanceOf == 0)\n      revert INADEQUATE_CONTROLLER_ALLOWANCE();\n\n    // Make sure the currencies match.\n    if (_currency != _overflowAllowanceCurrency) revert CURRENCY_MISMATCH();\n\n    // Get a reference to the terminal's currency.\n    uint256 _balanceCurrency = IJBSingleTokenPaymentTerminal(msg.sender).currency();\n\n    // Convert the amount to this store's terminal's token.\n    usedAmount = (_currency == _balanceCurrency)\n      ? _amount\n      : PRBMath.mulDiv(\n        _amount,\n        10**_MAX_FIXED_POINT_FIDELITY, // Use _MAX_FIXED_POINT_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\n        prices.priceFor(_currency, _balanceCurrency, _MAX_FIXED_POINT_FIDELITY)\n      );\n\n    // The amount being distributed must be available in the overflow.\n    if (\n      usedAmount >\n      _overflowDuring(\n        IJBSingleTokenPaymentTerminal(msg.sender),\n        _projectId,\n        fundingCycle,\n        _balanceCurrency\n      )\n    ) revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\n\n    // Store the incremented value.\n    usedOverflowAllowanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId][\n      fundingCycle.configuration\n    ] = _newUsedOverflowAllowanceOf;\n\n    // Update the project's balance.\n    balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n      balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] -\n      usedAmount;\n  }\n\n  /**\n    @notice\n    Records newly added funds for the project.\n\n    @dev\n    The msg.sender must be an IJBSingleTokenPaymentTerminal. \n\n    @param _projectId The ID of the project to which the funds being added belong.\n    @param _amount The amount of terminal tokens added, as a fixed point number with the same amount of decimals as its relative terminal.\n  */\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount) external override {\n    // Increment the balance.\n    balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n      balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] +\n      _amount;\n  }\n\n  /**\n    @notice\n    Records the migration of funds from this store.\n\n    @dev\n    The msg.sender must be an IJBSingleTokenPaymentTerminal. The amount returned is in terms of the msg.senders tokens.\n\n    @param _projectId The ID of the project being migrated.\n\n    @return balance The project's migrated balance, as a fixed point number with the same amount of decimals as its relative terminal.\n  */\n  function recordMigration(uint256 _projectId)\n    external\n    override\n    nonReentrant\n    returns (uint256 balance)\n  {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Migration must be allowed.\n    if (!_fundingCycle.terminalMigrationAllowed()) revert PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\n\n    // Return the current balance.\n    balance = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId];\n\n    // Set the balance to 0.\n    balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = 0;\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The amount of overflowed tokens from a terminal that can be reclaimed by the specified number of tokens when measured from the specified.\n\n    @dev \n    If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\n\n    @param _projectId The ID of the project to get the reclaimable overflow amount for.\n    @param _fundingCycle The funding cycle during which reclaimable overflow is being calculated.\n    @param _tokenCount The number of tokens to make the calculation with, as a fixed point number with 18 decimals.\n    @param _totalSupply The total supply of tokens to make the calculation with, as a fixed point number with 18 decimals.\n    @param _overflow The amount of overflow to make the calculation with.\n\n    @return The amount of overflowed tokens that can be reclaimed.\n  */\n  function _reclaimableOverflowDuring(\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _tokenCount,\n    uint256 _totalSupply,\n    uint256 _overflow\n  ) private view returns (uint256) {\n    // If the amount being redeemed is the total supply, return the rest of the overflow.\n    if (_tokenCount == _totalSupply) return _overflow;\n\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) ==\n      JBBallotState.Active\n      ? _fundingCycle.ballotRedemptionRate()\n      : _fundingCycle.redemptionRate();\n\n    // If the redemption rate is 0, nothing is claimable.\n    if (_redemptionRate == 0) return 0;\n\n    // Get a reference to the linear proportion.\n    uint256 _base = PRBMath.mulDiv(_overflow, _tokenCount, _totalSupply);\n\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\n    if (_redemptionRate == JBConstants.MAX_REDEMPTION_RATE) return _base;\n\n    return\n      PRBMath.mulDiv(\n        _base,\n        _redemptionRate +\n          PRBMath.mulDiv(\n            _tokenCount,\n            JBConstants.MAX_REDEMPTION_RATE - _redemptionRate,\n            _totalSupply\n          ),\n        JBConstants.MAX_REDEMPTION_RATE\n      );\n  }\n\n  /**\n    @notice\n    Gets the amount that is overflowing when measured from the specified funding cycle.\n\n    @dev\n    This amount changes as the value of the balance changes in relation to the currency being used to measure the distribution limit.\n\n    @param _terminal The terminal for which the overflow is being calculated.\n    @param _projectId The ID of the project to get overflow for.\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\n    @param _balanceCurrency The currency that the stored balance is expected to be in terms of.\n\n    @return overflow The overflow of funds, as a fixed point number with 18 decimals.\n  */\n  function _overflowDuring(\n    IJBSingleTokenPaymentTerminal _terminal,\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _balanceCurrency\n  ) private view returns (uint256) {\n    // Get the current balance of the project.\n    uint256 _balanceOf = balanceOf[_terminal][_projectId];\n\n    // If there's no balance, there's no overflow.\n    if (_balanceOf == 0) return 0;\n\n    // Get a reference to the distribution limit during the funding cycle.\n    (uint256 _distributionLimit, uint256 _distributionLimitCurrency) = IJBController(\n      directory.controllerOf(_projectId)\n    ).distributionLimitOf(_projectId, _fundingCycle.configuration, _terminal, _terminal.token());\n\n    // Get a reference to the amount still distributable during the funding cycle.\n    uint256 _distributionLimitRemaining = _distributionLimit -\n      usedDistributionLimitOf[_terminal][_projectId][_fundingCycle.number];\n\n    // Convert the _distributionRemaining to be in terms of the provided currency.\n    if (_distributionLimitRemaining != 0 && _distributionLimitCurrency != _balanceCurrency)\n      _distributionLimitRemaining = PRBMath.mulDiv(\n        _distributionLimitRemaining,\n        10**_MAX_FIXED_POINT_FIDELITY, // Use _MAX_FIXED_POINT_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\n        prices.priceFor(_distributionLimitCurrency, _balanceCurrency, _MAX_FIXED_POINT_FIDELITY)\n      );\n\n    // Overflow is the balance of this project minus the amount that can still be distributed.\n    return _balanceOf > _distributionLimitRemaining ? _balanceOf - _distributionLimitRemaining : 0;\n  }\n\n  /**\n    @notice\n    Gets the amount that is currently overflowing across all of a project's terminals. \n\n    @dev\n    This amount changes as the value of the balances changes in relation to the currency being used to measure the project's distribution limits.\n\n    @param _projectId The ID of the project to get the total overflow for.\n    @param _decimals The number of decimals that the fixed point overflow should include.\n    @param _currency The currency that the overflow should be in terms of.\n\n    @return overflow The total overflow of a project's funds.\n  */\n  function _currentTotalOverflowOf(\n    uint256 _projectId,\n    uint256 _decimals,\n    uint256 _currency\n  ) private view returns (uint256) {\n    // Get a reference to the project's terminals.\n    IJBPaymentTerminal[] memory _terminals = directory.terminalsOf(_projectId);\n\n    // Keep a reference to the ETH overflow across all terminals, as a fixed point number with 18 decimals.\n    uint256 _ethOverflow;\n\n    // Add the current ETH overflow for each terminal.\n    for (uint256 _i = 0; _i < _terminals.length; _i++)\n      _ethOverflow = _ethOverflow + _terminals[_i].currentEthOverflowOf(_projectId);\n\n    // Convert the ETH overflow to the specified currency if needed, maintaining a fixed point number with 18 decimals.\n    uint256 _totalOverflow18Decimal = _currency == JBCurrencies.GAS_CURRENCY\n      ? _ethOverflow\n      : PRBMath.mulDiv(_ethOverflow, 10**18, prices.priceFor(JBCurrencies.GAS_CURRENCY, _currency, 18));\n\n    // Adjust the decimals of the fixed point number if needed to match the target decimals.\n    return\n      (_decimals == 18)\n        ? _totalOverflow18Decimal\n        : JBFixedPointNumber.adjustDecimals(_totalOverflow18Decimal, 18, _decimals);\n  }\n}\n"
    },
    "contracts/JBFundingCycleStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './abstract/JBControllerUtility.sol';\nimport './libraries/JBConstants.sol';\n\n/** \n  @notice \n  Manages funding cycle configurations and scheduling.\n\n  @dev\n  Adheres to -\n  IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated.\n*/\ncontract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error INVALID_DISCOUNT_RATE();\n  error INVALID_DURATION();\n  error INVALID_WEIGHT();\n  error INVALID_BALLOT();\n  error NO_SAME_BLOCK_RECONFIGURATION();\n\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Stores the user defined properties of each funding cycle, packed into one storage slot.\n\n    _projectId The ID of the project to get properties of.\n    _configuration The funding cycle configuration to get properties of.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) private _packedUserPropertiesOf;\n\n  /** \n    @notice\n    Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot.\n    \n    _projectId The ID of the project to get instrinsic properties of.\n    _configuration The funding cycle configuration to get properties of.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) private _packedIntrinsicPropertiesOf;\n\n  /** \n    @notice\n    Stores the metadata for each funding cycle configuration, packed into one storage slot.\n\n    _projectId The ID of the project to get metadata of.\n    _configuration The funding cycle configuration to get metadata of.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) private _metadataOf;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The latest funding cycle configuration for each project.\n\n    _projectId The ID of the project to get the latest funding cycle configuration of.\n  */\n  mapping(uint256 => uint256) public override latestConfigurationOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Get the funding cycle with the given configuration for the specified project.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _configuration The configuration of the funding cycle to get.\n\n    @return fundingCycle The funding cycle.\n  */\n  function get(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    return _getStructFor(_projectId, _configuration);\n  }\n\n  /**\n    @notice \n    The latest funding cycle to be configured for the specified project, and its current ballot state.\n\n    @param _projectId The ID of the project to get the latest configured funding cycle of.\n\n    @return fundingCycle The project's queued funding cycle.\n    @return ballotState The state of the ballot for the reconfiguration.\n  */\n  function latestConfiguredOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState)\n  {\n    // Get a reference to the latest funding cycle configuration.\n    uint256 _fundingCycleConfiguration = latestConfigurationOf[_projectId];\n\n    // Resolve the funding cycle for the latest configuration.\n    fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n    // Resolve the ballot state.\n    ballotState = _ballotStateOf(\n      _projectId,\n      fundingCycle.configuration,\n      fundingCycle.start,\n      fundingCycle.basedOn\n    );\n  }\n\n  /**\n    @notice \n    The funding cycle that's next up for the specified project.\n\n    @dev\n    If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.\n\n    @param _projectId The ID of the project to get the queued funding cycle of.\n\n    @return fundingCycle The project's queued funding cycle.\n  */\n  function queuedOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    // If the project does not have a funding cycle, return an empty struct.\n    if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0);\n\n    // Get a reference to the configuration of the standby funding cycle.\n    uint256 _standbyFundingCycleConfiguration = _standbyOf(_projectId);\n\n    // If it exists, return its funding cycle if it is approved.\n    if (_standbyFundingCycleConfiguration > 0) {\n      fundingCycle = _getStructFor(_projectId, _standbyFundingCycleConfiguration);\n\n      if (_isApproved(_projectId, fundingCycle)) return fundingCycle;\n\n      // Resolve the funding cycle for the latest configured funding cycle.\n      fundingCycle = _getStructFor(_projectId, fundingCycle.basedOn);\n    } else {\n      // Resolve the funding cycle for the latest configured funding cycle.\n      fundingCycle = _getStructFor(_projectId, latestConfigurationOf[_projectId]);\n\n      // If the latest funding cycle starts in the future, it must start in the distant future\n      // since its not in standby. In this case base the queued cycles on the base cycle.\n      if (fundingCycle.start > block.timestamp)\n        fundingCycle = _getStructFor(_projectId, fundingCycle.basedOn);\n    }\n\n    // There's no queued if the current has a duration of 0.\n    if (fundingCycle.duration == 0) return _getStructFor(0, 0);\n\n    // Check to see if this funding cycle's ballot is approved.\n    // If so, return a funding cycle based on it.\n    if (_isApproved(_projectId, fundingCycle)) return _mockFundingCycleBasedOn(fundingCycle, false);\n\n    // Get the funding cycle of its base funding cycle, which carries the last approved configuration.\n    fundingCycle = _getStructFor(_projectId, fundingCycle.basedOn);\n\n    // There's no queued if the base, which must still be the current, has a duration of 0.\n    if (fundingCycle.duration == 0) return _getStructFor(0, 0);\n\n    // Return a mock of the next up funding cycle.\n    return _mockFundingCycleBasedOn(fundingCycle, false);\n  }\n\n  /**\n    @notice \n    The funding cycle that is currently active for the specified project.\n\n    @dev\n    If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.\n\n    @param _projectId The ID of the project to get the current funding cycle of.\n\n    @return fundingCycle The project's current funding cycle.\n  */\n  function currentOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    // If the project does not have a funding cycle, return an empty struct.\n    if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0);\n\n    // Get a reference to the configuration of the eligible funding cycle.\n    uint256 _fundingCycleConfiguration = _eligibleOf(_projectId);\n\n    // Keep a reference to the eligible funding cycle.\n    JBFundingCycle memory _fundingCycle;\n\n    // If an eligible funding cycle exists...\n    if (_fundingCycleConfiguration > 0) {\n      // Resolve the funding cycle for the eligible configuration.\n      _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n      // Check to see if this funding cycle's ballot is approved.\n      // If so, return it.\n      if (_isApproved(_projectId, _fundingCycle)) return _fundingCycle;\n\n      // If it hasn't been approved, set the funding cycle configuration to be the configuration of the funding cycle that it's based on,\n      // which carries the last approved configuration.\n      _fundingCycleConfiguration = _fundingCycle.basedOn;\n    } else {\n      // No upcoming funding cycle found that is eligible to become active,\n      // so use the last configuration.\n      _fundingCycleConfiguration = latestConfigurationOf[_projectId];\n\n      // Get the funding cycle for the latest ID.\n      _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n      // If it's not approved or if it hasn't yet started, get a reference to the funding cycle that the latest is based on, which has the latest approved configuration.\n      if (!_isApproved(_projectId, _fundingCycle) || block.timestamp < _fundingCycle.start)\n        _fundingCycleConfiguration = _fundingCycle.basedOn;\n    }\n\n    // If there is not funding cycle to base the current one on, there can't be a current one.\n    if (_fundingCycleConfiguration == 0) return _getStructFor(0, 0);\n\n    // The funding cycle to base a current one on.\n    _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n    // If the base has no duration, it's still the current one.\n    if (_fundingCycle.duration == 0) return _fundingCycle;\n\n    // Return a mock of the current funding cycle.\n    return _mockFundingCycleBasedOn(_fundingCycle, true);\n  }\n\n  /** \n    @notice \n    The current ballot state of the project.\n\n    @param _projectId The ID of the project to check the ballot state of.\n\n    @return The project's current ballot's state.\n  */\n  function currentBallotStateOf(uint256 _projectId) external view override returns (JBBallotState) {\n    // Get a reference to the latest funding cycle configuration.\n    uint256 _fundingCycleConfiguration = latestConfigurationOf[_projectId];\n\n    // Resolve the funding cycle for the latest configuration.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n    return\n      _ballotStateOf(\n        _projectId,\n        _fundingCycle.configuration,\n        _fundingCycle.start,\n        _fundingCycle.basedOn\n      );\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  // solhint-disable-next-line no-empty-blocks\n  constructor(IJBDirectory _directory) JBControllerUtility(_directory) {}\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Configures the next eligible funding cycle for the specified project.\n\n    @dev\n    Only a project's current controller can configure its funding cycles.\n\n    @param _projectId The ID of the project being configured.\n    @param _data The funding cycle configuration data.\n    @param _metadata Arbitrary extra data to associate with this funding cycle configuration that's not used within.\n    @param _mustStartAtOrAfter The time before which the initialized funding cycle cannot start.\n\n    @return The funding cycle that the configuration will take effect during.\n  */\n  function configureFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    uint256 _metadata,\n    uint256 _mustStartAtOrAfter\n  ) external override onlyController(_projectId) returns (JBFundingCycle memory) {\n    // Duration must fit in a uint64.\n    if (_data.duration > type(uint64).max) revert INVALID_DURATION();\n\n    // Discount rate must be less than or equal to 100%.\n    if (_data.discountRate > JBConstants.MAX_DISCOUNT_RATE) revert INVALID_DISCOUNT_RATE();\n\n    // Weight must fit into a uint88.\n    if (_data.weight > type(uint88).max) revert INVALID_WEIGHT();\n\n    // Ballot should be a valid contract, supporting the correct interface\n    if(_data.ballot != IJBFundingCycleBallot(address(0))) {\n\n      address _ballot = address(_data.ballot);\n      uint32 _size;\n      assembly {\n        _size := extcodesize(_ballot) // No contract at the address ?\n      }\n      if (_size == 0) revert INVALID_BALLOT();\n\n      try _data.ballot.supportsInterface(type(IJBFundingCycleBallot).interfaceId) returns (bool _supports) {\n        if(!_supports) revert INVALID_BALLOT(); // Contract exists at the address but with the wrong interface\n      } catch {\n        revert INVALID_BALLOT(); // No ERC165 support\n      }\n    }\n\n    // The configuration timestamp is now.\n    uint256 _configuration = block.timestamp;\n\n    // Set up a reconfiguration by configuring intrinsic properties.\n    _configureIntrinsicPropertiesFor(\n      _projectId,\n      _configuration,\n      _data.weight,\n      // Must start on or after the current timestamp.\n      _mustStartAtOrAfter > block.timestamp ? _mustStartAtOrAfter : block.timestamp\n    );\n\n    // Efficiently stores a funding cycles provided user defined properties.\n    // If all user config properties are zero, no need to store anything as the default value will have the same outcome.\n    if (\n      _data.ballot != IJBFundingCycleBallot(address(0)) ||\n      _data.duration > 0 ||\n      _data.discountRate > 0\n    ) {\n      // ballot in bits 0-159 bytes.\n      uint256 packed = uint160(address(_data.ballot));\n\n      // duration in bits 160-223 bytes.\n      packed |= _data.duration << 160;\n\n      // discountRate in bits 224-255 bytes.\n      packed |= _data.discountRate << 224;\n\n      // Set in storage.\n      _packedUserPropertiesOf[_projectId][_configuration] = packed;\n    }\n\n    // Set the metadata if needed.\n    if (_metadata > 0) _metadataOf[_projectId][_configuration] = _metadata;\n\n    emit Configure(_configuration, _projectId, _data, _metadata, _mustStartAtOrAfter, msg.sender);\n\n    // Return the funding cycle for the new configuration.\n    return _getStructFor(_projectId, _configuration);\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Updates the configurable funding cycle for this project if it exists, otherwise creates one.\n\n    @param _projectId The ID of the project to find a configurable funding cycle for.\n    @param _configuration The time at which the funding cycle was configured.\n    @param _weight The weight to store in the configured funding cycle.\n    @param _mustStartAtOrAfter The time before which the initialized funding cycle can't start.\n  */\n  function _configureIntrinsicPropertiesFor(\n    uint256 _projectId,\n    uint256 _configuration,\n    uint256 _weight,\n    uint256 _mustStartAtOrAfter\n  ) private {\n    // If there's not yet a funding cycle for the project, initialize one.\n    if (latestConfigurationOf[_projectId] == 0)\n      // Use an empty funding cycle as the base.\n      return\n        _initFor(_projectId, _getStructFor(0, 0), _configuration, _mustStartAtOrAfter, _weight);\n\n    // Get the active funding cycle's configuration.\n    uint256 _currentConfiguration = _eligibleOf(_projectId);\n\n    // If an eligible funding cycle does not exist, get a reference to the latest funding cycle configuration for the project.\n    if (_currentConfiguration == 0)\n      // Get the latest funding cycle's configuration.\n      _currentConfiguration = latestConfigurationOf[_projectId];\n\n    // Get a reference to the funding cycle.\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _currentConfiguration);\n\n    if (!_isApproved(_projectId, _baseFundingCycle) || block.timestamp < _baseFundingCycle.start)\n      // If it hasn't been approved or hasn't yet started, set the ID to be the funding cycle it's based on,\n      // which carries the latest approved configuration.\n      _baseFundingCycle = _getStructFor(_projectId, _baseFundingCycle.basedOn);\n\n    // The configuration can't be the same as the base configuration.\n    if (_baseFundingCycle.configuration == _configuration) revert NO_SAME_BLOCK_RECONFIGURATION();\n\n    // The time after the ballot of the provided funding cycle has expired.\n    // If the provided funding cycle has no ballot, return the current timestamp.\n    uint256 _timestampAfterBallot = _baseFundingCycle.ballot == IJBFundingCycleBallot(address(0))\n      ? 0\n      : _configuration + _baseFundingCycle.ballot.duration();\n\n    _initFor(\n      _projectId,\n      _baseFundingCycle,\n      _configuration,\n      // Can only start after the ballot.\n      _timestampAfterBallot > _mustStartAtOrAfter ? _timestampAfterBallot : _mustStartAtOrAfter,\n      _weight\n    );\n  }\n\n  /**\n    @notice \n    Initializes a funding cycle with the specified properties.\n\n    @param _projectId The ID of the project to which the funding cycle being initialized belongs.\n    @param _baseFundingCycle The funding cycle to base the initialized one on.\n    @param _configuration The configuration of the funding cycle being initialized.\n    @param _mustStartAtOrAfter The time before which the initialized funding cycle cannot start.\n    @param _weight The weight to give the newly initialized funding cycle.\n  */\n  function _initFor(\n    uint256 _projectId,\n    JBFundingCycle memory _baseFundingCycle,\n    uint256 _configuration,\n    uint256 _mustStartAtOrAfter,\n    uint256 _weight\n  ) private {\n    // If there is no base, initialize a first cycle.\n    if (_baseFundingCycle.number == 0) {\n      // The first number is 1.\n      uint256 _number = 1;\n\n      // Set fresh intrinsic properties.\n      _packAndStoreIntrinsicPropertiesOf(\n        _configuration,\n        _projectId,\n        _number,\n        _weight,\n        _baseFundingCycle.configuration,\n        _mustStartAtOrAfter\n      );\n    } else {\n      // Derive the correct next start time from the base.\n      uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartAtOrAfter);\n\n      // A weight of 1 is treated as a weight of 0.\n      // This is to allow a weight of 0 (default) to represent inheriting the discounted weight of the previous funding cycle.\n      _weight = _weight > 0\n        ? (_weight == 1 ? 0 : _weight)\n        : _deriveWeightFrom(_baseFundingCycle, _start);\n\n      // Derive the correct number.\n      uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\n\n      // Update the intrinsic properties.\n      _packAndStoreIntrinsicPropertiesOf(\n        _configuration,\n        _projectId,\n        _number,\n        _weight,\n        _baseFundingCycle.configuration,\n        _start\n      );\n    }\n\n    // Set the project's latest funding cycle configuration.\n    latestConfigurationOf[_projectId] = _configuration;\n\n    emit Init(_configuration, _projectId, _baseFundingCycle.configuration);\n  }\n\n  /**\n    @notice \n    Efficiently stores a funding cycle's provided intrinsic properties.\n\n    @param _configuration The configuration of the funding cycle to pack and store.\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _number The number of the funding cycle.\n    @param _weight The weight of the funding cycle.\n    @param _basedOn The configuration of the base funding cycle.\n    @param _start The start time of this funding cycle.\n  */\n  function _packAndStoreIntrinsicPropertiesOf(\n    uint256 _configuration,\n    uint256 _projectId,\n    uint256 _number,\n    uint256 _weight,\n    uint256 _basedOn,\n    uint256 _start\n  ) private {\n    // weight in bits 0-87.\n    uint256 packed = _weight;\n\n    // basedOn in bits 88-143.\n    packed |= _basedOn << 88;\n\n    // start in bits 144-199.\n    packed |= _start << 144;\n\n    // number in bits 200-255.\n    packed |= _number << 200;\n\n    // Store the packed value.\n    _packedIntrinsicPropertiesOf[_projectId][_configuration] = packed;\n  }\n\n  /**\n    @notice \n    The project's stored funding cycle that hasn't yet started and should be used next, if one exists.\n\n    @dev\n    A value of 0 is returned if no funding cycle was found.\n\n    @dev\n    Assumes the project has a latest configuration.\n    \n    @param _projectId The ID of a project to look through for a standby cycle.\n\n    @return configuration The configuration of the standby funding cycle if one exists, or 0 if one doesn't exist.\n  */\n  function _standbyOf(uint256 _projectId) private view returns (uint256 configuration) {\n    // Get a reference to the project's latest funding cycle.\n    configuration = latestConfigurationOf[_projectId];\n\n    // Get the necessary properties for the latest funding cycle.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration);\n\n    // There is no upcoming funding cycle if the latest funding cycle has already started.\n    if (block.timestamp >= _fundingCycle.start) return 0;\n\n    // If this is the first funding cycle, it is queued.\n    if (_fundingCycle.number == 1) return configuration;\n\n    // Get the necessary properties for the base funding cycle.\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n\n    // If the latest configuration doesn't start until after another base cycle, return 0.\n    if (\n      _baseFundingCycle.duration > 0 &&\n      block.timestamp < _fundingCycle.start - _baseFundingCycle.duration\n    ) return 0;\n  }\n\n  /**\n    @notice \n    The project's stored funding cycle that has started and hasn't yet expired.\n    \n    @dev\n    A value of 0 is returned if no funding cycle was found.\n\n    @dev\n    Assumes the project has a latest configuration.\n\n    @param _projectId The ID of the project to look through.\n\n    @return configuration The configuration of an eligible funding cycle if one exists, or 0 if one doesn't exist.\n  */\n  function _eligibleOf(uint256 _projectId) private view returns (uint256 configuration) {\n    // Get a reference to the project's latest funding cycle.\n    configuration = latestConfigurationOf[_projectId];\n\n    // Get the latest funding cycle.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration);\n\n    // If the latest is expired, return an empty funding cycle.\n    // A duration of 0 cannot be expired.\n    if (\n      _fundingCycle.duration > 0 && block.timestamp >= _fundingCycle.start + _fundingCycle.duration\n    ) return 0;\n\n    // Return the funding cycle's configuration if it has started.\n    if (block.timestamp >= _fundingCycle.start) return _fundingCycle.configuration;\n\n    // Get a reference to the cycle's base configuration.\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n\n    // If the base cycle isn't eligible, the project has no eligible cycle.\n    // A duration of 0 is always eligible.\n    if (\n      _baseFundingCycle.duration > 0 &&\n      block.timestamp >= _baseFundingCycle.start + _baseFundingCycle.duration\n    ) return 0;\n\n    // Return the configuration that the latest funding cycle is based on.\n    configuration = _fundingCycle.basedOn;\n  }\n\n  /** \n    @notice \n    A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration.\n\n    @dev\n    Returns an empty funding cycle if there can't be a mock funding cycle based on the provided one.\n\n    @dev\n    Assumes a funding cycle with a duration of 0 will never be asked to be the base of a mock.\n\n    @param _baseFundingCycle The funding cycle that the resulting funding cycle should follow.\n    @param _allowMidCycle A flag indicating if the mocked funding cycle is allowed to already be mid cycle.\n\n    @return A mock of what the next funding cycle will be.\n  */\n  function _mockFundingCycleBasedOn(JBFundingCycle memory _baseFundingCycle, bool _allowMidCycle)\n    private\n    view\n    returns (JBFundingCycle memory)\n  {\n    // Get the distance of the current time to the start of the next possible funding cycle.\n    // If the returned mock cycle must not yet have started, the start time of the mock must be in the future.\n    uint256 _mustStartAtOrAfter = !_allowMidCycle\n      ? block.timestamp + 1\n      : block.timestamp - _baseFundingCycle.duration + 1;\n\n    // Derive what the start time should be.\n    uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartAtOrAfter);\n\n    // Derive what the number should be.\n    uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\n\n    return\n      JBFundingCycle(\n        _number,\n        _baseFundingCycle.configuration,\n        _baseFundingCycle.basedOn,\n        _start,\n        _baseFundingCycle.duration,\n        _deriveWeightFrom(_baseFundingCycle, _start),\n        _baseFundingCycle.discountRate,\n        _baseFundingCycle.ballot,\n        _baseFundingCycle.metadata\n      );\n  }\n\n  /** \n    @notice \n    The date that is the nearest multiple of the specified funding cycle's duration from its end.\n\n    @param _baseFundingCycle The funding cycle to base the calculation on.\n    @param _mustStartAtOrAfter A date that the derived start must be on or come after.\n\n    @return start The next start time.\n  */\n  function _deriveStartFrom(JBFundingCycle memory _baseFundingCycle, uint256 _mustStartAtOrAfter)\n    private\n    pure\n    returns (uint256 start)\n  {\n    // A subsequent cycle to one with a duration of 0 should start as soon as possible.\n    if (_baseFundingCycle.duration == 0) return _mustStartAtOrAfter;\n\n    // The time when the funding cycle immediately after the specified funding cycle starts.\n    uint256 _nextImmediateStart = _baseFundingCycle.start + _baseFundingCycle.duration;\n\n    // If the next immediate start is now or in the future, return it.\n    if (_nextImmediateStart >= _mustStartAtOrAfter) return _nextImmediateStart;\n\n    // The amount of seconds since the `_mustStartAtOrAfter` time which results in a start time that might satisfy the specified constraints.\n    uint256 _timeFromImmediateStartMultiple = (_mustStartAtOrAfter - _nextImmediateStart) %\n      _baseFundingCycle.duration;\n\n    // A reference to the first possible start timestamp.\n    start = _mustStartAtOrAfter - _timeFromImmediateStartMultiple;\n\n    // Add increments of duration as necessary to satisfy the threshold.\n    while (_mustStartAtOrAfter > start) start = start + _baseFundingCycle.duration;\n  }\n\n  /** \n    @notice \n    The accumulated weight change since the specified funding cycle.\n\n    @param _baseFundingCycle The funding cycle to base the calculation on.\n    @param _start The start time of the funding cycle to derive a number for.\n\n    @return weight The derived weight, as a fixed point number with 18 decimals.\n  */\n  function _deriveWeightFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\n    private\n    pure\n    returns (uint256 weight)\n  {\n    // A subsequent cycle to one with a duration of 0 should have the next possible weight.\n    if (_baseFundingCycle.duration == 0)\n      return\n        PRBMath.mulDiv(\n          _baseFundingCycle.weight,\n          JBConstants.MAX_DISCOUNT_RATE - _baseFundingCycle.discountRate,\n          JBConstants.MAX_DISCOUNT_RATE\n        );\n\n    // The weight should be based off the base funding cycle's weight.\n    weight = _baseFundingCycle.weight;\n\n    // If the discount is 0, the weight doesn't change.\n    if (_baseFundingCycle.discountRate == 0) return weight;\n\n    // The difference between the start of the base funding cycle and the proposed start.\n    uint256 _startDistance = _start - _baseFundingCycle.start;\n\n    // Apply the base funding cycle's discount rate for each cycle that has passed.\n    uint256 _discountMultiple = _startDistance / _baseFundingCycle.duration;\n\n    for (uint256 i = 0; i < _discountMultiple; i++) {\n      // The number of times to apply the discount rate.\n      // Base the new weight on the specified funding cycle's weight.\n      weight = PRBMath.mulDiv(\n        weight,\n        JBConstants.MAX_DISCOUNT_RATE - _baseFundingCycle.discountRate,\n        JBConstants.MAX_DISCOUNT_RATE\n      );\n      // The calculation doesn't need to continue if the weight is 0.\n      if (weight == 0) break;\n    }\n  }\n\n  /** \n    @notice \n    The number of the next funding cycle given the specified funding cycle.\n\n    @param _baseFundingCycle The funding cycle to base the calculation on.\n    @param _start The start time of the funding cycle to derive a number for.\n\n    @return The funding cycle number.\n  */\n  function _deriveNumberFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\n    private\n    pure\n    returns (uint256)\n  {\n    // A subsequent cycle to one with a duration of 0 should be the next number.\n    if (_baseFundingCycle.duration == 0) return _baseFundingCycle.number + 1;\n\n    // The difference between the start of the base funding cycle and the proposed start.\n    uint256 _startDistance = _start - _baseFundingCycle.start;\n\n    // Find the number of base cycles that fit in the start distance.\n    return _baseFundingCycle.number + (_startDistance / _baseFundingCycle.duration);\n  }\n\n  /** \n    @notice \n    Checks to see if the provided funding cycle is approved according to the correct ballot.\n\n    @param _projectId The ID of the project to which the funding cycle belongs. \n    @param _fundingCycle The funding cycle to get an approval flag for.\n\n    @return The approval flag.\n  */\n  function _isApproved(uint256 _projectId, JBFundingCycle memory _fundingCycle)\n    private\n    view\n    returns (bool)\n  {\n    return\n      _ballotStateOf(\n        _projectId,\n        _fundingCycle.configuration,\n        _fundingCycle.start,\n        _fundingCycle.basedOn\n      ) == JBBallotState.Approved;\n  }\n\n  /**\n    @notice \n    A project's latest funding cycle configuration approval status.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _configuration The funding cycle configuration to get the ballot state of.\n    @param _start The start time of the funding cycle configuration to get the ballot state of.\n    @param _ballotFundingCycleConfiguration The configuration of the funding cycle which is configured with the ballot that should be used.\n\n    @return The ballot state of the project.\n  */\n  function _ballotStateOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    uint256 _start,\n    uint256 _ballotFundingCycleConfiguration\n  ) private view returns (JBBallotState) {\n    // If there is no ballot funding cycle, implicitly approve.\n    if (_ballotFundingCycleConfiguration == 0) return JBBallotState.Approved;\n\n    // Get the ballot funding cycle.\n    JBFundingCycle memory _ballotFundingCycle = _getStructFor(\n      _projectId,\n      _ballotFundingCycleConfiguration\n    );\n\n    // If there is no ballot, the ID is auto approved.\n    // Otherwise if the ballot's duration hasn't passed, its still active.\n    // Otherwise, return the ballot's state.\n    if (_ballotFundingCycle.ballot == IJBFundingCycleBallot(address(0)))\n      return JBBallotState.Approved;\n    else if (_ballotFundingCycle.ballot.duration() >= block.timestamp - _configuration)\n      return JBBallotState.Active;\n    else return _ballotFundingCycle.ballot.stateOf(_projectId, _configuration, _start);\n  }\n\n  /**\n    @notice \n    Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _configuration The funding cycle configuration to get the full struct for.\n\n    @return fundingCycle A funding cycle struct.\n  */\n  function _getStructFor(uint256 _projectId, uint256 _configuration)\n    private\n    view\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    // Return an empty funding cycle if the configuration specified is 0.\n    if (_configuration == 0) return fundingCycle;\n\n    fundingCycle.configuration = _configuration;\n\n    uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_projectId][_configuration];\n\n    // weight in bits 0-87 bits.\n    fundingCycle.weight = uint256(uint88(_packedIntrinsicProperties));\n    // basedOn in bits 88-143 bits.\n    fundingCycle.basedOn = uint256(uint56(_packedIntrinsicProperties >> 88));\n    // start in bits 144-199 bits.\n    fundingCycle.start = uint256(uint56(_packedIntrinsicProperties >> 144));\n    // number in bits 200-255 bits.\n    fundingCycle.number = uint256(uint56(_packedIntrinsicProperties >> 200));\n\n    uint256 _packedUserProperties = _packedUserPropertiesOf[_projectId][_configuration];\n\n    // ballot in bits 0-159 bits.\n    fundingCycle.ballot = IJBFundingCycleBallot(address(uint160(_packedUserProperties)));\n    // duration in bits 160-223 bits.\n    fundingCycle.duration = uint256(uint64(_packedUserProperties >> 160));\n    // discountRate in bits 224-255 bits.\n    fundingCycle.discountRate = uint256(uint32(_packedUserProperties >> 224));\n\n    fundingCycle.metadata = _metadataOf[_projectId][_configuration];\n  }\n}\n"
    },
    "contracts/JBOperatorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './interfaces/IJBOperatorStore.sol';\n\n/** \n  @notice\n  Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific indexed actions on their behalf.\n\n  @dev\n  Adheres to -\n  IJBOperatorStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\ncontract JBOperatorStore is IJBOperatorStore {\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The permissions that an operator has been given to operate on a specific domain.\n    \n    @dev\n    An account can give an operator permissions that only pertain to a specific domain namespace.\n    There is no domain with a value of 0 â€“ accounts can use the 0 domain to give an operator\n    permissions to all domains on their behalf.\n\n    @dev\n    Permissions are stored in a packed `uint256`. Each 256 bits represents the on/off state of a permission. Applications can specify the significance of each index.\n\n    _operator The address of the operator.\n    _account The address of the account being operated.\n    _domain The domain within which the permissions apply. Applications can use the domain namespace as they wish.\n  */\n  mapping(address => mapping(address => mapping(uint256 => uint256))) public override permissionsOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Whether or not an operator has the permission to take a certain action pertaining to the specified domain.\n\n    @param _operator The operator to check.\n    @param _account The account that has given out permissions to the operator.\n    @param _domain The domain that the operator has been given permissions to operate.\n    @param _permissionIndex The permission index to check for.\n\n    @return A flag indicating whether the operator has the specified permission.\n  */\n  function hasPermission(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) external view override returns (bool) {\n    if (_permissionIndex > 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n    return (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 1);\n  }\n\n  /** \n    @notice \n    Whether or not an operator has the permission to take certain actions pertaining to the specified domain.\n\n    @param _operator The operator to check.\n    @param _account The account that has given out permissions to the operator.\n    @param _domain The domain that the operator has been given permissions to operate.\n    @param _permissionIndexes An array of permission indexes to check for.\n\n    @return A flag indicating whether the operator has all specified permissions.\n  */\n  function hasPermissions(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256[] calldata _permissionIndexes\n  ) external view override returns (bool) {\n    for (uint256 _i = 0; _i < _permissionIndexes.length; _i++) {\n      uint256 _permissionIndex = _permissionIndexes[_i];\n\n      if (_permissionIndex > 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n      if (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 0)\n        return false;\n    }\n    return true;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Sets permissions for an operators.\n\n    @dev\n    Only an address can set its own operators.\n\n    @param _operatorData The data that specifies the params for the operator being set.\n  */\n  function setOperator(JBOperatorData calldata _operatorData) external override {\n    // Pack the indexes into a uint256.\n    uint256 _packed = _packedPermissions(_operatorData.permissionIndexes);\n\n    // Store the new value.\n    permissionsOf[_operatorData.operator][msg.sender][_operatorData.domain] = _packed;\n\n    emit SetOperator(\n      _operatorData.operator,\n      msg.sender,\n      _operatorData.domain,\n      _operatorData.permissionIndexes,\n      _packed\n    );\n  }\n\n  /**\n    @notice\n    Sets permissions for many operators.\n\n    @dev\n    Only an address can set its own operators.\n\n    @param _operatorData The data that specify the params for each operator being set.\n  */\n  function setOperators(JBOperatorData[] calldata _operatorData) external override {\n    for (uint256 _i = 0; _i < _operatorData.length; _i++) {\n      // Pack the indexes into a uint256.\n      uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes);\n\n      // Store the new value.\n      permissionsOf[_operatorData[_i].operator][msg.sender][_operatorData[_i].domain] = _packed;\n\n      emit SetOperator(\n        _operatorData[_i].operator,\n        msg.sender,\n        _operatorData[_i].domain,\n        _operatorData[_i].permissionIndexes,\n        _packed\n      );\n    }\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Converts an array of permission indexes to a packed `uint256`.\n\n    @param _indexes The indexes of the permissions to pack.\n\n    @return packed The packed value.\n  */\n  function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {\n    for (uint256 _i = 0; _i < _indexes.length; _i++) {\n      uint256 _index = _indexes[_i];\n\n      if (_index > 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n      // Turn the bit at the index on.\n      packed |= 1 << _index;\n    }\n  }\n}\n"
    },
    "contracts/JBPrices.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './interfaces/IJBPrices.sol';\n\n/** \n  @notice \n  Manages and normalizes price feeds.\n\n  @dev\n  Adheres to -\n  IJBPrices: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBPrices is IJBPrices, Ownable {\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error PRICE_FEED_ALREADY_EXISTS();\n  error PRICE_FEED_NOT_FOUND();\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The available price feeds.\n\n    @dev\n    The feed returns the number of `_currency` units that can be converted to 1 `_base` unit.\n\n    _currency The currency units the feed's resulting price is in terms of.\n    _base The base currency unit being priced by the feed.\n  */\n  mapping(uint256 => mapping(uint256 => IJBPriceFeed)) public override feedFor;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Gets the number of `_currency` units that can be converted to 1 `_base` unit.\n\n    @param _currency The currency units the resulting price is in terms of.\n    @param _base The base currency unit being priced.\n    @param _decimals The number of decimals the returned fixed point price should include.\n    \n    @return The price of the currency in terms of the base, as a fixed point number with the specified number of decimals.\n  */\n  function priceFor(\n    uint256 _currency,\n    uint256 _base,\n    uint256 _decimals\n  ) external view override returns (uint256) {\n    // If the currency is the base, return 1 since they are priced the same. Include the desired number of decimals.\n    if (_currency == _base) return 10**_decimals;\n\n    // Get a reference to the feed.\n    IJBPriceFeed _feed = feedFor[_currency][_base];\n\n    // If it exists, return the price.\n    if (_feed != IJBPriceFeed(address(0))) return _feed.currentPrice(_decimals);\n\n    // Get the inverse feed.\n    _feed = feedFor[_base][_currency];\n\n    // If it exists, return the inverse price.\n    if (_feed != IJBPriceFeed(address(0)))\n      return PRBMath.mulDiv(10**_decimals, 10**_decimals, _feed.currentPrice(_decimals));\n\n    // No price feed available, revert.\n    revert PRICE_FEED_NOT_FOUND();\n  }\n\n  //*********************************************************************//\n  // ---------------------------- constructor -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _owner The address that will own the contract.\n  */\n  constructor(address _owner) {\n    // Transfer the ownership.\n    transferOwnership(_owner);\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Add a price feed for a currency in terms of the provided base currency.\n\n    @dev\n    Current feeds can't be modified.\n\n    @param _currency The currency units the feed's resulting price is in terms of.\n    @param _base The base currency unit being priced by the feed.\n    @param _feed The price feed being added.\n  */\n  function addFeedFor(\n    uint256 _currency,\n    uint256 _base,\n    IJBPriceFeed _feed\n  ) external override onlyOwner {\n    // There can't already be a feed for the specified currency.\n    if (feedFor[_currency][_base] != IJBPriceFeed(address(0))) revert PRICE_FEED_ALREADY_EXISTS();\n\n    // Store the feed.\n    feedFor[_currency][_base] = _feed;\n\n    emit AddFeed(_currency, _base, _feed);\n  }\n}\n"
    },
    "contracts/JBProjects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/draft-ERC721Votes.sol';\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBProjects.sol';\nimport './libraries/JBOperations.sol';\n\n/** \n  @notice \n  Stores project ownership and metadata.\n\n  @dev\n  Projects are represented as ERC-721's.\n\n  @dev\n  Adheres to -\n  IJBProjects: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n  ERC721Votes: A checkpointable standard definition for non-fungible tokens (NFTs).\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBProjects is IJBProjects, JBOperatable, ERC721Votes, Ownable {\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The number of projects that have been created using this contract.\n\n    @dev\n    The count is incremented with each new project created. \n    The resulting ERC-721 token ID for each project is the newly incremented count value.\n  */\n  uint256 public override count = 0;\n\n  /** \n    @notice \n    The metadata for each project, which can be used across several domains.\n\n    _projectId The ID of the project to which the metadata belongs.\n    _domain The domain within which the metadata applies. Applications can use the domain namespace as they wish.\n  */\n  mapping(uint256 => mapping(uint256 => string)) public override metadataContentOf;\n\n  /**\n    @notice\n    The contract resolving each project ID to its ERC721 URI.\n  */\n  IJBTokenUriResolver public override tokenUriResolver;\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Returns the URI where the ERC-721 standard JSON of a project is hosted.\n\n    @param _projectId The ID of the project to get a URI of.\n\n    @return The token URI to use for the provided `_projectId`.\n  */\n  function tokenURI(uint256 _projectId) public view override returns (string memory) {\n    // If there's no resolver, there's no URI.\n    if (tokenUriResolver == IJBTokenUriResolver(address(0))) return '';\n\n    // Return the resolved URI.\n    return tokenUriResolver.getUri(_projectId);\n  }\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(IERC165, ERC721)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBProjects).interfaceId ||\n      _interfaceId == type(IJBOperatable).interfaceId ||\n      super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n  */\n  constructor(IJBOperatorStore _operatorStore)\n    ERC721('Juicebox Projects', 'JUICEBOX')\n    EIP712('Juicebox Projects', '1')\n    JBOperatable(_operatorStore)\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Create a new project for the specified owner, which mints an NFT (ERC-721) into their wallet.\n\n    @dev \n    Anyone can create a project on an owner's behalf.\n\n    @param _owner The address that will be the owner of the project.\n    @param _metadata A struct containing metadata content about the project, and domain within which the metadata applies.\n\n    @return projectId The token ID of the newly created project.\n  */\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\n    external\n    override\n    returns (uint256 projectId)\n  {\n    // Increment the count, which will be used as the ID.\n    projectId = ++count;\n\n    // Mint the project.\n    _safeMint(_owner, projectId);\n\n    // Set the metadata if one was provided.\n    if (bytes(_metadata.content).length > 0)\n      metadataContentOf[projectId][_metadata.domain] = _metadata.content;\n\n    emit Create(projectId, _owner, _metadata, msg.sender);\n  }\n\n  /**\n    @notice \n    Allows a project owner to set the project's metadata content for a particular domain namespace. \n\n    @dev \n    Only a project's owner or operator can set its metadata.\n\n    @dev \n    Applications can use the domain namespace as they wish.\n\n    @param _projectId The ID of the project who's metadata is being changed.\n    @param _metadata A struct containing metadata content, and domain within which the metadata applies. \n  */\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata)\n    external\n    override\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_METADATA)\n  {\n    // Set the project's new metadata content within the specified domain.\n    metadataContentOf[_projectId][_metadata.domain] = _metadata.content;\n\n    emit SetMetadata(_projectId, _metadata, msg.sender);\n  }\n\n  /**\n    @notice \n    Sets the address of the resolver used to retrieve the tokenURI of projects.\n\n    @param _newResolver The address of the new resolver.\n  */\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external override onlyOwner {\n    // Store the new resolver.\n    tokenUriResolver = _newResolver;\n\n    emit SetTokenUriResolver(_newResolver, msg.sender);\n  }\n}\n"
    },
    "contracts/JBSplitsStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBDirectory.sol';\nimport './interfaces/IJBSplitsStore.sol';\nimport './libraries/JBConstants.sol';\nimport './libraries/JBOperations.sol';\n\n/**\n  @notice\n  Stores splits for each project.\n\n  @dev\n  Adheres to -\n  IJBSplitsStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n*/\ncontract JBSplitsStore is IJBSplitsStore, JBOperatable {\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error INVALID_LOCKED_UNTIL();\n  error INVALID_PROJECT_ID();\n  error INVALID_SPLIT_PERCENT();\n  error INVALID_TOTAL_PERCENT();\n  error PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The number of splits currently set for each project ID's configurations.\n\n    _projectId The ID of the project to get the split count for.\n    _domain An identifier within which the returned splits should be considered active.\n    _group The identifying group of the splits.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) private _splitCountOf;\n\n  /** \n    @notice\n    Packed data of splits for each project ID's configurations.\n\n    _projectId The ID of the project to get packed splits data for.\n    _domain An identifier within which the returned splits should be considered active.\n    _group The identifying group of the splits.\n    _index The indexed order that the split was set at.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))\n    private _packedSplitParts1Of;\n\n  /** \n    @notice\n    More packed data of splits for each project ID's configurations.\n\n    @dev\n    This packed data is often 0.\n\n    _projectId The ID of the project to get packed splits data for.\n    _domain An identifier within which the returned splits should be considered active.\n    _group The identifying group of the splits.\n    _index The indexed order that the split was set at.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))\n    private _packedSplitParts2Of;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  /** \n    @notice \n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n  @notice \n  Get all splits for the specified project ID, within the specified domain, for the specified group.\n\n  @param _projectId The ID of the project to get splits for.\n  @param _domain An identifier within which the returned splits should be considered active.\n  @param _group The identifying group of the splits.\n\n  @return An array of all splits for the project.\n*/\n  function splitsOf(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) external view override returns (JBSplit[] memory) {\n    return _getStructsFor(_projectId, _domain, _group);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory\n  ) JBOperatable(_operatorStore) {\n    projects = _projects;\n    directory = _directory;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Sets a project's splits.\n\n    @dev\n    Only the owner or operator of a project, or the current controller contract of the project, can set its splits.\n\n    @dev\n    The new splits must include any currently set splits that are locked.\n\n    @param _projectId The ID of the project for which splits are being added.\n    @param _domain An identifier within which the splits should be considered active.\n    @param _groupedSplits An array of splits to set for any number of groups. \n  */\n  function set(\n    uint256 _projectId,\n    uint256 _domain,\n    JBGroupedSplits[] calldata _groupedSplits\n  )\n    external\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.SET_SPLITS,\n      address(directory.controllerOf(_projectId)) == msg.sender\n    )\n  {\n    // Push array length in stack\n    uint256 _groupedSplitsLength = _groupedSplits.length;\n\n    // Set each grouped splits.\n    for (uint256 _i = 0; _i < _groupedSplitsLength; ) {\n      // Get a reference to the grouped split being iterated on.\n      JBGroupedSplits memory _groupedSplit = _groupedSplits[_i];\n\n      // Set the splits for the group.\n      _set(_projectId, _domain, _groupedSplit.group, _groupedSplit.splits);\n\n      unchecked {\n        ++_i;\n      }\n    }\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Sets a project's splits.\n\n    @dev\n    The new splits must include any currently set splits that are locked.\n\n    @param _projectId The ID of the project for which splits are being added.\n    @param _domain An identifier within which the splits should be considered active.\n    @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\n    @param _splits The splits to set.\n  */\n  function _set(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group,\n    JBSplit[] memory _splits\n  ) internal {\n    // Get a reference to the project's current splits.\n    JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\n\n    // Check to see if all locked splits are included.\n    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\n      // If not locked, continue.\n      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\n\n      // Keep a reference to whether or not the locked split being iterated on is included.\n      bool _includesLocked = false;\n\n      for (uint256 _j = 0; _j < _splits.length; _j++) {\n        // Check for sameness.\n        if (\n          _splits[_j].percent == _currentSplits[_i].percent &&\n          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\n          _splits[_j].allocator == _currentSplits[_i].allocator &&\n          _splits[_j].projectId == _currentSplits[_i].projectId &&\n          // Allow lock extention.\n          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\n        ) _includesLocked = true;\n      }\n\n      if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n    }\n\n    // Add up all the percents to make sure they cumulative are under 100%.\n    uint256 _percentTotal = 0;\n\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\n      // The percent should be greater than 0.\n      if (_splits[_i].percent == 0) revert INVALID_SPLIT_PERCENT();\n\n      // ProjectId should be within a uint56\n      if (_splits[_i].projectId > type(uint56).max) revert INVALID_PROJECT_ID();\n\n      // Add to the total percents.\n      _percentTotal = _percentTotal + _splits[_i].percent;\n\n      // Validate the total does not exceed the expected value.\n      if (_percentTotal > JBConstants.SPLITS_TOTAL_PERCENT) revert INVALID_TOTAL_PERCENT();\n\n      uint256 _packedSplitParts1;\n\n      // prefer claimed in bit 0.\n      if (_splits[_i].preferClaimed) _packedSplitParts1 = 1;\n      // prefer add to balance in bit 1.\n      if (_splits[_i].preferAddToBalance) _packedSplitParts1 |= 1 << 1;\n      // percent in bits 2-33.\n      _packedSplitParts1 |= _splits[_i].percent << 2;\n      // projectId in bits 32-89.\n      _packedSplitParts1 |= _splits[_i].projectId << 34;\n      // beneficiary in bits 90-249.\n      _packedSplitParts1 |= uint256(uint160(address(_splits[_i].beneficiary))) << 90;\n\n      // Store the first spit part.\n      _packedSplitParts1Of[_projectId][_domain][_group][_i] = _packedSplitParts1;\n\n      // If there's data to store in the second packed split part, pack and store.\n      if (_splits[_i].lockedUntil > 0 || _splits[_i].allocator != IJBSplitAllocator(address(0))) {\n        // Locked until should be within a uint48\n        if (_splits[_i].lockedUntil > type(uint48).max) revert INVALID_LOCKED_UNTIL();\n\n        // lockedUntil in bits 0-47.\n        uint256 _packedSplitParts2 = uint48(_splits[_i].lockedUntil);\n        // allocator in bits 48-207.\n        _packedSplitParts2 |= uint256(uint160(address(_splits[_i].allocator))) << 48;\n\n        // Store the second split part.\n        _packedSplitParts2Of[_projectId][_domain][_group][_i] = _packedSplitParts2;\n\n        // Otherwise if there's a value stored in the indexed position, delete it.\n      } else if (_packedSplitParts2Of[_projectId][_domain][_group][_i] > 0)\n        delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\n\n      emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\n    }\n\n    // Set the new length of the splits.\n    _splitCountOf[_projectId][_domain][_group] = _splits.length;\n  }\n\n  /**\n    @notice \n    Unpack splits' packed stored values into easy-to-work-with spit structs.\n\n    @param _projectId The ID of the project to which the split belongs.\n    @param _domain The identifier within which the returned splits should be considered active.\n    @param _group The identifying group of the splits.\n\n    @return splits The split structs.\n  */\n  function _getStructsFor(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) private view returns (JBSplit[] memory) {\n    // Get a reference to the number of splits that need to be added to the returned array.\n    uint256 _splitCount = _splitCountOf[_projectId][_domain][_group];\n\n    // Initialize an array to be returned that has the set length.\n    JBSplit[] memory _splits = new JBSplit[](_splitCount);\n\n    // Loop through each split and unpack the values into structs.\n    for (uint256 _i = 0; _i < _splitCount; _i++) {\n      // Get a reference to the fist packed data.\n      uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\n\n      // Populate the split struct.\n      JBSplit memory _split;\n\n      // prefer claimed in bit 0.\n      _split.preferClaimed = _packedSplitPart1 & 1 == 1;\n      // prefer add to balance in bit 1.\n      _split.preferAddToBalance = (_packedSplitPart1 >> 1) & 1 == 1;\n      // percent in bits 2-33.\n      _split.percent = uint256(uint32(_packedSplitPart1 >> 2));\n      // projectId in bits 32-89.\n      _split.projectId = uint256(uint56(_packedSplitPart1 >> 34));\n      // beneficiary in bits 90-249.\n      _split.beneficiary = payable(address(uint160(_packedSplitPart1 >> 90)));\n\n      // Get a reference to the second packed data.\n      uint256 _packedSplitPart2 = _packedSplitParts2Of[_projectId][_domain][_group][_i];\n\n      // If there's anything in it, unpack.\n      if (_packedSplitPart2 > 0) {\n        // lockedUntil in bits 0-47.\n        _split.lockedUntil = uint256(uint48(_packedSplitPart2));\n        // allocator in bits 48-207.\n        _split.allocator = IJBSplitAllocator(address(uint160(_packedSplitPart2 >> 48)));\n      }\n\n      // Add the split to the value being returned.\n      _splits[_i] = _split;\n    }\n\n    return _splits;\n  }\n}\n"
    },
    "contracts/structs/JBDidPayData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBTokenAmount.sol';\n\n/** \n  @member payer The address from which the payment originated.\n  @member projectId The ID of the project for which the payment was made.\n  @member currentFundingCycleConfiguration The configuration of the funding cycle during which the payment is being made.\n  @member amount The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\n  @member projectTokenCount The number of project tokens minted for the beneficiary.\n  @member beneficiary The address to which the tokens were minted.\n  @member preferClaimedTokens A flag indicating whether the request prefered to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract.\n  @member memo The memo that is being emitted alongside the payment.\n  @member metadata Extra data to send to the delegate.\n*/\nstruct JBDidPayData {\n  address payer;\n  uint256 projectId;\n  uint256 currentFundingCycleConfiguration;\n  JBTokenAmount amount;\n  uint256 projectTokenCount;\n  address beneficiary;\n  bool preferClaimedTokens;\n  string memo;\n  bytes metadata;\n}\n"
    },
    "contracts/structs/JBDidRedeemData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBTokenAmount.sol';\n\n/** \n  @member holder The holder of the tokens being redeemed.\n  @member projectId The ID of the project with which the redeemed tokens are associated.\n  @member currentFundingCycleConfiguration The configuration of the funding cycle during which the redemption is being made.\n  @member projectTokenCount The number of project tokens being redeemed.\n  @member reclaimedAmount The amount reclaimed from the treasury. Includes the token being reclaimed, the value, the number of decimals included, and the currency of the amount.\n  @member beneficiary The address to which the reclaimed amount will be sent.\n  @member memo The memo that is being emitted alongside the redemption.\n  @member metadata Extra data to send to the delegate.\n*/\nstruct JBDidRedeemData {\n  address holder;\n  uint256 projectId;\n  uint256 currentFundingCycleConfiguration;\n  uint256 projectTokenCount;\n  JBTokenAmount reclaimedAmount;\n  address payable beneficiary;\n  string memo;\n  bytes metadata;\n}\n"
    },
    "contracts/structs/JBFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/** \n  @member amount The total amount the fee was taken from, as a fixed point number with the same number of decimals as the terminal in which this struct was created.\n  @member fee The percent of the fee, out of MAX_FEE.\n  @member feeDiscount The discount of the fee.\n  @member beneficiary The address that will receive the tokens that are minted as a result of the fee payment.\n*/\nstruct JBFee {\n  uint256 amount;\n  uint32 fee;\n  uint32 feeDiscount;\n  address beneficiary;\n}\n"
    },
    "contracts/structs/JBFundAccessConstraints.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBPaymentTerminal.sol';\n\n/** \n  @member terminal The terminal within which the distribution limit and the overflow allowance applies.\n  @member token The token for which the fund access constraints apply.\n  @member distributionLimit The amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies.\n  @member distributionLimitCurrency The currency of the distribution limit.\n  @member overflowAllowance The amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies.\n  @member overflowAllowanceCurrency The currency of the overflow allowance.\n*/\nstruct JBFundAccessConstraints {\n  IJBPaymentTerminal terminal;\n  address token;\n  uint256 distributionLimit;\n  uint256 distributionLimitCurrency;\n  uint256 overflowAllowance;\n  uint256 overflowAllowanceCurrency;\n}\n"
    },
    "contracts/structs/JBFundingCycleMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBGlobalFundingCycleMetadata.sol';\nimport './../interfaces/IJBFundingCycleDataSource.sol';\n\n/** \n  @member global Data used globally in non-migratable ecosystem contracts.\n  @member reservedRate The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\n  @member redemptionRate The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\n  @member ballotRedemptionRate The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\n  @member pausePay A flag indicating if the pay functionality should be paused during the funding cycle.\n  @member pauseDistributions A flag indicating if the distribute functionality should be paused during the funding cycle.\n  @member pauseRedeem A flag indicating if the redeem functionality should be paused during the funding cycle.\n  @member pauseBurn A flag indicating if the burn functionality should be paused during the funding cycle.\n  @member allowMinting A flag indicating if the mint functionality should be allowed during the funding cycle.\n  @member allowChangeToken A flag indicating if changing tokens should be allowed during this funding cycle.\n  @member allowTerminalMigration A flag indicating if migrating terminals should be allowed during this funding cycle.\n  @member allowControllerMigration A flag indicating if migrating controllers should be allowed during this funding cycle.\n  @member holdFees A flag indicating if fees should be held during this funding cycle.\n  @member useTotalOverflowForRedemptions A flag indicating if redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\n  @member useDataSourceForPay A flag indicating if the data source should be used for pay transactions during this funding cycle.\n  @member useDataSourceForRedeem A flag indicating if the data source should be used for redeem transactions during this funding cycle.\n  @member dataSource The data source to use during this funding cycle.\n*/\nstruct JBFundingCycleMetadata {\n  JBGlobalFundingCycleMetadata global;\n  uint256 reservedRate;\n  uint256 redemptionRate;\n  uint256 ballotRedemptionRate;\n  bool pausePay;\n  bool pauseDistributions;\n  bool pauseRedeem;\n  bool pauseBurn;\n  bool allowMinting;\n  bool allowChangeToken;\n  bool allowTerminalMigration;\n  bool allowControllerMigration;\n  bool holdFees;\n  bool useTotalOverflowForRedemptions;\n  bool useDataSourceForPay;\n  bool useDataSourceForRedeem;\n  address dataSource;\n}\n"
    },
    "contracts/structs/JBGroupedSplits.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBSplit.sol';\n\n/** \n  @member group The group indentifier.\n  @member splits The splits to associate with the group.\n*/\nstruct JBGroupedSplits {\n  uint256 group;\n  JBSplit[] splits;\n}\n"
    },
    "contracts/structs/JBPayParamsData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBPaymentTerminal.sol';\nimport './JBTokenAmount.sol';\n\n/** \n  @member terminal The terminal that is facilitating the payment.\n  @member payer The address from which the payment originated.\n  @member amount The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\n  @member projectId The ID of the project being paid.\n  @member currentFundingCycleConfiguration The configuration of the funding cycle during which the payment is being made.\n  @member beneficiary The specified address that should be the beneficiary of anything that results from the payment.\n  @member weight The weight of the funding cycle during which the payment is being made.\n  @member reservedRate The reserved rate of the funding cycle during which the payment is being made.\n  @member memo The memo that was sent alongside the payment.\n  @member metadata Extra data provided by the payer.\n*/\nstruct JBPayParamsData {\n  IJBPaymentTerminal terminal;\n  address payer;\n  JBTokenAmount amount;\n  uint256 projectId;\n  uint256 currentFundingCycleConfiguration;\n  address beneficiary;\n  uint256 weight;\n  uint256 reservedRate;\n  string memo;\n  bytes metadata;\n}\n"
    },
    "contracts/structs/JBRedeemParamsData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBPaymentTerminal.sol';\nimport './JBTokenAmount.sol';\n\n/** \n  @member terminal The terminal that is facilitating the redemption.\n  @member holder The holder of the tokens being redeemed.\n  @member projectId The ID of the project whos tokens are being redeemed.\n  @member currentFundingCycleConfiguration The configuration of the funding cycle during which the redemption is being made.\n  @member tokenCount The proposed number of tokens being redeemed, as a fixed point number with 18 decimals.\n  @member totalSupply The total supply of tokens used in the calculation, as a fixed point number with 18 decimals.\n  @member overflow The amount of overflow used in the reclaim amount calculation.\n  @member reclaimAmount The amount that should be reclaimed by the redeemer using the protocol's standard bonding curve redemption formula. Includes the token being reclaimed, the reclaim value, the number of decimals included, and the currency of the reclaim amount.\n  @member useTotalOverflow If overflow across all of a project's terminals is being used when making redemptions.\n  @member redemptionRate The redemption rate of the funding cycle during which the redemption is being made.\n  @member ballotRedemptionRate The ballot redemption rate of the funding cycle during which the redemption is being made.\n  @member memo The proposed memo that is being emitted alongside the redemption.\n  @member metadata Extra data provided by the redeemer.\n*/\nstruct JBRedeemParamsData {\n  IJBPaymentTerminal terminal;\n  address holder;\n  uint256 projectId;\n  uint256 currentFundingCycleConfiguration;\n  uint256 tokenCount;\n  uint256 totalSupply;\n  uint256 overflow;\n  JBTokenAmount reclaimAmount;\n  bool useTotalOverflow;\n  uint256 redemptionRate;\n  uint256 ballotRedemptionRate;\n  string memo;\n  bytes metadata;\n}\n"
    },
    "contracts/structs/JBSplit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBSplitAllocator.sol';\n\n/** \n  @member preferClaimed A flag that only has effect if a projectId is also specified, and the project has a token contract attached. If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas.\n  @member preferAddToBalance A flag indicating if a distribution to a project should prefer triggering it's addToBalance function instead of its pay function.\n  @member percent The percent of the whole group that this split occupies. This number is out of `JBConstants.SPLITS_TOTAL_PERCENT`.\n  @member projectId The ID of a project. If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified. Resulting tokens will be routed to the beneficiary with the claimed token preference respected.\n  @member beneficiary An address. The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified. If allocator is set, the beneficiary will be forwarded to the allocator for it to use. If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it. If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\n  @member lockedUntil Specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period.\n  @member allocator If an allocator is specified, funds will be sent to the allocator contract along with all properties of this split.\n*/\nstruct JBSplit {\n  bool preferClaimed;\n  bool preferAddToBalance;\n  uint256 percent;\n  uint256 projectId;\n  address payable beneficiary;\n  uint256 lockedUntil;\n  IJBSplitAllocator allocator;\n}\n"
    },
    "contracts/system_tests/helpers/AccessJBLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '../../libraries/JBCurrencies.sol';\nimport '../../libraries/JBConstants.sol';\nimport '../../libraries/JBTokens.sol';\n\ncontract AccessJBLib {\n  function ETH() external pure returns (uint256) {\n    return JBCurrencies.GAS_CURRENCY;\n  }\n\n  function USD() external pure returns (uint256) {\n    return JBCurrencies.USD;\n  }\n\n  function ETHToken() external pure returns (address) {\n    return JBTokens.GAS_TOKEN;\n  }\n\n  function MAX_FEE() external pure returns (uint256) {\n    return JBConstants.MAX_FEE;\n  }\n\n  function MAX_RESERVED_RATE() external pure returns (uint256) {\n    return JBConstants.MAX_RESERVED_RATE;\n  }\n\n  function MAX_REDEMPTION_RATE() external pure returns (uint256) {\n    return JBConstants.MAX_REDEMPTION_RATE;\n  }\n\n  function MAX_DISCOUNT_RATE() external pure returns (uint256) {\n    return JBConstants.MAX_DISCOUNT_RATE;\n  }\n\n  function SPLITS_TOTAL_PERCENT() external pure returns (uint256) {\n    return JBConstants.SPLITS_TOTAL_PERCENT;\n  }\n\n  function MAX_FEE_DISCOUNT() external pure returns (uint256) {\n    return JBConstants.MAX_FEE_DISCOUNT;\n  }\n}\n"
    },
    "@paulrberg/contracts/math/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"prb-math/contracts/PRBMath.sol\";\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/interfaces/IJBController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './../structs/JBFundAccessConstraints.sol';\nimport './../structs/JBFundingCycleData.sol';\nimport './../structs/JBFundingCycleMetadata.sol';\nimport './../structs/JBGroupedSplits.sol';\nimport './../structs/JBProjectMetadata.sol';\nimport './IJBDirectory.sol';\nimport './IJBFundingCycleStore.sol';\nimport './IJBMigratable.sol';\nimport './IJBPaymentTerminal.sol';\nimport './IJBSplitsStore.sol';\nimport './IJBToken.sol';\nimport './IJBTokenStore.sol';\n\ninterface IJBController is IERC165 {\n  event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller);\n\n  event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller);\n\n  event ReconfigureFundingCycles(\n    uint256 configuration,\n    uint256 projectId,\n    string memo,\n    address caller\n  );\n\n  event SetFundAccessConstraints(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    JBFundAccessConstraints constraints,\n    address caller\n  );\n\n  event DistributeReservedTokens(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 tokenCount,\n    uint256 beneficiaryTokenCount,\n    string memo,\n    address caller\n  );\n\n  event DistributeToReservedTokenSplit(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    JBSplit split,\n    uint256 tokenCount,\n    address caller\n  );\n\n  event MintTokens(\n    address indexed beneficiary,\n    uint256 indexed projectId,\n    uint256 tokenCount,\n    uint256 beneficiaryTokenCount,\n    string memo,\n    uint256 reservedRate,\n    address caller\n  );\n\n  event BurnTokens(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 tokenCount,\n    string memo,\n    address caller\n  );\n\n  event Migrate(uint256 indexed projectId, IJBMigratable to, address caller);\n\n  event PrepMigration(uint256 indexed projectId, address from, address caller);\n\n  function projects() external view returns (IJBProjects);\n\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\n\n  function tokenStore() external view returns (IJBTokenStore);\n\n  function splitsStore() external view returns (IJBSplitsStore);\n\n  function directory() external view returns (IJBDirectory);\n\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    returns (uint256);\n\n  function distributionLimitOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal,\n    address _token\n  ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency);\n\n  function overflowAllowanceOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal,\n    address _token\n  ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency);\n\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    returns (uint256);\n\n  function getFundingCycleOf(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\n\n  function latestConfiguredFundingCycleOf(uint256 _projectId)\n    external\n    view\n    returns (\n      JBFundingCycle memory,\n      JBFundingCycleMetadata memory metadata,\n      JBBallotState\n    );\n\n  function currentFundingCycleOf(uint256 _projectId)\n    external\n    view\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\n\n  function queuedFundingCycleOf(uint256 _projectId)\n    external\n    view\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\n\n  function launchProjectFor(\n    address _owner,\n    JBProjectMetadata calldata _projectMetadata,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals,\n    string calldata _memo\n  ) external returns (uint256 projectId);\n\n  function launchFundingCyclesFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals,\n    string calldata _memo\n  ) external returns (uint256 configuration);\n\n  function reconfigureFundingCyclesOf(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    string calldata _memo\n  ) external returns (uint256);\n\n  function issueTokenFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external returns (IJBToken token);\n\n  function changeTokenOf(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external;\n\n  function mintTokensOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _beneficiary,\n    string calldata _memo,\n    bool _preferClaimedTokens,\n    bool _useReservedRate\n  ) external returns (uint256 beneficiaryTokenCount);\n\n  function burnTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string calldata _memo,\n    bool _preferClaimedTokens\n  ) external;\n\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\n    external\n    returns (uint256);\n\n  function migrate(uint256 _projectId, IJBMigratable _to) external;\n}\n"
    },
    "contracts/interfaces/IJBMigratable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBMigratable {\n  function prepForMigrationOf(uint256 _projectId, address _from) external;\n}\n"
    },
    "contracts/libraries/JBConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/**\n  @notice\n  Global constants used across Juicebox contracts.\n*/\nlibrary JBConstants {\n  uint256 public constant MAX_RESERVED_RATE = 10000;\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\n  uint256 public constant MAX_FEE = 1000000000;\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\n}\n"
    },
    "contracts/libraries/JBFundingCycleMetadataResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleDataSource.sol';\nimport './../structs/JBFundingCycleMetadata.sol';\nimport './../structs/JBGlobalFundingCycleMetadata.sol';\nimport './JBConstants.sol';\nimport './JBGlobalFundingCycleMetadataResolver.sol';\n\nlibrary JBFundingCycleMetadataResolver {\n  function global(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (JBGlobalFundingCycleMetadata memory metadata)\n  {\n    return JBGlobalFundingCycleMetadataResolver.expandMetadata(uint8(_fundingCycle.metadata >> 8));\n  }\n\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\n    return uint256(uint16(_fundingCycle.metadata >> 24));\n  }\n\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\n  }\n\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (uint256)\n  {\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 56));\n  }\n\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 72) & 1) == 1;\n  }\n\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 73) & 1) == 1;\n  }\n\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 74) & 1) == 1;\n  }\n\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 75) & 1) == 1;\n  }\n\n  function mintingAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 76) & 1) == 1;\n  }\n\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 77) & 1) == 1;\n  }\n\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return ((_fundingCycle.metadata >> 78) & 1) == 1;\n  }\n\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return ((_fundingCycle.metadata >> 79) & 1) == 1;\n  }\n\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 80) & 1) == 1;\n  }\n\n  function useTotalOverflowForRedemptions(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return ((_fundingCycle.metadata >> 81) & 1) == 1;\n  }\n\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return (_fundingCycle.metadata >> 82) & 1 == 1;\n  }\n\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return (_fundingCycle.metadata >> 83) & 1 == 1;\n  }\n\n  function dataSource(JBFundingCycle memory _fundingCycle) internal pure returns (address) {\n    return address(uint160(_fundingCycle.metadata >> 84));\n  }\n\n  /**\n    @notice\n    Pack the funding cycle metadata.\n\n    @param _metadata The metadata to validate and pack.\n\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\n  */\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\n    internal\n    pure\n    returns (uint256 packed)\n  {\n    // version 1 in the bits 0-7 (8 bits).\n    packed = 1;\n    // global metadta in bits 8-23 (16 bits).\n    packed |=\n      JBGlobalFundingCycleMetadataResolver.packFundingCycleGlobalMetadata(_metadata.global) <<\n      8;\n    // reserved rate in bits 24-39 (16 bits).\n    packed |= _metadata.reservedRate << 24;\n    // redemption rate in bits 40-55 (16 bits).\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 40;\n    // ballot redemption rate rate in bits 56-71 (16 bits).\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 56;\n    // pause pay in bit 72.\n    if (_metadata.pausePay) packed |= 1 << 72;\n    // pause tap in bit 73.\n    if (_metadata.pauseDistributions) packed |= 1 << 73;\n    // pause redeem in bit 74.\n    if (_metadata.pauseRedeem) packed |= 1 << 74;\n    // pause burn in bit 75.\n    if (_metadata.pauseBurn) packed |= 1 << 75;\n    // allow minting in bit 76.\n    if (_metadata.allowMinting) packed |= 1 << 76;\n    // allow change token in bit 77.\n    if (_metadata.allowChangeToken) packed |= 1 << 77;\n    // allow terminal migration in bit 78.\n    if (_metadata.allowTerminalMigration) packed |= 1 << 78;\n    // allow controller migration in bit 79.\n    if (_metadata.allowControllerMigration) packed |= 1 << 79;\n    // hold fees in bit 80.\n    if (_metadata.holdFees) packed |= 1 << 80;\n    // useTotalOverflowForRedemptions in bit 81.\n    if (_metadata.useTotalOverflowForRedemptions) packed |= 1 << 81;\n    // use pay data source in bit 82.\n    if (_metadata.useDataSourceForPay) packed |= 1 << 82;\n    // use redeem data source in bit 83.\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 83;\n    // data source address in bits 84-243.\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 84;\n  }\n\n  /**\n    @notice\n    Expand the funding cycle metadata.\n\n    @param _fundingCycle The funding cycle having its metadata expanded.\n\n    @return metadata The metadata object.\n  */\n  function expandMetadata(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (JBFundingCycleMetadata memory metadata)\n  {\n    return\n      JBFundingCycleMetadata(\n        global(_fundingCycle),\n        reservedRate(_fundingCycle),\n        redemptionRate(_fundingCycle),\n        ballotRedemptionRate(_fundingCycle),\n        payPaused(_fundingCycle),\n        distributionsPaused(_fundingCycle),\n        redeemPaused(_fundingCycle),\n        burnPaused(_fundingCycle),\n        mintingAllowed(_fundingCycle),\n        changeTokenAllowed(_fundingCycle),\n        terminalMigrationAllowed(_fundingCycle),\n        controllerMigrationAllowed(_fundingCycle),\n        shouldHoldFees(_fundingCycle),\n        useTotalOverflowForRedemptions(_fundingCycle),\n        useDataSourceForPay(_fundingCycle),\n        useDataSourceForRedeem(_fundingCycle),\n        dataSource(_fundingCycle)\n      );\n  }\n}\n"
    },
    "contracts/libraries/JBSplitsGroups.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBSplitsGroups {\n  uint256 public constant ETH_PAYOUT = 1;\n  uint256 public constant RESERVED_TOKENS = 2;\n}\n"
    },
    "prb-math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*yÃ·denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*yÃ·1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*yÃ·denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)Ã·denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the closest power of two that is higher than x.\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IJBSplitsStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../structs/JBGroupedSplits.sol';\nimport './../structs/JBSplit.sol';\nimport './IJBDirectory.sol';\nimport './IJBProjects.sol';\n\ninterface IJBSplitsStore {\n  event SetSplit(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    JBSplit split,\n    address caller\n  );\n\n  function projects() external view returns (IJBProjects);\n\n  function directory() external view returns (IJBDirectory);\n\n  function splitsOf(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) external view returns (JBSplit[] memory);\n\n  function set(\n    uint256 _projectId,\n    uint256 _domain,\n    JBGroupedSplits[] memory _groupedSplits\n  ) external;\n}\n"
    },
    "contracts/structs/JBGlobalFundingCycleMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleDataSource.sol';\n\n/** \n  @member allowSetTerminals A flag indicating if setting terminals should be allowed during this funding cycle.\n  @member allowSetController A flag indicating if setting a new controller should be allowed during this funding cycle.\n*/\nstruct JBGlobalFundingCycleMetadata {\n  bool allowSetTerminals;\n  bool allowSetController;\n}\n"
    },
    "contracts/interfaces/IJBFundingCycleDataSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './../structs/JBPayParamsData.sol';\nimport './../structs/JBRedeemParamsData.sol';\nimport './IJBFundingCycleStore.sol';\nimport './IJBPayDelegate.sol';\nimport './IJBRedemptionDelegate.sol';\n\ninterface IJBFundingCycleDataSource is IERC165 {\n  function payParams(JBPayParamsData calldata _data)\n    external\n    returns (\n      uint256 weight,\n      string memory memo,\n      IJBPayDelegate delegate\n    );\n\n  function redeemParams(JBRedeemParamsData calldata _data)\n    external\n    returns (\n      uint256 reclaimAmount,\n      string memory memo,\n      IJBRedemptionDelegate delegate\n    );\n}\n"
    },
    "contracts/interfaces/IJBPayDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './../structs/JBDidPayData.sol';\n\ninterface IJBPayDelegate is IERC165 {\n  function didPay(JBDidPayData calldata _data) external;\n}\n"
    },
    "contracts/interfaces/IJBRedemptionDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './../structs/JBDidRedeemData.sol';\n\ninterface IJBRedemptionDelegate is IERC165 {\n  function didRedeem(JBDidRedeemData calldata _data) external;\n}\n"
    },
    "contracts/structs/JBTokenAmount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/* \n  @member token The token the payment was made in.\n  @member value The amount of tokens that was paid, as a fixed point number.\n  @member decimals The number of decimals included in the value fixed point number.\n  @member currency The expected currency of the value.\n**/\nstruct JBTokenAmount {\n  address token;\n  uint256 value;\n  uint256 decimals;\n  uint256 currency;\n}\n"
    },
    "contracts/interfaces/IJBSplitAllocator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport '../structs/JBSplitAllocationData.sol';\n\ninterface IJBSplitAllocator is IERC165 {\n  function allocate(JBSplitAllocationData calldata _data) external payable;\n}\n"
    },
    "contracts/structs/JBSplitAllocationData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBSplit.sol';\n\n/** \n  @member token The token being sent to the split allocator.\n  @member amount The amount being sent to the split allocator, as a fixed point number.\n  @member decimals The number of decimals in the amount.\n  @member projectId The project to which the split belongs.\n  @member group The group to which the split belongs.\n  @member split The split that caused the allocation.\n*/\nstruct JBSplitAllocationData {\n  address token;\n  uint256 amount;\n  uint256 decimals;\n  uint256 projectId;\n  uint256 group;\n  JBSplit split;\n}\n"
    },
    "contracts/libraries/JBGlobalFundingCycleMetadataResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleDataSource.sol';\nimport './../structs/JBFundingCycleMetadata.sol';\nimport './JBConstants.sol';\n\nlibrary JBGlobalFundingCycleMetadataResolver {\n  function setTerminalsAllowed(uint8 _data) internal pure returns (bool) {\n    return (_data & 1) == 1;\n  }\n\n  function setControllerAllowed(uint8 _data) internal pure returns (bool) {\n    return ((_data >> 1) & 1) == 1;\n  }\n\n  /**\n    @notice\n    Pack the global funding cycle metadata.\n\n    @param _metadata The metadata to validate and pack.\n\n    @return packed The packed uint256 of all global metadata params. The first 8 bits specify the version.\n  */\n  function packFundingCycleGlobalMetadata(JBGlobalFundingCycleMetadata memory _metadata)\n    internal\n    pure\n    returns (uint256 packed)\n  {\n    // allow set terminals in bit 0.\n    if (_metadata.allowSetTerminals) packed |= 1;\n    // allow set controller in bit 1.\n    if (_metadata.allowSetController) packed |= 1 << 1;\n  }\n\n  /**\n    @notice\n    Expand the global funding cycle metadata.\n\n    @param _packedMetadata The packed metadata to expand.\n\n    @return metadata The global metadata object.\n  */\n  function expandMetadata(uint8 _packedMetadata)\n    internal\n    pure\n    returns (JBGlobalFundingCycleMetadata memory metadata)\n  {\n    return\n      JBGlobalFundingCycleMetadata(\n        setTerminalsAllowed(_packedMetadata),\n        setControllerAllowed(_packedMetadata)\n      );\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './../interfaces/IJBController.sol';\nimport './../interfaces/IJBPayoutRedemptionPaymentTerminal.sol';\nimport './../libraries/JBConstants.sol';\nimport './../libraries/JBCurrencies.sol';\nimport './../libraries/JBFixedPointNumber.sol';\nimport './../libraries/JBFundingCycleMetadataResolver.sol';\nimport './../libraries/JBOperations.sol';\nimport './../libraries/JBSplitsGroups.sol';\nimport './../libraries/JBTokens.sol';\nimport './../structs/JBTokenAmount.sol';\nimport './JBOperatable.sol';\nimport './JBSingleTokenPaymentTerminal.sol';\n\n/**\n  @notice\n  Generic terminal managing all inflows and outflows of funds into the protocol ecosystem.\n\n  @dev\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal of the same token type contract at any time.\n\n  @dev\n  Adheres to -\n  IJBPayoutRedemptionPaymentTerminal: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBSingleTokenPaymentTerminal: Generic terminal managing all inflows of funds into the protocol ecosystem for one token.\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n  ReentrancyGuard: Contract module that helps prevent reentrant calls to a function.\n*/\nabstract contract JBPayoutRedemptionPaymentTerminal is\n  IJBPayoutRedemptionPaymentTerminal,\n  JBSingleTokenPaymentTerminal,\n  JBOperatable,\n  Ownable,\n  ReentrancyGuard\n{\n  // A library that parses the packed funding cycle metadata into a friendlier format.\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\n\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error FEE_TOO_HIGH();\n  error INADEQUATE_DISTRIBUTION_AMOUNT();\n  error INADEQUATE_RECLAIM_AMOUNT();\n  error INADEQUATE_TOKEN_COUNT();\n  error NO_MSG_VALUE_ALLOWED();\n  error PAY_TO_ZERO_ADDRESS();\n  error PROJECT_TERMINAL_MISMATCH();\n  error REDEEM_TO_ZERO_ADDRESS();\n  error TERMINAL_IN_SPLIT_ZERO_ADDRESS();\n  error TERMINAL_TOKENS_INCOMPATIBLE();\n\n  //*********************************************************************//\n  // ---------------------------- modifiers ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    A modifier that verifies this terminal is a terminal of provided project ID.\n  */\n  modifier isTerminalOf(uint256 _projectId) {\n    if (!directory.isTerminalOf(_projectId, this)) revert PROJECT_TERMINAL_MISMATCH();\n    _;\n  }\n\n  //*********************************************************************//\n  // --------------------- internal stored constants ------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Maximum fee that can be set for a funding cycle configuration.\n\n    @dev\n    Out of MAX_FEE (50_000_000 / 1_000_000_000).\n  */\n  uint256 internal constant _FEE_CAP = 50_000_000;\n\n  /**\n    @notice\n    The protocol project ID is 1, as it should be the first project launched during the deployment process.\n  */\n  uint256 internal constant _PROTOCOL_PROJECT_ID = 1;\n\n  //*********************************************************************//\n  // --------------------- internal stored properties ------------------ //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Fees that are being held to be processed later.\n\n    _projectId The ID of the project for which fees are being held.\n  */\n  mapping(uint256 => JBFee[]) internal _heldFeesOf;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  /**\n    @notice\n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  /**\n    @notice\n    The contract that stores splits for each project.\n  */\n  IJBSplitsStore public immutable override splitsStore;\n\n  /**\n    @notice\n    The contract that exposes price feeds.\n  */\n  IJBPrices public immutable override prices;\n\n  /**\n    @notice\n    The contract that stores and manages the terminal's data.\n  */\n  IJBSingleTokenPaymentTerminalStore public immutable override store;\n\n  /**\n    @notice\n    The currency to base token issuance on.\n\n    @dev\n    If this differs from `currency`, there must be a price feed available to convert `currency` to `baseWeightCurrency`.\n  */\n  uint256 public immutable override baseWeightCurrency;\n\n  /**\n    @notice\n    The group that payout splits coming from this terminal are identified by.\n  */\n  uint256 public immutable override payoutSplitsGroup;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The platform fee percent.\n\n    @dev\n    Out of MAX_FEE (25_000_000 / 1_000_000_000)\n  */\n  uint256 public override fee = 25_000_000; // 2.5%\n\n  /**\n    @notice\n    The data source that returns a discount to apply to a project's fee.\n  */\n  IJBFeeGauge public override feeGauge;\n\n  /**\n    @notice\n    Addresses that can be paid towards from this terminal without incurring a fee.\n\n    _address The address that can be paid toward.\n  */\n  mapping(address => bool) public override isFeelessAddress;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Gets the current overflowed amount in this terminal for a specified project, in terms of ETH.\n\n    @dev\n    The current overflow is represented as a fixed point number with 18 decimals.\n\n    @param _projectId The ID of the project to get overflow for.\n\n    @return The current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals.\n  */\n  function currentEthOverflowOf(uint256 _projectId)\n    external\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    // Get this terminal's current overflow.\n    uint256 _overflow = store.currentOverflowOf(this, _projectId);\n\n    // Adjust the decimals of the fixed point number if needed to have 18 decimals.\n    uint256 _adjustedOverflow = (decimals == 18)\n      ? _overflow\n      : JBFixedPointNumber.adjustDecimals(_overflow, decimals, 18);\n\n    // Return the amount converted to ETH.\n    return\n      (currency == JBCurrencies.GAS_CURRENCY)\n        ? _adjustedOverflow\n        : PRBMath.mulDiv(\n          _adjustedOverflow,\n          10**decimals,\n          prices.priceFor(currency, JBCurrencies.GAS_CURRENCY, decimals)\n        );\n  }\n\n  /**\n    @notice\n    The fees that are currently being held to be processed later for each project.\n\n    @param _projectId The ID of the project for which fees are being held.\n\n    @return An array of fees that are being held.\n  */\n  function heldFeesOf(uint256 _projectId) external view override returns (JBFee[] memory) {\n    return _heldFeesOf[_projectId];\n  }\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(JBSingleTokenPaymentTerminal, IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBPayoutRedemptionPaymentTerminal).interfaceId ||\n      _interfaceId == type(IJBPayoutTerminal).interfaceId ||\n      _interfaceId == type(IJBAllowanceTerminal).interfaceId ||\n      _interfaceId == type(IJBRedemptionTerminal).interfaceId ||\n      _interfaceId == type(IJBOperatable).interfaceId ||\n      super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _token The token that this terminal manages.\n    @param _decimals The number of decimals the token fixed point amounts are expected to have.\n    @param _currency The currency that this terminal's token adheres to for price feeds.\n    @param _baseWeightCurrency The currency to base token issuance on.\n    @param _payoutSplitsGroup The group that denotes payout splits from this terminal in the splits store.\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _splitsStore A contract that stores splits for each project.\n    @param _prices A contract that exposes price feeds.\n    @param _store A contract that stores the terminal's data.\n    @param _owner The address that will own this contract.\n  */\n  constructor(\n    // payable constructor save the gas used to check msg.value==0\n    address _token,\n    uint256 _decimals,\n    uint256 _currency,\n    uint256 _baseWeightCurrency,\n    uint256 _payoutSplitsGroup,\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBSplitsStore _splitsStore,\n    IJBPrices _prices,\n    IJBSingleTokenPaymentTerminalStore _store,\n    address _owner\n  )\n    payable\n    JBSingleTokenPaymentTerminal(_token, _decimals, _currency)\n    JBOperatable(_operatorStore)\n  {\n    baseWeightCurrency = _baseWeightCurrency;\n    payoutSplitsGroup = _payoutSplitsGroup;\n    projects = _projects;\n    directory = _directory;\n    splitsStore = _splitsStore;\n    prices = _prices;\n    store = _store;\n\n    transferOwnership(_owner);\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Contribute tokens to a project.\n\n    @param _projectId The ID of the project being paid.\n    @param _amount The amount of terminal tokens being received, as a fixed point number with the same amount of decimals as this terminal. If this terminal's token is ETH, this is ignored and msg.value is used in its place.\n    @param _token The token being paid. This terminal ignores this property since it only manages one token. \n    @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\n    @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point number with the same amount of decimals as this terminal.\n    @param _preferClaimedTokens A flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas.\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.  A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n\n    @return The number of tokens minted for the beneficiary, as a fixed point number with 18 decimals.\n  */\n  function pay(\n    uint256 _projectId,\n    uint256 _amount,\n    address _token,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) external payable virtual override isTerminalOf(_projectId) returns (uint256) {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    // ETH shouldn't be sent if this terminal's token isn't ETH.\n    if (token != JBTokens.GAS_TOKEN) {\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\n\n      // Transfer tokens to this terminal from the msg sender.\n      _transferFrom(msg.sender, payable(address(this)), _amount);\n    }\n    // If this terminal's token is ETH, override _amount with msg.value.\n    else _amount = msg.value;\n\n    return\n      _pay(\n        _amount,\n        msg.sender,\n        _projectId,\n        _beneficiary,\n        _minReturnedTokens,\n        _preferClaimedTokens,\n        _memo,\n        _metadata\n      );\n  }\n\n  /**\n    @notice\n    Holders can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source.\n\n    @dev\n    Only a token holder or a designated operator can redeem its tokens.\n\n    @param _holder The account to redeem tokens for.\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\n    @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\n    @param _token The token being reclaimed. This terminal ignores this property since it only manages one token. \n    @param _minReturnedTokens The minimum amount of terminal tokens expected in return, as a fixed point number with the same amount of decimals as the terminal.\n    @param _beneficiary The address to send the terminal tokens to.\n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n\n    @return reclaimAmount The amount of terminal tokens that the project tokens were redeemed for, as a fixed point number with 18 decimals.\n  */\n  function redeemTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _token,\n    uint256 _minReturnedTokens,\n    address payable _beneficiary,\n    string memory _memo,\n    bytes memory _metadata\n  )\n    external\n    virtual\n    override\n    requirePermission(_holder, _projectId, JBOperations.REDEEM)\n    returns (uint256 reclaimAmount)\n  {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    return\n      _redeemTokensOf(\n        _holder,\n        _projectId,\n        _tokenCount,\n        _minReturnedTokens,\n        _beneficiary,\n        _memo,\n        _metadata\n      );\n  }\n\n  /**\n    @notice\n    Distributes payouts for a project with the distribution limit of its current funding cycle.\n\n    @dev\n    Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner.\n\n    @dev\n    Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function.\n\n    @dev\n    All funds distributed outside of this contract or any feeless terminals incure the protocol fee.\n\n    @param _projectId The ID of the project having its payouts distributed.\n    @param _amount The amount of terminal tokens to distribute, as a fixed point number with same number of decimals as this terminal.\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency.\n    @param _token The token being distributed. This terminal ignores this property since it only manages one token. \n    @param _minReturnedTokens The minimum number of terminal tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with the same number of decimals as this terminal.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return netLeftoverDistributionAmount The amount that was sent to the project owner, as a fixed point number with the same amount of decimals as this terminal.\n  */\n  function distributePayoutsOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    address _token,\n    uint256 _minReturnedTokens,\n    string calldata _memo\n  ) external virtual override returns (uint256 netLeftoverDistributionAmount) {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    return _distributePayoutsOf(_projectId, _amount, _currency, _minReturnedTokens, _memo);\n  }\n\n  /**\n    @notice\n    Allows a project to send funds from its overflow up to the preconfigured allowance.\n\n    @dev\n    Only a project's owner or a designated operator can use its allowance.\n\n    @dev\n    Incurs the protocol fee.\n\n    @param _projectId The ID of the project to use the allowance of.\n    @param _amount The amount of terminal tokens to use from this project's current allowance, as a fixed point number with the same amount of decimals as this terminal.\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency.\n    @param _token The token being distributed. This terminal ignores this property since it only manages one token. \n    @param _minReturnedTokens The minimum number of tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\n    @param _beneficiary The address to send the funds to.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return netDistributedAmount The amount of tokens that was distributed to the beneficiary, as a fixed point number with the same amount of decimals as the terminal.\n  */\n  function useAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    address _token,\n    uint256 _minReturnedTokens,\n    address payable _beneficiary,\n    string memory _memo\n  )\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE)\n    returns (uint256 netDistributedAmount)\n  {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    return _useAllowanceOf(_projectId, _amount, _currency, _minReturnedTokens, _beneficiary, _memo);\n  }\n\n  /**\n    @notice\n    Allows a project owner to migrate its funds and operations to a new terminal that accepts the same token type.\n\n    @dev\n    Only a project's owner or a designated operator can migrate it.\n\n    @param _projectId The ID of the project being migrated.\n    @param _to The terminal contract that will gain the project's funds.\n\n    @return balance The amount of funds that were migrated, as a fixed point number with the same amount of decimals as this terminal.\n  */\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to)\n    external\n    virtual\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_TERMINAL)\n    returns (uint256 balance)\n  {\n    // The terminal being migrated to must accept the same token as this terminal.\n    if (!_to.acceptsToken(token, _projectId)) revert TERMINAL_TOKENS_INCOMPATIBLE();\n\n    // Record the migration in the store.\n    balance = store.recordMigration(_projectId);\n\n    // Transfer the balance if needed.\n    if (balance > 0) {\n      // Trigger any inherited pre-transfer logic.\n      _beforeTransferTo(address(_to), balance);\n\n      // If this terminal's token is ETH, send it in msg.value.\n      uint256 _payableValue = token == JBTokens.GAS_TOKEN ? balance : 0;\n\n      // Withdraw the balance to transfer to the new terminal;\n      _to.addToBalanceOf{value: _payableValue}(_projectId, balance, token, '', bytes(''));\n    }\n\n    emit Migrate(_projectId, _to, balance, msg.sender);\n  }\n\n  /**\n    @notice\n    Receives funds belonging to the specified project.\n\n    @param _projectId The ID of the project to which the funds received belong.\n    @param _amount The amount of tokens to add, as a fixed point number with the same number of decimals as this terminal. If this is an ETH terminal, this is ignored and msg.value is used instead.\n    @param _token The token being paid. This terminal ignores this property since it only manages one currency. \n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Extra data to pass along to the emitted event.\n  */\n  function addToBalanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    address _token,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) external payable virtual override isTerminalOf(_projectId) {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    // If this terminal's token isn't ETH, make sure no msg.value was sent, then transfer the tokens in from msg.sender.\n    if (token != JBTokens.GAS_TOKEN) {\n      // Amount must be greater than 0.\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\n\n      // Transfer tokens to this terminal from the msg sender.\n      _transferFrom(msg.sender, payable(address(this)), _amount);\n    }\n    // If the terminal's token is ETH, override `_amount` with msg.value.\n    else _amount = msg.value;\n\n    // Add to balance while only refunding held fees if the funds aren't originating from a feeless terminal.\n    _addToBalanceOf(_projectId, _amount, !isFeelessAddress[msg.sender], _memo, _metadata);\n  }\n\n  /**\n    @notice\n    Process any fees that are being held for the project.\n\n    @dev\n    Only a project owner, an operator, or the contract's owner can process held fees.\n\n    @param _projectId The ID of the project whos held fees should be processed.\n  */\n  function processFees(uint256 _projectId)\n    external\n    virtual\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.PROCESS_FEES,\n      msg.sender == owner()\n    )\n  {\n    // Get a reference to the project's held fees.\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\n\n    // Delete the held fees.\n    delete _heldFeesOf[_projectId];\n\n    // Push array length in stack\n    uint256 _heldFeeLength = _heldFees.length;\n\n    // Process each fee.\n    for (uint256 _i = 0; _i < _heldFeeLength; ) {\n      // Get the fee amount.\n      uint256 _amount = _feeAmount(\n        _heldFees[_i].amount,\n        _heldFees[_i].fee,\n        _heldFees[_i].feeDiscount\n      );\n\n      // Process the fee.\n      _processFee(_amount, _heldFees[_i].beneficiary);\n\n      emit ProcessFee(_projectId, _amount, true, _heldFees[_i].beneficiary, msg.sender);\n\n      unchecked {\n        ++_i;\n      }\n    }\n  }\n\n  /**\n    @notice\n    Allows the fee to be updated.\n\n    @dev\n    Only the owner of this contract can change the fee.\n\n    @param _fee The new fee, out of MAX_FEE.\n  */\n  function setFee(uint256 _fee) external virtual override onlyOwner {\n    // The provided fee must be within the max.\n    if (_fee > _FEE_CAP) revert FEE_TOO_HIGH();\n\n    // Store the new fee.\n    fee = _fee;\n\n    emit SetFee(_fee, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows the fee gauge to be updated.\n\n    @dev\n    Only the owner of this contract can change the fee gauge.\n\n    @dev\n    If the fee gauge reverts when called upon while a project is attempting to distribute its funds, a project's funds will be locked. This is a known risk.\n\n    @param _feeGauge The new fee gauge.\n  */\n  function setFeeGauge(IJBFeeGauge _feeGauge) external virtual override onlyOwner {\n    // Store the new fee gauge.\n    feeGauge = _feeGauge;\n\n    emit SetFeeGauge(_feeGauge, msg.sender);\n  }\n\n  /**\n    @notice\n    Sets whether projects operating on this terminal can pay towards the specified address without incurring a fee.\n\n    @dev\n    Only the owner of this contract can set addresses as feeless.\n\n    @param _address The address that can be paid towards while still bypassing fees.\n    @param _flag A flag indicating whether the terminal should be feeless or not.\n  */\n  function setFeelessAddress(address _address, bool _flag) external virtual override onlyOwner {\n    // Set the flag value.\n    isFeelessAddress[_address] = _flag;\n\n    emit SetFeelessAddress(_address, _flag, msg.sender);\n  }\n\n  //*********************************************************************//\n  // ---------------------- internal transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Transfers tokens.\n\n    @param _from The address from which the transfer should originate.\n    @param _to The address to which the transfer should go.\n    @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal.\n  */\n  function _transferFrom(\n    address _from,\n    address payable _to,\n    uint256 _amount\n  ) internal virtual;\n\n  /** \n    @notice\n    Logic to be triggered before transferring tokens from this terminal.\n\n    @param _to The address to which the transfer is going.\n    @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal.\n  */\n  function _beforeTransferTo(address _to, uint256 _amount) internal virtual;\n\n  /**\n    @notice\n    Holders can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source.\n\n    @dev\n    Only a token holder or a designated operator can redeem its tokens.\n\n    @param _holder The account to redeem tokens for.\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\n    @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\n    @param _minReturnedTokens The minimum amount of terminal tokens expected in return, as a fixed point number with the same amount of decimals as the terminal.\n    @param _beneficiary The address to send the terminal tokens to.\n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n\n    @return reclaimAmount The amount of terminal tokens that the project tokens were redeemed for, as a fixed point number with 18 decimals.\n  */\n  function _redeemTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    uint256 _minReturnedTokens,\n    address payable _beneficiary,\n    string memory _memo,\n    bytes memory _metadata\n  ) internal returns (uint256 reclaimAmount) {\n    // Can't send reclaimed funds to the zero address.\n    if (_beneficiary == address(0)) revert REDEEM_TO_ZERO_ADDRESS();\n\n    // Define variables that will be needed outside the scoped section below.\n    // Keep a reference to the funding cycle during which the redemption is being made.\n    JBFundingCycle memory _fundingCycle;\n\n    // Scoped section prevents stack too deep. `_delegate` only used within scope.\n    {\n      IJBRedemptionDelegate _delegate;\n\n      // Record the redemption.\n      (_fundingCycle, reclaimAmount, _delegate, _memo) = store.recordRedemptionFor(\n        _holder,\n        _projectId,\n        _tokenCount,\n        _memo,\n        _metadata\n      );\n\n      // The amount being reclaimed must be at least as much as was expected.\n      if (reclaimAmount < _minReturnedTokens) revert INADEQUATE_RECLAIM_AMOUNT();\n\n      // Burn the project tokens.\n      if (_tokenCount > 0)\n        IJBController(directory.controllerOf(_projectId)).burnTokensOf(\n          _holder,\n          _projectId,\n          _tokenCount,\n          '',\n          false\n        );\n\n      // If a delegate was returned by the data source, issue a callback to it.\n      if (_delegate != IJBRedemptionDelegate(address(0))) {\n        JBDidRedeemData memory _data = JBDidRedeemData(\n          _holder,\n          _projectId,\n          _fundingCycle.configuration,\n          _tokenCount,\n          JBTokenAmount(token, reclaimAmount, decimals, currency),\n          _beneficiary,\n          _memo,\n          _metadata\n        );\n        _delegate.didRedeem(_data);\n        emit DelegateDidRedeem(_delegate, _data, msg.sender);\n      }\n    }\n\n    // Send the reclaimed funds to the beneficiary.\n    if (reclaimAmount > 0) _transferFrom(address(this), _beneficiary, reclaimAmount);\n\n    emit RedeemTokens(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _holder,\n      _beneficiary,\n      _tokenCount,\n      reclaimAmount,\n      _memo,\n      _metadata,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Distributes payouts for a project with the distribution limit of its current funding cycle.\n\n    @dev\n    Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner.\n\n    @dev\n    Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function.\n\n    @dev\n    All funds distributed outside of this contract or any feeless terminals incure the protocol fee.\n\n    @param _projectId The ID of the project having its payouts distributed.\n    @param _amount The amount of terminal tokens to distribute, as a fixed point number with same number of decimals as this terminal.\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency.\n    @param _minReturnedTokens The minimum number of terminal tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with the same number of decimals as this terminal.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return netLeftoverDistributionAmount The amount that was sent to the project owner, as a fixed point number with the same amount of decimals as this terminal.\n  */\n  function _distributePayoutsOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedTokens,\n    string calldata _memo\n  ) internal returns (uint256 netLeftoverDistributionAmount) {\n    // Record the distribution.\n    (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor(\n      _projectId,\n      _amount,\n      _currency\n    );\n\n    // The amount being distributed must be at least as much as was expected.\n    if (_distributedAmount < _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT();\n\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\n    // and receive any extra distributable funds not allocated to payout splits.\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\n\n    // Define variables that will be needed outside the scoped section below.\n    // Keep a reference to the fee amount that was paid.\n    uint256 _fee;\n\n    // Scoped section prevents stack too deep. `_feeDiscount`, `_feeEligibleDistributionAmount`, and `_leftoverDistributionAmount` only used within scope.\n    {\n      // Get the amount of discount that should be applied to any fees taken.\n      // If the fee is zero or if the fee is being used by an address that doesn't incur fees, set the discount to 100% for convinience.\n      uint256 _feeDiscount = fee == 0 || isFeelessAddress[msg.sender]\n        ? JBConstants.MAX_FEE_DISCOUNT\n        : _currentFeeDiscount(_projectId);\n\n      // The amount distributed that is eligible for incurring fees.\n      uint256 _feeEligibleDistributionAmount;\n\n      // The amount leftover after distributing to the splits.\n      uint256 _leftoverDistributionAmount;\n\n      // Payout to splits and get a reference to the leftover transfer amount after all splits have been paid.\n      // Also get a reference to the amount that was distributed to splits from which fees should be taken.\n      (_leftoverDistributionAmount, _feeEligibleDistributionAmount) = _distributeToPayoutSplitsOf(\n        _projectId,\n        _fundingCycle.configuration,\n        payoutSplitsGroup,\n        _distributedAmount,\n        _feeDiscount\n      );\n\n      // Leftover distribution amount is also eligible for a fee since the funds are going out of the ecosystem to _beneficiary.\n      unchecked {\n        _feeEligibleDistributionAmount += _leftoverDistributionAmount;\n      }\n\n      // Take the fee.\n      _fee = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT || _feeEligibleDistributionAmount == 0\n        ? 0\n        : _takeFeeFrom(\n          _projectId,\n          _fundingCycle,\n          _feeEligibleDistributionAmount,\n          _projectOwner,\n          _feeDiscount\n        );\n\n      // Get a reference to how much to distribute to the project owner, which is the leftover amount minus any fees.\n\n      unchecked {\n        netLeftoverDistributionAmount = _leftoverDistributionAmount == 0\n          ? 0\n          : _leftoverDistributionAmount -\n            _feeAmount(_leftoverDistributionAmount, fee, _feeDiscount);\n      }\n\n      // Transfer any remaining balance to the project owner.\n      if (netLeftoverDistributionAmount > 0)\n        _transferFrom(address(this), _projectOwner, netLeftoverDistributionAmount);\n    }\n\n    emit DistributePayouts(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _projectOwner,\n      _amount,\n      _distributedAmount,\n      _fee,\n      netLeftoverDistributionAmount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Allows a project to send funds from its overflow up to the preconfigured allowance.\n\n    @dev\n    Only a project's owner or a designated operator can use its allowance.\n\n    @dev\n    Incurs the protocol fee.\n\n    @param _projectId The ID of the project to use the allowance of.\n    @param _amount The amount of terminal tokens to use from this project's current allowance, as a fixed point number with the same amount of decimals as this terminal.\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency.\n    @param _minReturnedTokens The minimum number of tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\n    @param _beneficiary The address to send the funds to.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return netDistributedAmount The amount of tokens that was distributed to the beneficiary, as a fixed point number with the same amount of decimals as the terminal.\n  */\n  function _useAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedTokens,\n    address payable _beneficiary,\n    string memory _memo\n  ) internal returns (uint256 netDistributedAmount) {\n    // Record the use of the allowance.\n    (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordUsedAllowanceOf(\n      _projectId,\n      _amount,\n      _currency\n    );\n\n    // The amount being withdrawn must be at least as much as was expected.\n    if (_distributedAmount < _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT();\n\n    // Scoped section prevents stack too deep. `_fee`, `_projectOwner`, `_feeDiscount`, and `_netAmount` only used within scope.\n    {\n      // Keep a reference to the fee amount that was paid.\n      uint256 _fee;\n\n      // Get a reference to the project owner, which will receive tokens from paying the platform fee.\n      address _projectOwner = projects.ownerOf(_projectId);\n\n      // Get the amount of discount that should be applied to any fees taken.\n      // If the fee is zero or if the fee is being used by an address that doesn't incur fees, set the discount to 100% for convinience.\n      uint256 _feeDiscount = fee == 0 || isFeelessAddress[msg.sender]\n        ? JBConstants.MAX_FEE_DISCOUNT\n        : _currentFeeDiscount(_projectId);\n\n      // Take a fee from the `_distributedAmount`, if needed.\n      _fee = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\n        ? 0\n        : _takeFeeFrom(_projectId, _fundingCycle, _distributedAmount, _projectOwner, _feeDiscount);\n\n      unchecked {\n        // The net amount is the withdrawn amount without the fee.\n        netDistributedAmount = _distributedAmount - _fee;\n      }\n\n      // Transfer any remaining balance to the beneficiary.\n      if (netDistributedAmount > 0)\n        _transferFrom(address(this), _beneficiary, netDistributedAmount);\n    }\n\n    emit UseAllowance(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _beneficiary,\n      _amount,\n      _distributedAmount,\n      netDistributedAmount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Pays out splits for a project's funding cycle configuration.\n\n    @param _projectId The ID of the project for which payout splits are being distributed.\n    @param _domain The domain of the splits to distribute the payout between.\n    @param _group The group of the splits to distribute the payout between.\n    @param _amount The total amount being distributed, as a fixed point number with the same number of decimals as this terminal.\n    @param _feeDiscount The amount of discount to apply to the fee, out of the MAX_FEE.\n\n    @return leftoverAmount If the leftover amount if the splits don't add up to 100%.\n    @return feeEligibleDistributionAmount The total amount of distributions that are eligible to have fees taken from.\n  */\n  function _distributeToPayoutSplitsOf(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group,\n    uint256 _amount,\n    uint256 _feeDiscount\n  ) internal returns (uint256 leftoverAmount, uint256 feeEligibleDistributionAmount) {\n    // Set the leftover amount to the initial amount.\n    leftoverAmount = _amount;\n\n    // Get a reference to the project's payout splits.\n    JBSplit[] memory _splits = splitsStore.splitsOf(_projectId, _domain, _group);\n\n    // Transfer between all splits.\n    for (uint256 _i = 0; _i < _splits.length; ) {\n      // Get a reference to the split being iterated on.\n      JBSplit memory _split = _splits[_i];\n\n      // The amount to send towards the split.\n      uint256 _payoutAmount = PRBMath.mulDiv(\n        _amount,\n        _split.percent,\n        JBConstants.SPLITS_TOTAL_PERCENT\n      );\n\n      // The payout amount substracting any applicable incurred fees.\n      uint256 _netPayoutAmount;\n\n      if (_payoutAmount > 0) {\n        // Transfer tokens to the split.\n        // If there's an allocator set, transfer to its `allocate` function.\n        if (_split.allocator != IJBSplitAllocator(address(0))) {\n          // If the split allocator is set as feeless, this distribution is not eligible for a fee.\n          if (isFeelessAddress[address(_split.allocator)])\n            _netPayoutAmount = _payoutAmount;\n            // This distribution is eligible for a fee since the funds are leaving this contract and the allocator isn't listed as feeless.\n          else {\n            unchecked {\n              _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\n                ? _payoutAmount\n                : _payoutAmount - _feeAmount(_payoutAmount, fee, _feeDiscount);\n            }\n\n            // This distribution is eligible for a fee since the funds are leaving the ecosystem.\n            feeEligibleDistributionAmount += _payoutAmount;\n          }\n\n          // Trigger any inherited pre-transfer logic.\n          _beforeTransferTo(address(_split.allocator), _netPayoutAmount);\n\n          // If this terminal's token is ETH, send it in msg.value.\n          uint256 _payableValue = token == JBTokens.GAS_TOKEN ? _netPayoutAmount : 0;\n\n          // Create the data to send to the allocator.\n          JBSplitAllocationData memory _data = JBSplitAllocationData(\n            token,\n            _netPayoutAmount,\n            decimals,\n            _projectId,\n            _group,\n            _split\n          );\n\n          // Trigger the allocator's `allocate` function.\n          _split.allocator.allocate{value: _payableValue}(_data);\n\n          // Otherwise, if a project is specified, make a payment to it.\n        } else if (_split.projectId != 0) {\n          // Get a reference to the Juicebox terminal being used.\n          IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_split.projectId, token);\n\n          // The project must have a terminal to send funds to.\n          if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_IN_SPLIT_ZERO_ADDRESS();\n\n          // Save gas if this contract is being used as the terminal.\n          if (_terminal == this) {\n            // This distribution does not incur a fee.\n            _netPayoutAmount = _payoutAmount;\n\n            // Send the projectId in the metadata.\n            bytes memory _projectMetadata = new bytes(32);\n            _projectMetadata = bytes(abi.encodePacked(_projectId));\n\n            // Add to balance if prefered.\n            if (_split.preferAddToBalance)\n              _addToBalanceOf(_split.projectId, _netPayoutAmount, false, '', _projectMetadata);\n            else\n              _pay(\n                _netPayoutAmount,\n                address(this),\n                _split.projectId,\n                (_split.beneficiary != address(0)) ? _split.beneficiary : msg.sender,\n                0,\n                _split.preferClaimed,\n                '',\n                _projectMetadata\n              );\n          } else {\n            // If the terminal is set as feeless, this distribution is not eligible for a fee.\n            if (isFeelessAddress[address(_terminal)])\n              _netPayoutAmount = _payoutAmount;\n              // This distribution is eligible for a fee since the funds are leaving this contract and the terminal isn't listed as feeless.\n            else {\n              unchecked {\n                _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\n                  ? _payoutAmount\n                  : _payoutAmount - _feeAmount(_payoutAmount, fee, _feeDiscount);\n              }\n\n              feeEligibleDistributionAmount += _payoutAmount;\n            }\n\n            // Trigger any inherited pre-transfer logic.\n            _beforeTransferTo(address(_terminal), _netPayoutAmount);\n\n            // If this terminal's token is ETH, send it in msg.value.\n            uint256 _payableValue = token == JBTokens.GAS_TOKEN ? _netPayoutAmount : 0;\n\n            // Send the projectId in the metadata.\n            bytes memory _projectMetadata = new bytes(32);\n            _projectMetadata = bytes(abi.encodePacked(_projectId));\n\n            // Add to balance if prefered.\n            if (_split.preferAddToBalance)\n              _terminal.addToBalanceOf{value: _payableValue}(\n                _split.projectId,\n                _netPayoutAmount,\n                token,\n                '',\n                _projectMetadata\n              );\n            else\n              _terminal.pay{value: _payableValue}(\n                _split.projectId,\n                _netPayoutAmount,\n                token,\n                _split.beneficiary != address(0) ? _split.beneficiary : msg.sender,\n                0,\n                _split.preferClaimed,\n                '',\n                _projectMetadata\n              );\n          }\n        } else {\n          unchecked {\n            _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\n              ? _payoutAmount\n              : _payoutAmount - _feeAmount(_payoutAmount, fee, _feeDiscount);\n          }\n\n          // This distribution is eligible for a fee since the funds are leaving the ecosystem.\n          feeEligibleDistributionAmount += _payoutAmount;\n\n          // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender.\n          _transferFrom(\n            address(this),\n            _split.beneficiary != address(0) ? _split.beneficiary : payable(msg.sender),\n            _netPayoutAmount\n          );\n        }\n\n        // Subtract from the amount to be sent to the beneficiary.\n        unchecked {\n          leftoverAmount = leftoverAmount - _payoutAmount;\n        }\n      }\n\n      emit DistributeToPayoutSplit(\n        _projectId,\n        _domain,\n        _group,\n        _split,\n        _netPayoutAmount,\n        msg.sender\n      );\n\n      unchecked {\n        ++_i;\n      }\n    }\n  }\n\n  /**\n    @notice\n    Takes a fee into the platform's project, which has an id of _PROTOCOL_PROJECT_ID.\n\n    @param _projectId The ID of the project having fees taken from.\n    @param _fundingCycle The funding cycle during which the fee is being taken.\n    @param _amount The amount of the fee to take, as a floating point number with 18 decimals.\n    @param _beneficiary The address to mint the platforms tokens for.\n    @param _feeDiscount The amount of discount to apply to the fee, out of the MAX_FEE.\n\n    @return feeAmount The amount of the fee taken.\n  */\n  function _takeFeeFrom(\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _amount,\n    address _beneficiary,\n    uint256 _feeDiscount\n  ) internal returns (uint256 feeAmount) {\n    feeAmount = _feeAmount(_amount, fee, _feeDiscount);\n\n    if (_fundingCycle.shouldHoldFees()) {\n      // Store the held fee.\n      _heldFeesOf[_projectId].push(JBFee(_amount, uint32(fee), uint32(_feeDiscount), _beneficiary));\n\n      emit HoldFee(_projectId, _amount, fee, _feeDiscount, _beneficiary, msg.sender);\n    } else {\n      // Process the fee.\n      _processFee(feeAmount, _beneficiary); // Take the fee.\n\n      emit ProcessFee(_projectId, feeAmount, false, _beneficiary, msg.sender);\n    }\n  }\n\n  /**\n    @notice\n    Process a fee of the specified amount.\n\n    @param _amount The fee amount, as a floating point number with 18 decimals.\n    @param _beneficiary The address to mint the platform's tokens for.\n  */\n  function _processFee(uint256 _amount, address _beneficiary) internal {\n    // Get the terminal for the protocol project.\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_PROTOCOL_PROJECT_ID, token);\n\n    // When processing the admin fee, save gas if the admin is using this contract as its terminal.\n    if (_terminal == this)\n      _pay(_amount, address(this), _PROTOCOL_PROJECT_ID, _beneficiary, 0, false, '', bytes('')); // Use the local pay call.\n    else {\n      // Trigger any inherited pre-transfer logic.\n      _beforeTransferTo(address(_terminal), _amount);\n\n      // If this terminal's token is ETH, send it in msg.value.\n      uint256 _payableValue = token == JBTokens.GAS_TOKEN ? _amount : 0;\n\n      // Send the payment.\n      _terminal.pay{value: _payableValue}(\n        _PROTOCOL_PROJECT_ID,\n        _amount,\n        token,\n        _beneficiary,\n        0,\n        false,\n        '',\n        bytes('')\n      ); // Use the external pay call of the correct terminal.\n    }\n  }\n\n  /**\n    @notice\n    Contribute tokens to a project.\n\n    @param _amount The amount of terminal tokens being received, as a fixed point number with the same amount of decimals as this terminal. If this terminal's token is ETH, this is ignored and msg.value is used in its place.\n    @param _payer The address making the payment.\n    @param _projectId The ID of the project being paid.\n    @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\n    @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point number with the same amount of decimals as this terminal.\n    @param _preferClaimedTokens A flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas.\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.  A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n\n    @return beneficiaryTokenCount The number of tokens minted for the beneficiary, as a fixed point number with 18 decimals.\n  */\n  function _pay(\n    uint256 _amount,\n    address _payer,\n    uint256 _projectId,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string memory _memo,\n    bytes memory _metadata\n  ) internal returns (uint256 beneficiaryTokenCount) {\n    // Cant send tokens to the zero address.\n    if (_beneficiary == address(0)) revert PAY_TO_ZERO_ADDRESS();\n\n    // Define variables that will be needed outside the scoped section below.\n    // Keep a reference to the funding cycle during which the payment is being made.\n    JBFundingCycle memory _fundingCycle;\n\n    // Scoped section prevents stack too deep. `_delegate` and `_tokenCount` only used within scope.\n    {\n      IJBPayDelegate _delegate;\n      uint256 _tokenCount;\n\n      // Bundle the amount info into a JBTokenAmount struct.\n      JBTokenAmount memory _bundledAmount = JBTokenAmount(token, _amount, decimals, currency);\n\n      // Record the payment.\n      (_fundingCycle, _tokenCount, _delegate, _memo) = store.recordPaymentFrom(\n        _payer,\n        _bundledAmount,\n        _projectId,\n        baseWeightCurrency,\n        _beneficiary,\n        _memo,\n        _metadata\n      );\n\n      // Mint the tokens if needed.\n      if (_tokenCount > 0)\n        // Set token count to be the number of tokens minted for the beneficiary instead of the total amount.\n        beneficiaryTokenCount = IJBController(directory.controllerOf(_projectId)).mintTokensOf(\n          _projectId,\n          _tokenCount,\n          _beneficiary,\n          '',\n          _preferClaimedTokens,\n          true\n        );\n\n      // The token count for the beneficiary must be greater than or equal to the minimum expected.\n      if (beneficiaryTokenCount < _minReturnedTokens) revert INADEQUATE_TOKEN_COUNT();\n\n      // If a delegate was returned by the data source, issue a callback to it.\n      if (_delegate != IJBPayDelegate(address(0))) {\n        JBDidPayData memory _data = JBDidPayData(\n          _payer,\n          _projectId,\n          _fundingCycle.configuration,\n          _bundledAmount,\n          beneficiaryTokenCount,\n          _beneficiary,\n          _preferClaimedTokens,\n          _memo,\n          _metadata\n        );\n\n        _delegate.didPay(_data);\n        emit DelegateDidPay(_delegate, _data, msg.sender);\n      }\n    }\n\n    emit Pay(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _payer,\n      _beneficiary,\n      _amount,\n      beneficiaryTokenCount,\n      _memo,\n      _metadata,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Receives funds belonging to the specified project.\n\n    @param _projectId The ID of the project to which the funds received belong.\n    @param _amount The amount of tokens to add, as a fixed point number with the same number of decimals as this terminal. If this is an ETH terminal, this is ignored and msg.value is used instead.\n    @param _shouldRefundHeldFees A flag indicating if held fees should be refunded based on the amount being added.\n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Extra data to pass along to the emitted event.\n  */\n  function _addToBalanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    bool _shouldRefundHeldFees,\n    string memory _memo,\n    bytes memory _metadata\n  ) internal {\n    // Refund any held fees to make sure the project doesn't pay double for funds going in and out of the protocol.\n    uint256 _refundedFees = _shouldRefundHeldFees ? _refundHeldFees(_projectId, _amount) : 0;\n\n    // Record the added funds with any refunded fees.\n    store.recordAddedBalanceFor(_projectId, _amount + _refundedFees);\n\n    emit AddToBalance(_projectId, _amount, _refundedFees, _memo, _metadata, msg.sender);\n  }\n\n  /**\n    @notice\n    Refund fees based on the specified amount.\n\n    @param _projectId The project for which fees are being refunded.\n    @param _amount The amount to base the refund on, as a fixed point number with the same amount of decimals as this terminal.\n\n    @return refundedFees How much fees were refunded, as a fixed point number with the same number of decimals as this terminal\n  */\n  function _refundHeldFees(uint256 _projectId, uint256 _amount)\n    internal\n    returns (uint256 refundedFees)\n  {\n    // Get a reference to the project's held fees.\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\n\n    // Delete the current held fees.\n    delete _heldFeesOf[_projectId];\n\n    // Get a reference to the leftover amount once all fees have been settled.\n    uint256 leftoverAmount = _amount;\n\n    // Push length in stack\n    uint256 _heldFeesLength = _heldFees.length;\n\n    // Process each fee.\n    for (uint256 _i = 0; _i < _heldFeesLength; ) {\n      if (leftoverAmount == 0) _heldFeesOf[_projectId].push(_heldFees[_i]);\n      else if (leftoverAmount >= _heldFees[_i].amount) {\n        unchecked {\n          leftoverAmount = leftoverAmount - _heldFees[_i].amount;\n          refundedFees += _feeAmount(\n            _heldFees[_i].amount,\n            _heldFees[_i].fee,\n            _heldFees[_i].feeDiscount\n          );\n        }\n      } else {\n        _heldFeesOf[_projectId].push(\n          JBFee(\n            _heldFees[_i].amount - leftoverAmount,\n            _heldFees[_i].fee,\n            _heldFees[_i].feeDiscount,\n            _heldFees[_i].beneficiary\n          )\n        );\n        unchecked {\n          refundedFees += _feeAmount(leftoverAmount, _heldFees[_i].fee, _heldFees[_i].feeDiscount);\n        }\n        leftoverAmount = 0;\n      }\n\n      unchecked {\n        ++_i;\n      }\n    }\n\n    emit RefundHeldFees(_projectId, _amount, refundedFees, leftoverAmount, msg.sender);\n  }\n\n  /** \n    @notice \n    Returns the fee amount based on the provided amount for the specified project.\n\n    @param _amount The amount that the fee is based on, as a fixed point number with the same amount of decimals as this terminal.\n    @param _fee The percentage of the fee, out of MAX_FEE. \n    @param _feeDiscount The percentage discount that should be applied out of the max amount, out of MAX_FEE_DISCOUNT.\n\n    @return The amount of the fee, as a fixed point number with the same amount of decimals as this terminal.\n  */\n  function _feeAmount(\n    uint256 _amount,\n    uint256 _fee,\n    uint256 _feeDiscount\n  ) internal pure returns (uint256) {\n    // Calculate the discounted fee.\n    uint256 _discountedFee = _fee -\n      PRBMath.mulDiv(_fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\n\n    // The amount of tokens from the `_amount` to pay as a fee.\n    return\n      _amount - PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE);\n  }\n\n  /** \n    @notice\n    Get the fee discount from the fee gauge for the specified project.\n\n    @param _projectId The ID of the project to get a fee discount for.\n    \n    @return feeDiscount The fee discount, which should be interpreted as a percentage out MAX_FEE_DISCOUNT.\n  */\n  function _currentFeeDiscount(uint256 _projectId) internal view returns (uint256 feeDiscount) {\n    // Can't take a fee if the protocol project doesn't have a terminal that accepts the token.\n    if (directory.primaryTerminalOf(_PROTOCOL_PROJECT_ID, token) == IJBPaymentTerminal(address(0)))\n      return JBConstants.MAX_FEE_DISCOUNT;\n\n    // Get the fee discount.\n    if (feeGauge == IJBFeeGauge(address(0)))\n      feeDiscount = 0;\n      // If the guage reverts, set the discount to 0.\n    else\n      try feeGauge.currentDiscountFor(_projectId) returns (uint256 discount) {\n        feeDiscount = discount;\n      } catch {\n        feeDiscount = 0;\n      }\n\n    // If the fee discount is greater than the max, nullify the discount.\n    if (feeDiscount > JBConstants.MAX_FEE_DISCOUNT) feeDiscount = 0;\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IJBPayoutRedemptionPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport './../structs/JBFee.sol';\nimport './IJBAllowanceTerminal.sol';\nimport './IJBDirectory.sol';\nimport './IJBFeeGauge.sol';\nimport './IJBPayDelegate.sol';\nimport './IJBPaymentTerminal.sol';\nimport './IJBPayoutTerminal.sol';\nimport './IJBPrices.sol';\nimport './IJBProjects.sol';\nimport './IJBRedemptionDelegate.sol';\nimport './IJBRedemptionTerminal.sol';\nimport './IJBSingleTokenPaymentTerminal.sol';\nimport './IJBSingleTokenPaymentTerminalStore.sol';\nimport './IJBSplitsStore.sol';\n\ninterface IJBPayoutRedemptionPaymentTerminal is\n  IJBPaymentTerminal,\n  IJBPayoutTerminal,\n  IJBAllowanceTerminal,\n  IJBRedemptionTerminal\n{\n  event AddToBalance(\n    uint256 indexed projectId,\n    uint256 amount,\n    uint256 refundedFees,\n    string memo,\n    bytes metadata,\n    address caller\n  );\n\n  event Migrate(\n    uint256 indexed projectId,\n    IJBPaymentTerminal indexed to,\n    uint256 amount,\n    address caller\n  );\n\n  event DistributePayouts(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 amount,\n    uint256 distributedAmount,\n    uint256 fee,\n    uint256 beneficiaryDistributionAmount,\n    string memo,\n    address caller\n  );\n\n  event UseAllowance(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 amount,\n    uint256 distributedAmount,\n    uint256 netDistributedamount,\n    string memo,\n    address caller\n  );\n\n  event HoldFee(\n    uint256 indexed projectId,\n    uint256 indexed amount,\n    uint256 indexed fee,\n    uint256 feeDiscount,\n    address beneficiary,\n    address caller\n  );\n\n  event ProcessFee(\n    uint256 indexed projectId,\n    uint256 indexed amount,\n    bool indexed wasHeld,\n    address beneficiary,\n    address caller\n  );\n\n  event RefundHeldFees(\n    uint256 indexed projectId,\n    uint256 indexed amount,\n    uint256 indexed refundedFees,\n    uint256 leftoverAmount,\n    address caller\n  );\n\n  event Pay(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address payer,\n    address beneficiary,\n    uint256 amount,\n    uint256 beneficiaryTokenCount,\n    string memo,\n    bytes metadata,\n    address caller\n  );\n\n  event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data, address caller);\n\n  event RedeemTokens(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address holder,\n    address beneficiary,\n    uint256 tokenCount,\n    uint256 reclaimedAmount,\n    string memo,\n    bytes metadata,\n    address caller\n  );\n\n  event DelegateDidRedeem(\n    IJBRedemptionDelegate indexed delegate,\n    JBDidRedeemData data,\n    address caller\n  );\n\n  event DistributeToPayoutSplit(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    JBSplit split,\n    uint256 amount,\n    address caller\n  );\n\n  event SetFee(uint256 fee, address caller);\n\n  event SetFeeGauge(IJBFeeGauge indexed feeGauge, address caller);\n\n  event SetFeelessAddress(address indexed addrs, bool indexed flag, address caller);\n\n  function projects() external view returns (IJBProjects);\n\n  function splitsStore() external view returns (IJBSplitsStore);\n\n  function directory() external view returns (IJBDirectory);\n\n  function prices() external view returns (IJBPrices);\n\n  function store() external view returns (IJBSingleTokenPaymentTerminalStore);\n\n  function baseWeightCurrency() external view returns (uint256);\n\n  function payoutSplitsGroup() external view returns (uint256);\n\n  function heldFeesOf(uint256 _projectId) external view returns (JBFee[] memory);\n\n  function fee() external view returns (uint256);\n\n  function feeGauge() external view returns (IJBFeeGauge);\n\n  function isFeelessAddress(address _contract) external view returns (bool);\n\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to) external returns (uint256 balance);\n\n  function processFees(uint256 _projectId) external;\n\n  function setFee(uint256 _fee) external;\n\n  function setFeeGauge(IJBFeeGauge _feeGauge) external;\n\n  function setFeelessAddress(address _contract, bool _flag) external;\n}\n"
    },
    "contracts/libraries/JBCurrencies.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBCurrencies {\n  uint256 public constant ETH = 1;\n  uint256 public constant USD = 2;\n}\n"
    },
    "contracts/libraries/JBFixedPointNumber.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBFixedPointNumber {\n  function adjustDecimals(\n    uint256 _value,\n    uint256 _decimals,\n    uint256 _targetDecimals\n  ) internal pure returns (uint256) {\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\n    if (_targetDecimals == _decimals) return _value;\n    else if (_targetDecimals > _decimals) return _value * 10**(_targetDecimals - _decimals);\n    else return _value / 10**(_decimals - _targetDecimals);\n  }\n}\n"
    },
    "contracts/libraries/JBTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBTokens {\n  /** \n    @notice \n    The ETH token address in Juicebox is represented by 0x000000000000000000000000000000000000EEEe.\n  */\n  address public constant ETH = address(0x000000000000000000000000000000000000EEEe);\n}\n"
    },
    "contracts/abstract/JBSingleTokenPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport './../interfaces/IJBSingleTokenPaymentTerminal.sol';\n\n/**\n  @notice\n  Generic terminal managing all inflows of funds into the protocol ecosystem for one token.\n\n  @dev\n  Adheres to -\n  IJBSingleTokenPaymentTerminals: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\nabstract contract JBSingleTokenPaymentTerminal is IJBSingleTokenPaymentTerminal, ERC165 {\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The token that this terminal accepts.\n  */\n  address public immutable override token;\n\n  /**\n    @notice\n    The number of decimals the token fixed point amounts are expected to have.\n  */\n  uint256 public immutable override decimals;\n\n  /**\n    @notice\n    The currency to use when resolving price feeds for this terminal.\n  */\n  uint256 public immutable override currency;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    A flag indicating if this terminal accepts the specified token.\n\n    @param _token The token to check if this terminal accepts or not.\n    @param _projectId The project ID to check for token acceptance.\n\n    @return The flag.\n  */\n  function acceptsToken(address _token, uint256 _projectId) external view override returns (bool) {\n    _projectId; // Prevents unused var compiler and natspec complaints.\n\n    return _token == token;\n  }\n\n  /** \n    @notice\n    The decimals that should be used in fixed number accounting for the specified token.\n\n    @param _token The token to check for the decimals of.\n\n    @return The number of decimals for the token.\n  */\n  function decimalsForToken(address _token) external view override returns (uint256) {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    return decimals;\n  }\n\n  /** \n    @notice\n    The currency that should be used for the specified token.\n\n    @param _token The token to check for the currency of.\n\n    @return The currency index.\n  */\n  function currencyForToken(address _token) external view override returns (uint256) {\n    _token; // Prevents unused var compiler and natspec complaints.\n\n    return currency;\n  }\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBPaymentTerminal).interfaceId ||\n      _interfaceId == type(IJBSingleTokenPaymentTerminal).interfaceId ||\n      super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _token The token that this terminal manages.\n    @param _decimals The number of decimals the token fixed point amounts are expected to have.\n    @param _currency The currency that this terminal's token adheres to for price feeds.\n  */\n  constructor(\n    address _token,\n    uint256 _decimals,\n    uint256 _currency\n  ) {\n    token = _token;\n    decimals = _decimals;\n    currency = _currency;\n  }\n}\n"
    },
    "contracts/interfaces/IJBAllowanceTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBAllowanceTerminal {\n  function useAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    address _token,\n    uint256 _minReturnedTokens,\n    address payable _beneficiary,\n    string calldata _memo\n  ) external returns (uint256 netDistributedAmount);\n}\n"
    },
    "contracts/interfaces/IJBFeeGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBFeeGauge {\n  function currentDiscountFor(uint256 _projectId) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IJBPayoutTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBPayoutTerminal {\n  function distributePayoutsOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    address _token,\n    uint256 _minReturnedTokens,\n    string calldata _memo\n  ) external returns (uint256 netLeftoverDistributionAmount);\n}\n"
    },
    "contracts/interfaces/IJBPrices.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBPriceFeed.sol';\n\ninterface IJBPrices {\n  event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed);\n\n  function feedFor(uint256 _currency, uint256 _base) external view returns (IJBPriceFeed);\n\n  function priceFor(\n    uint256 _currency,\n    uint256 _base,\n    uint256 _decimals\n  ) external view returns (uint256);\n\n  function addFeedFor(\n    uint256 _currency,\n    uint256 _base,\n    IJBPriceFeed _priceFeed\n  ) external;\n}\n"
    },
    "contracts/interfaces/IJBRedemptionTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBRedemptionTerminal {\n  function redeemTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _token,\n    uint256 _minReturnedTokens,\n    address payable _beneficiary,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) external returns (uint256 reclaimAmount);\n}\n"
    },
    "contracts/interfaces/IJBSingleTokenPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBPaymentTerminal.sol';\n\ninterface IJBSingleTokenPaymentTerminal is IJBPaymentTerminal {\n  function token() external view returns (address);\n\n  function currency() external view returns (uint256);\n\n  function decimals() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IJBSingleTokenPaymentTerminalStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../structs/JBFundingCycle.sol';\nimport './../structs/JBTokenAmount.sol';\nimport './IJBDirectory.sol';\nimport './IJBFundingCycleStore.sol';\nimport './IJBPayDelegate.sol';\nimport './IJBPrices.sol';\nimport './IJBRedemptionDelegate.sol';\nimport './IJBSingleTokenPaymentTerminal.sol';\n\ninterface IJBSingleTokenPaymentTerminalStore {\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\n\n  function directory() external view returns (IJBDirectory);\n\n  function prices() external view returns (IJBPrices);\n\n  function balanceOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId)\n    external\n    view\n    returns (uint256);\n\n  function usedDistributionLimitOf(\n    IJBSingleTokenPaymentTerminal _terminal,\n    uint256 _projectId,\n    uint256 _fundingCycleNumber\n  ) external view returns (uint256);\n\n  function usedOverflowAllowanceOf(\n    IJBSingleTokenPaymentTerminal _terminal,\n    uint256 _projectId,\n    uint256 _fundingCycleConfiguration\n  ) external view returns (uint256);\n\n  function currentOverflowOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId)\n    external\n    view\n    returns (uint256);\n\n  function currentTotalOverflowOf(\n    uint256 _projectId,\n    uint256 _decimals,\n    uint256 _currency\n  ) external view returns (uint256);\n\n  function currentReclaimableOverflowOf(\n    IJBSingleTokenPaymentTerminal _terminal,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    bool _useTotalOverflow\n  ) external view returns (uint256);\n\n  function currentReclaimableOverflowOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    uint256 _totalSupply,\n    uint256 _overflow\n  ) external view returns (uint256);\n\n  function recordPaymentFrom(\n    address _payer,\n    JBTokenAmount memory _amount,\n    uint256 _projectId,\n    uint256 _baseWeightCurrency,\n    address _beneficiary,\n    string calldata _memo,\n    bytes calldata _metadata\n  )\n    external\n    returns (\n      JBFundingCycle memory fundingCycle,\n      uint256 tokenCount,\n      IJBPayDelegate delegate,\n      string memory memo\n    );\n\n  function recordRedemptionFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string calldata _memo,\n    bytes calldata _metadata\n  )\n    external\n    returns (\n      JBFundingCycle memory fundingCycle,\n      uint256 reclaimAmount,\n      IJBRedemptionDelegate delegate,\n      string memory memo\n    );\n\n  function recordDistributionFor(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency\n  ) external returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount);\n\n  function recordUsedAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency\n  ) external returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount);\n\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount) external;\n\n  function recordMigration(uint256 _projectId) external returns (uint256 balance);\n}\n"
    },
    "contracts/interfaces/IJBPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBPriceFeed {\n  function currentPrice(uint256 _targetDecimals) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/draft-ERC721Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (token/ERC721/extensions/draft-ERC721Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../governance/utils/Votes.sol\";\n\n/**\n * @dev Extension of ERC721 to support voting and delegation as implemented by {Votes}, where each individual NFT counts\n * as 1 vote unit.\n *\n * Tokens do not count as votes until they are delegated, because votes must be tracked which incurs an additional cost\n * on every transfer. Token holders can either delegate to a trusted representative who will decide how to make use of\n * the votes in governance decisions, or they can delegate to themselves to be their own representative.\n *\n * _Available since v4.5._\n */\nabstract contract ERC721Votes is ERC721, Votes {\n    /**\n     * @dev Adjusts votes when tokens are transferred.\n     *\n     * Emits a {Votes-DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        _transferVotingUnits(from, to, 1);\n        super._afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the balance of `account`.\n     */\n    function _getVotingUnits(address account) internal virtual override returns (uint256) {\n        return balanceOf(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/governance/utils/Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (governance/utils/Votes.sol)\npragma solidity ^0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Counters.sol\";\nimport \"../../utils/Checkpoints.sol\";\nimport \"../../utils/cryptography/draft-EIP712.sol\";\nimport \"./IVotes.sol\";\n\n/**\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\n * \"representative\" that will pool delegated voting units from different accounts and can then use it to vote in\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\n *\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\n * example, see {ERC721Votes}.\n *\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\n * cost of this history tracking optional.\n *\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\n * previous example, it would be included in {ERC721-_beforeTokenTransfer}).\n *\n * _Available since v4.5._\n */\nabstract contract Votes is IVotes, Context, EIP712 {\n    using Checkpoints for Checkpoints.History;\n    using Counters for Counters.Counter;\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegation;\n    mapping(address => Checkpoints.History) private _delegateCheckpoints;\n    Checkpoints.History private _totalCheckpoints;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) public view virtual override returns (uint256) {\n        return _delegateCheckpoints[account].latest();\n    }\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return _delegateCheckpoints[account].getAtBlock(blockNumber);\n    }\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\n        require(blockNumber < block.number, \"Votes: block not yet mined\");\n        return _totalCheckpoints.getAtBlock(blockNumber);\n    }\n\n    /**\n     * @dev Returns the current total supply of votes.\n     */\n    function _getTotalSupply() internal view virtual returns (uint256) {\n        return _totalCheckpoints.latest();\n    }\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) public view virtual override returns (address) {\n        return _delegation[account];\n    }\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual override {\n        address account = _msgSender();\n        _delegate(account, delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= expiry, \"Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address account, address delegatee) internal virtual {\n        address oldDelegate = delegates(account);\n        _delegation[account] = delegatee;\n\n        emit DelegateChanged(account, oldDelegate, delegatee);\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\n    }\n\n    /**\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\n     */\n    function _transferVotingUnits(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if (from == address(0)) {\n            _totalCheckpoints.push(_add, amount);\n        }\n        if (to == address(0)) {\n            _totalCheckpoints.push(_subtract, amount);\n        }\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Moves delegated votes from one delegate to another.\n     */\n    function _moveDelegateVotes(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        if (from != to && amount > 0) {\n            if (from != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _delegateCheckpoints[from].push(_subtract, amount);\n                emit DelegateVotesChanged(from, oldValue, newValue);\n            }\n            if (to != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _delegateCheckpoints[to].push(_add, amount);\n                emit DelegateVotesChanged(to, oldValue, newValue);\n            }\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev Returns an address nonce.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev Returns the contract's {EIP712} domain separator.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev Must return the voting units held by an account.\n     */\n    function _getVotingUnits(address) internal virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Checkpoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/Checkpoints.sol)\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SafeCast.sol\";\n\n/**\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n *\n * _Available since v4.5._\n */\nlibrary Checkpoints {\n    struct Checkpoint {\n        uint32 _blockNumber;\n        uint224 _value;\n    }\n\n    struct History {\n        Checkpoint[] _checkpoints;\n    }\n\n    /**\n     * @dev Returns the value in the latest checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(History storage self) internal view returns (uint256) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : self._checkpoints[pos - 1]._value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise.\n     */\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n\n        uint256 high = self._checkpoints.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (self._checkpoints[mid]._blockNumber > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high == 0 ? 0 : self._checkpoints[high - 1]._value;\n    }\n\n    /**\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\n     *\n     * Returns previous value and new value.\n     */\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\n        uint256 pos = self._checkpoints.length;\n        uint256 old = latest(self);\n        if (pos > 0 && self._checkpoints[pos - 1]._blockNumber == block.number) {\n            self._checkpoints[pos - 1]._value = SafeCast.toUint224(value);\n        } else {\n            self._checkpoints.push(\n                Checkpoint({_blockNumber: SafeCast.toUint32(block.number), _value: SafeCast.toUint224(value)})\n            );\n        }\n        return (old, value);\n    }\n\n    /**\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\n     * be set to `op(latest, delta)`.\n     *\n     * Returns previous value and new value.\n     */\n    function push(\n        History storage self,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) internal returns (uint256, uint256) {\n        return push(self, op(latest(self), delta));\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/utils/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/system_tests/TestTokenFlow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\n\n/// @notice This file tests JBToken related flows\ncontract TestTokenFlow is TestBaseWorkflow {\n  JBController private _controller;\n  JBTokenStore private _tokenStore;\n\n  JBProjectMetadata private _projectMetadata;\n  JBFundingCycleData private _data;\n  JBFundingCycleMetadata private _metadata;\n  JBGroupedSplits[] private _groupedSplits; // Default empty\n  JBFundAccessConstraints[] private _fundAccessConstraints; // Default empty\n  IJBPaymentTerminal[] private _terminals; // Default empty\n\n  uint256 private _projectId;\n  address private _projectOwner;\n  uint256 private _reservedRate = 5000;\n\n  function setUp() public override {\n    super.setUp();\n\n    _controller = jbController();\n    _tokenStore = jbTokenStore();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: 1000 * 10**18,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: _reservedRate,\n      redemptionRate: 5000, //50%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: true,\n      allowChangeToken: true,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _projectOwner = multisig();\n\n    _projectId = _controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n  }\n\n  /**\n   * @notice tests the following flow with fuzzed values:\n   * launch project â†’ issue token â†’ change token â†’ mint token â†’ burn token\n   */\n  function testFuzzTokenFlow(\n    uint256 mintAmount,\n    uint256 burnAmount,\n    bool mintPreferClaimed,\n    bool burnPreferClaimed\n  ) public {\n    // Might overflow in processed token tracker if burn amount >= max int256 (ie (2**256)/2 -1 )\n    evm.assume(burnAmount < (2**256)/2);\n    \n    // calls will originate from projectOwner addr\n    evm.startPrank(_projectOwner);\n\n    // issue an ERC-20 token for project\n    _controller.issueTokenFor(_projectId, 'TestName', 'TestSymbol');\n\n    // create a new IJBToken and change it's owner to the tokenStore\n    IJBToken _newToken = new JBToken('NewTestName', 'NewTestSymbol');\n    _newToken.transferOwnership(_projectId, address(_tokenStore));\n\n    // change the projects token to _newToken\n    _controller.changeTokenOf(_projectId, _newToken, address(0));\n\n    // confirm the project's new JBToken\n    assertEq(address(_tokenStore.tokenOf(_projectId)), address(_newToken));\n\n    address _beneficiary = address(1234);\n    uint256 _expectedTokenBalance = 0;\n    uint256 _beneficiaryTokenAmount = mintAmount / 2; // 50% reserved rate results in half the mintAmount\n\n    if (mintAmount == 0) evm.expectRevert(abi.encodeWithSignature('ZERO_TOKENS_TO_MINT()'));\n    else _expectedTokenBalance = _beneficiaryTokenAmount;\n\n    // mint tokens to beneficiary addr\n    _controller.mintTokensOf(\n      _projectId,\n      mintAmount,\n      _beneficiary,\n      'Mint memo',\n      mintPreferClaimed,\n      true /*use reserved rate*/\n    );\n\n    // total token balance should be half of token count due to 50% reserved rate\n    assertEq(_tokenStore.balanceOf(_beneficiary, _projectId), _expectedTokenBalance);\n\n    if (burnAmount == 0) evm.expectRevert(abi.encodeWithSignature('NO_BURNABLE_TOKENS()'));\n    else if (burnAmount > _expectedTokenBalance)\n      evm.expectRevert(abi.encodeWithSignature('INSUFFICIENT_FUNDS()'));\n    else _expectedTokenBalance = _expectedTokenBalance - burnAmount;\n\n    // burn tokens from beneficiary addr\n    // next call will originate from holder addr\n    evm.stopPrank();\n    evm.prank(_beneficiary);\n    _controller.burnTokensOf(\n      _beneficiary,\n      _projectId,\n      /* _tokenCount */\n      burnAmount,\n      'Burn memo',\n      burnPreferClaimed\n    );\n\n    // total balance of tokens should be updated\n    assertEq(_tokenStore.balanceOf(_beneficiary, _projectId), _expectedTokenBalance);\n  }\n\n  /**\n   * @notice tests the following corner case:\n   * launch project â†’ issue token â†’ mint max claimed tokens â†’ mint max unclaimed tokens â†’ try to claim unclaimed tokens\n   */\n  function testLargeTokenClaimFlow() public {\n    // calls will originate from projectOwner addr\n    evm.startPrank(_projectOwner);\n\n    // issue an ERC-20 token for project\n    _controller.issueTokenFor(_projectId, 'TestName', 'TestSymbol');\n\n    address _beneficiary = address(1234);\n\n    // mint claimed tokens to beneficiary addr\n    _controller.mintTokensOf(\n      _projectId,\n      type(uint224).max,\n      _beneficiary,\n      'Mint memo',\n      true,\n      false /*use reserved rate*/\n    );\n\n    // mint unclaimed tokens to beneficiary addr\n    _controller.mintTokensOf(\n      _projectId,\n      type(uint256).max,\n      _beneficiary,\n      'Mint memo',\n      false,\n      false\n    );\n\n    // try to claim the unclaimed tokens\n    evm.stopPrank();\n    evm.prank(_beneficiary);\n    _tokenStore.claimFor(\n      _beneficiary,\n      _projectId,\n      /* _amount */\n      1\n    );\n  }\n\n  /**\n   * @notice tests the following corner case:\n   * launch project â†’ issue token â†’ mint unclaimed tokens â†’ switch to new token â†’ claim unclaimed tokens of the new token\n   */\n  function testTokenChangeFlow() public {\n    // calls will originate from projectOwner addr\n    evm.startPrank(_projectOwner);\n\n    // issue an ERC-20 token for project\n    _controller.issueTokenFor(_projectId, 'TestName', 'TestSymbol');\n\n    address _beneficiary = address(1234);\n\n    // mint unclaimed tokens to beneficiary addr\n    _controller.mintTokensOf(\n      _projectId,\n      type(uint256).max,\n      _beneficiary,\n      'Mint memo',\n      false,\n      false\n    );\n\n    // create a new IJBToken and change it's owner to the tokenStore\n    IJBToken _newToken = new JBToken('NewTestName', 'NewTestSymbol');\n    _newToken.transferOwnership(_projectId, address(_tokenStore));\n\n    // change the projects token to _newToken\n    _controller.changeTokenOf(_projectId, _newToken, address(0));\n\n    // claim and mint the max possible amount of unclaimed tokens\n    evm.stopPrank();\n    evm.prank(_beneficiary);\n    _tokenStore.claimFor(_beneficiary, _projectId, type(uint224).max);\n\n    // total token balanced should be updated\n    assertEq(_newToken.balanceOf(_beneficiary, _projectId), type(uint224).max);\n    assertEq(\n      _tokenStore.unclaimedBalanceOf(_beneficiary, _projectId),\n      type(uint256).max - type(uint224).max\n    );\n    assertEq(_tokenStore.unclaimedTotalSupplyOf(_projectId), type(uint256).max - type(uint224).max);\n    assertEq(_tokenStore.balanceOf(_beneficiary, _projectId), type(uint256).max);\n  }\n}\n"
    },
    "contracts/system_tests/TestReconfigure.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\n\nimport '../JBReconfigurationBufferBallot.sol';\n\nuint256 constant WEIGHT = 1000 * 10**18;\n\ncontract TestReconfigureProject is TestBaseWorkflow {\n  JBController controller;\n  JBProjectMetadata _projectMetadata;\n  JBFundingCycleData _data;\n  JBFundingCycleData _dataReconfiguration;\n  JBFundingCycleData _dataWithoutBallot;\n  JBFundingCycleMetadata _metadata;\n  JBReconfigurationBufferBallot _ballot;\n  JBGroupedSplits[] _groupedSplits; // Default empty\n  JBFundAccessConstraints[] _fundAccessConstraints; // Default empty\n  IJBPaymentTerminal[] _terminals; // Default empty\n\n  uint256 BALLOT_DURATION = 3 days;\n\n  function setUp() public override {\n    super.setUp();\n\n    controller = jbController();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _ballot = new JBReconfigurationBufferBallot(BALLOT_DURATION, jbFundingCycleStore());\n\n    _data = JBFundingCycleData({\n      duration: 6 days,\n      weight: 10000 * 10**18,\n      discountRate: 0,\n      ballot: _ballot\n    });\n\n    _dataWithoutBallot = JBFundingCycleData({\n      duration: 6 days,\n      weight: 1000 * 10**18,\n      discountRate: 0,\n      ballot: JBReconfigurationBufferBallot(address(0))\n    });\n\n    _dataReconfiguration = JBFundingCycleData({\n      duration: 6 days,\n      weight: 69 * 10**18,\n      discountRate: 0,\n      ballot: JBReconfigurationBufferBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 5000,\n      redemptionRate: 5000,\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: true,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _terminals = [jbETHPaymentTerminal()];\n  }\n\n  function testReconfigureProject() public {\n    uint256 projectId = controller.launchProjectFor(\n      multisig(),\n      _projectMetadata,\n      _data,\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    JBFundingCycle memory fundingCycle = jbFundingCycleStore().currentOf(projectId);\n\n    assertEq(fundingCycle.number, 1); // ok\n    assertEq(fundingCycle.weight, _data.weight);\n    emit log_uint(fundingCycle.basedOn);\n    emit log_uint(fundingCycle.configuration);\n\n    uint256 currentConfiguration = fundingCycle.configuration;\n\n    evm.warp(block.timestamp + 1); // Avoid overwriting if same timestamp\n\n    evm.prank(multisig());\n    controller.reconfigureFundingCyclesOf(\n      projectId,\n      _data, // 3days ballot\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      ''\n    );\n\n    // Shouldn't have changed\n    fundingCycle = jbFundingCycleStore().currentOf(projectId);\n    assertEq(fundingCycle.number, 1);\n    assertEq(fundingCycle.configuration, currentConfiguration);\n    assertEq(fundingCycle.weight, _data.weight);\n\n    // should be new funding cycle\n    evm.warp(fundingCycle.start + fundingCycle.duration);\n\n    JBFundingCycle memory newFundingCycle = jbFundingCycleStore().currentOf(projectId);\n    assertEq(newFundingCycle.number, 2);\n    assertEq(newFundingCycle.weight, _data.weight);\n  }\n\n  function testMultipleReconfigurationOnRolledOver() public {\n    uint256 weightFirstReconfiguration = 1234 * 10**18;\n    uint256 weightSecondReconfiguration = 6969 * 10**18;\n\n    uint256 projectId = controller.launchProjectFor(\n      multisig(),\n      _projectMetadata,\n      _data,\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    JBFundingCycle memory fundingCycle = jbFundingCycleStore().currentOf(projectId);\n\n    // Initial funding cycle data\n    assertEq(fundingCycle.number, 1);\n    assertEq(fundingCycle.weight, _data.weight);\n\n    uint256 currentConfiguration = fundingCycle.configuration;\n\n    // Jump to FC+1, rolled over\n    evm.warp(block.timestamp + fundingCycle.duration); \n\n    // First reconfiguration\n    evm.prank(multisig());\n    controller.reconfigureFundingCyclesOf(\n      projectId,\n      JBFundingCycleData({\n        duration: 6 days,\n        weight: weightFirstReconfiguration,\n        discountRate: 0,\n        ballot: _ballot\n      }), // 3days ballot\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      ''\n    );\n\n    evm.warp(block.timestamp + 1); // Avoid overwrite\n\n    // Second reconfiguration (different configuration)\n    evm.prank(multisig());\n    controller.reconfigureFundingCyclesOf(\n      projectId,\n        JBFundingCycleData({\n        duration: 6 days,\n        weight: weightSecondReconfiguration,\n        discountRate: 0,\n        ballot: _ballot\n      }), // 3days ballot\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      ''\n    );\n    uint256 secondReconfiguration = block.timestamp;\n\n    // Shouldn't have changed, still in FC#2, rolled over from FC#1\n    fundingCycle = jbFundingCycleStore().currentOf(projectId);\n    assertEq(fundingCycle.number, 2);\n    assertEq(fundingCycle.configuration, currentConfiguration);\n    assertEq(fundingCycle.weight, _data.weight);\n\n    // Jump to after the ballot passed, but before the next FC\n    evm.warp(fundingCycle.start + fundingCycle.duration - 1);\n\n    // Queued should be the second reconfiguration\n    JBFundingCycle memory queuedFundingCycle = jbFundingCycleStore().queuedOf(projectId);\n    assertEq(queuedFundingCycle.number, 3);\n    assertEq(queuedFundingCycle.configuration, secondReconfiguration);\n    assertEq(queuedFundingCycle.weight, weightSecondReconfiguration);\n\n    evm.warp(fundingCycle.start + fundingCycle.duration);\n\n    // Second reconfiguration should be now the current one\n    JBFundingCycle memory newFundingCycle = jbFundingCycleStore().currentOf(projectId);\n    assertEq(newFundingCycle.number, 3);\n    assertEq(newFundingCycle.configuration, secondReconfiguration);\n    assertEq(newFundingCycle.weight, weightSecondReconfiguration);\n  }\n\n  function testMultipleReconfigure(uint8 FUZZED_BALLOT_DURATION) public {\n    _ballot = new JBReconfigurationBufferBallot(FUZZED_BALLOT_DURATION, jbFundingCycleStore());\n\n    _data = JBFundingCycleData({\n      duration: 6 days,\n      weight: 10000 ether,\n      discountRate: 0,\n      ballot: _ballot\n    });\n\n    uint256 projectId = controller.launchProjectFor(\n      multisig(),\n      _projectMetadata,\n      _data, // duration 6 days, weight=10k, ballot 3days\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    JBFundingCycle memory initialFundingCycle = jbFundingCycleStore().currentOf(projectId);\n    JBFundingCycle memory currentFundingCycle = initialFundingCycle;\n    JBFundingCycle memory queuedFundingCycle = jbFundingCycleStore().queuedOf(projectId);\n\n    evm.warp(currentFundingCycle.start + 1); // Avoid overwriting current fc while reconfiguring\n\n    for (uint256 i = 0; i < 4; i++) {\n      currentFundingCycle = jbFundingCycleStore().currentOf(projectId);\n\n      if (FUZZED_BALLOT_DURATION + i * 1 days < currentFundingCycle.duration)\n        assertEq(currentFundingCycle.weight, initialFundingCycle.weight - i);\n\n      _data = JBFundingCycleData({\n        duration: 6 days,\n        weight: initialFundingCycle.weight - (i + 1), // i+1 -> next funding cycle\n        discountRate: 0,\n        ballot: _ballot\n      });\n\n      evm.prank(multisig());\n      controller.reconfigureFundingCyclesOf(\n        projectId,\n        _data,\n        _metadata,\n        0,\n        _groupedSplits,\n        _fundAccessConstraints,\n        ''\n      );\n\n      currentFundingCycle = jbFundingCycleStore().currentOf(projectId);\n      queuedFundingCycle = jbFundingCycleStore().queuedOf(projectId);\n\n      // While ballot is failed, queued is current rolled over\n      assertEq(queuedFundingCycle.weight, currentFundingCycle.weight);\n      assertEq(queuedFundingCycle.number, currentFundingCycle.number + 1);\n\n      // Is the full ballot duration included in the funding cycle?\n      if (\n        FUZZED_BALLOT_DURATION == 0 ||\n        currentFundingCycle.duration % (FUZZED_BALLOT_DURATION + i * 1 days) <\n        currentFundingCycle.duration\n      ) {\n        assertEq(currentFundingCycle.weight, initialFundingCycle.weight - i);\n\n        // we shift forward the start of the ballot into the fc, one day at a time, from fc to fc\n        evm.warp(currentFundingCycle.start + currentFundingCycle.duration + i * 1 days);\n\n        // ballot should be in Approved state now, queued is the reconfiguration rolled over\n        queuedFundingCycle = jbFundingCycleStore().queuedOf(projectId);\n        assertEq(queuedFundingCycle.weight, currentFundingCycle.weight - 1);\n        assertEq(queuedFundingCycle.number, currentFundingCycle.number + 2);\n      }\n      // the ballot is accross two funding cycles\n      else {\n        // Warp to begining of next FC: should be the previous fc config rolled over (ballot is in Failed state)\n        evm.warp(currentFundingCycle.start + currentFundingCycle.duration);\n        assertEq(currentFundingCycle.weight, initialFundingCycle.weight - i);\n        uint256 cycleNumber = currentFundingCycle.number;\n\n        // Warp to after the end of the ballot, within the same fc: should be the new fc (ballot is in Approved state)\n        evm.warp(currentFundingCycle.start + currentFundingCycle.duration + FUZZED_BALLOT_DURATION);\n        currentFundingCycle = jbFundingCycleStore().currentOf(projectId);\n        assertEq(currentFundingCycle.weight, initialFundingCycle.weight - i - 1);\n        assertEq(currentFundingCycle.number, cycleNumber + 1);\n      }\n    }\n  }\n\n  function testReconfigureProjectFuzzRates(\n    uint96 RESERVED_RATE,\n    uint96 REDEMPTION_RATE,\n    uint96 BALANCE\n  ) public {\n    evm.assume(payable(msg.sender).balance / 2 >= BALANCE);\n    evm.assume(100 < BALANCE);\n\n    address _beneficiary = address(69420);\n    uint256 projectId = controller.launchProjectFor(\n      multisig(),\n      _projectMetadata,\n      _dataWithoutBallot,\n      _metadata,\n      0, // _mustStartAtOrAfter\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    JBFundingCycle memory fundingCycle = jbFundingCycleStore().currentOf(projectId);\n    assertEq(fundingCycle.number, 1);\n\n    evm.warp(block.timestamp + 1);\n\n    jbETHPaymentTerminal().pay{value: BALANCE}(\n      projectId,\n      BALANCE,\n      address(0),\n      _beneficiary,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    );\n\n    uint256 _userTokenBalance = PRBMath.mulDiv(BALANCE, (WEIGHT / 10**18), 2); // initial FC rate is 50%\n    if (BALANCE != 0)\n      assertEq(jbTokenStore().balanceOf(_beneficiary, projectId), _userTokenBalance);\n\n    evm.prank(multisig());\n    if (RESERVED_RATE > 10000) evm.expectRevert(abi.encodeWithSignature('INVALID_RESERVED_RATE()'));\n    else if (REDEMPTION_RATE > 10000)\n      evm.expectRevert(abi.encodeWithSignature('INVALID_REDEMPTION_RATE()'));\n\n    controller.reconfigureFundingCyclesOf(\n      projectId,\n      _dataWithoutBallot,\n      JBFundingCycleMetadata({\n        global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n        reservedRate: RESERVED_RATE,\n        redemptionRate: REDEMPTION_RATE,\n        ballotRedemptionRate: 0,\n        pausePay: false,\n        pauseDistributions: false,\n        pauseRedeem: false,\n        pauseBurn: false,\n        allowMinting: true,\n        allowChangeToken: false,\n        allowTerminalMigration: false,\n        allowControllerMigration: false,\n        holdFees: false,\n        useTotalOverflowForRedemptions: false,\n        useDataSourceForPay: false,\n        useDataSourceForRedeem: false,\n        dataSource: address(0)\n      }),\n      0,\n      _groupedSplits,\n      _fundAccessConstraints,\n      ''\n    );\n\n    if (RESERVED_RATE > 10000 || REDEMPTION_RATE > 10000) {\n      REDEMPTION_RATE = 5000; // If reconfigure has reverted, keep previous rates\n      RESERVED_RATE = 5000;\n    }\n\n    evm.warp(block.timestamp + fundingCycle.duration);\n\n    fundingCycle = jbFundingCycleStore().currentOf(projectId);\n    assertEq(fundingCycle.number, 2);\n\n    jbETHPaymentTerminal().pay{value: BALANCE}(\n      projectId,\n      BALANCE,\n      address(0),\n      _beneficiary,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    );\n\n    uint256 _newUserTokenBalance = RESERVED_RATE == 0 // New fc, rate is RESERVED_RATE\n      ? PRBMath.mulDiv(BALANCE, WEIGHT, 10**18)\n      : PRBMath.mulDiv(PRBMath.mulDiv(BALANCE, WEIGHT, 10**18), 10000 - RESERVED_RATE, 10000);\n\n    if (BALANCE != 0)\n      assertEq(\n        jbTokenStore().balanceOf(_beneficiary, projectId),\n        _userTokenBalance + _newUserTokenBalance\n      );\n\n    uint256 tokenBalance = jbTokenStore().balanceOf(_beneficiary, projectId);\n    uint256 totalSupply = jbController().totalOutstandingTokensOf(projectId, RESERVED_RATE);\n    uint256 overflow = jbETHPaymentTerminal().currentEthOverflowOf(projectId);\n\n    evm.startPrank(_beneficiary);\n    jbETHPaymentTerminal().redeemTokensOf(\n      _beneficiary,\n      projectId,\n      tokenBalance,\n      address(0), //token (unused)\n      0,\n      payable(_beneficiary),\n      '',\n      new bytes(0)\n    );\n    evm.stopPrank();\n\n    if (BALANCE != 0 && REDEMPTION_RATE != 0)\n      assertEq(\n        _beneficiary.balance,\n        PRBMath.mulDiv(\n          PRBMath.mulDiv(overflow, tokenBalance, totalSupply),\n          REDEMPTION_RATE + PRBMath.mulDiv(tokenBalance, 10000 - REDEMPTION_RATE, totalSupply),\n          10000\n        )\n      );\n  }\n\n  function testLaunchProjectWrongBallot() public {\n    uint256 projectId = controller.launchProjectFor(\n      multisig(),\n      _projectMetadata,\n      _data,\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    JBFundingCycleData memory _dataNew = JBFundingCycleData({\n      duration: 6 days,\n      weight: 12345 * 10**18,\n      discountRate: 0,\n      ballot: IJBFundingCycleBallot(address(6969)) // Wrong ballot address\n    });\n\n    evm.warp(block.timestamp + 1); // Avoid overwriting if same timestamp\n\n    evm.prank(multisig());\n    evm.expectRevert(abi.encodeWithSignature('INVALID_BALLOT()'));\n    controller.reconfigureFundingCyclesOf(\n      projectId,\n      _dataNew, // wrong ballot\n      _metadata,\n      0, // Start asap\n      _groupedSplits,\n      _fundAccessConstraints,\n      ''\n    );\n  }\n}\n"
    },
    "contracts/JBReconfigurationBufferBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport './interfaces/IJBReconfigurationBufferBallot.sol';\nimport './structs/JBFundingCycle.sol';\n\n/** \n  @notice \n  Manages approving funding cycle reconfigurations automatically after a buffer period.\n\n  @dev\n  Adheres to -\n  IJBReconfigurationBufferBallot: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  ERC165: Introspection on interface adherance. \n*/\ncontract JBReconfigurationBufferBallot is IJBReconfigurationBufferBallot, ERC165 {\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`.\n  */\n  uint256 public immutable override duration;\n\n  /**\n    @notice\n    The contract storing all funding cycle configurations.\n  */\n  IJBFundingCycleStore public immutable override fundingCycleStore;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    The finalized state.\n\n    @dev\n    If `Active`, the ballot for the provided configuration can still be finalized whenever its state settles.\n\n    _projectId The ID of the project to check the final ballot state of.\n    _configuration The configuration of the funding cycle to check the final ballot state of.\n  */\n  mapping(uint256 => mapping(uint256 => JBBallotState)) public override finalState;\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    The approval state of a particular funding cycle.\n\n    @param _projectId The ID of the project to which the funding cycle being checked belongs.\n    @param _configured The configuration of the funding cycle to check the state of.\n    @param _start The start timestamp of the funding cycle to check the state of.\n\n    @return The state of the provided ballot.\n  */\n  function stateOf(\n    uint256 _projectId,\n    uint256 _configured,\n    uint256 _start\n  ) public view override returns (JBBallotState) {\n    // If there is a finalized state, return it.\n    if (finalState[_projectId][_configured] != JBBallotState.Active)\n      return finalState[_projectId][_configured];\n\n    // If the delay hasn't yet passed, the ballot is either failed or active.\n    if (block.timestamp < _configured + duration)\n      // If the current timestamp is past the start, the ballot is failed.\n      return (block.timestamp >= _start) ? JBBallotState.Failed : JBBallotState.Active;\n\n    // The ballot is otherwise approved.\n    return JBBallotState.Approved;\n  }\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n\n    @return A flag indicating if this contract adheres to the specified interface.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBReconfigurationBufferBallot).interfaceId ||\n      _interfaceId == type(IJBFundingCycleBallot).interfaceId ||\n      super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _duration The number of seconds to wait until a reconfiguration can be either `Approved` or `Failed`.\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\n  */\n  constructor(uint256 _duration, IJBFundingCycleStore _fundingCycleStore) {\n    duration = _duration;\n    fundingCycleStore = _fundingCycleStore;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Finalizes a configuration state if the current state has settled.\n\n    @param _projectId The ID of the project to which the funding cycle being checked belongs.\n    @param _configured The configuration of the funding cycle to check the state of.\n\n    @return ballotState The state of the finalized ballot. If `Active`, the ballot can still later be finalized when it's state resolves.\n  */\n  function finalize(uint256 _projectId, uint256 _configured)\n    external\n    override\n    returns (JBBallotState ballotState)\n  {\n    // Get the funding cycle for the configuration in question.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.get(_projectId, _configured);\n\n    // Get the current ballot state.\n    ballotState = finalState[_projectId][_configured];\n\n    // If the final ballot state is still `Active`.\n    if (ballotState == JBBallotState.Active) {\n      ballotState = stateOf(_projectId, _configured, _fundingCycle.start);\n      // If the ballot is active after the cycle has started, it should be finalized as failed.\n      if (ballotState != JBBallotState.Active) {\n        // Store the updated value.\n        finalState[_projectId][_configured] = ballotState;\n\n        emit Finalize(_projectId, _configured, ballotState, msg.sender);\n      }\n    }\n  }\n}\n"
    },
    "contracts/interfaces/IJBReconfigurationBufferBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBFundingCycleBallot.sol';\n\ninterface IJBReconfigurationBufferBallot is IJBFundingCycleBallot {\n  event Finalize(\n    uint256 indexed projectId,\n    uint256 indexed configuration,\n    JBBallotState indexed ballotState,\n    address caller\n  );\n\n  function finalState(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    returns (JBBallotState);\n\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\n\n  function finalize(uint256 _projectId, uint256 _configured) external returns (JBBallotState);\n}\n"
    },
    "contracts/system_tests/TestEIP165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\nimport '../JBReconfigurationBufferBallot.sol';\nimport '../JBGasTokenERC20SplitsPayer.sol';\n\ncontract TestEIP165 is TestBaseWorkflow {\n  bytes4 constant notSupportedInterface = 0xffffffff;\n\n  uint256 constant projectId = 2;\n  uint256 constant splitsProjectID = 3;\n  address payable constant splitsBeneficiary = payable(address(420));\n  uint256 constant splitsDomain = 1;\n  uint256 constant splitsGroup = 1;\n  bool constant splitsPreferClaimedTokens = false;\n  string constant splitsMemo = '';\n  bytes constant splitsMetadata = '';\n  bool constant splitsPreferAddToBalance = true;\n  address constant splitsOwner = address(420);\n\n  function testJBController() public {\n    JBController controller = jbController();\n\n    // Should support these interfaces\n    assertTrue(controller.supportsInterface(type(IERC165).interfaceId));\n    assertTrue(controller.supportsInterface(type(IJBController).interfaceId));\n    assertTrue(controller.supportsInterface(type(IJBMigratable).interfaceId));\n    assertTrue(controller.supportsInterface(type(IJBOperatable).interfaceId));\n\n    // Make sure it doesn't always return true\n    assertTrue(!controller.supportsInterface(notSupportedInterface));\n  }\n\n  function testJBERC20PaymentTerminal() public {\n    JBERC20PaymentTerminal terminal = new JBERC20PaymentTerminal(\n      jbToken(),\n      jbLibraries().USD(), // currency\n      jbLibraries().ETH(), // base weight currency\n      1, // JBSplitsGroupe\n      jbOperatorStore(),\n      jbProjects(),\n      jbDirectory(),\n      jbSplitsStore(),\n      jbPrices(),\n      jbPaymentTerminalStore(),\n      multisig()\n    );\n\n    // Should support these interfaces\n    assertTrue(terminal.supportsInterface(type(IERC165).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBPayoutRedemptionPaymentTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBPayoutTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBPaymentTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBAllowanceTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBRedemptionTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBSingleTokenPaymentTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBOperatable).interfaceId));\n\n    // Make sure it doesn't always return true\n    assertTrue(!terminal.supportsInterface(notSupportedInterface));\n  }\n\n  function testJBETHPaymentTerminal() public {\n    JBETHPaymentTerminal terminal = jbETHPaymentTerminal();\n\n    // Should support these interfaces\n    assertTrue(terminal.supportsInterface(type(IERC165).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBPayoutRedemptionPaymentTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBPayoutTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBPaymentTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBAllowanceTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBRedemptionTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBSingleTokenPaymentTerminal).interfaceId));\n    assertTrue(terminal.supportsInterface(type(IJBOperatable).interfaceId));\n\n    // Make sure it doesn't always return true\n    assertTrue(!terminal.supportsInterface(notSupportedInterface));\n  }\n\n  function testJBProjects() public {\n    JBProjects projects = jbProjects();\n\n    // Should support these interfaces\n    assertTrue(projects.supportsInterface(type(IERC165).interfaceId));\n    assertTrue(projects.supportsInterface(type(IERC721).interfaceId));\n    assertTrue(projects.supportsInterface(type(IERC721Metadata).interfaceId));\n    assertTrue(projects.supportsInterface(type(IJBProjects).interfaceId));\n    assertTrue(projects.supportsInterface(type(IJBOperatable).interfaceId));\n\n    // Make sure it doesn't always return true\n    assertTrue(!projects.supportsInterface(notSupportedInterface));\n  }\n\n  function testJBReconfigurationBufferBallot() public {\n    JBReconfigurationBufferBallot ballot = new JBReconfigurationBufferBallot(\n      3000,\n      jbFundingCycleStore()\n    );\n\n    // Should support these interfaces\n    assertTrue(ballot.supportsInterface(type(IERC165).interfaceId));\n    assertTrue(ballot.supportsInterface(type(IJBReconfigurationBufferBallot).interfaceId));\n    assertTrue(ballot.supportsInterface(type(IJBFundingCycleBallot).interfaceId));\n\n    // Make sure it doesn't always return true\n    assertTrue(!ballot.supportsInterface(notSupportedInterface));\n  }\n\n  function testJBGasTokenERC20SplitsPayer() public {\n    JBGasTokenERC20SplitsPayer splitsPayer = new JBGasTokenERC20SplitsPayer(\n      splitsProjectID,\n      splitsDomain,\n      splitsGroup,\n      jbSplitsStore(),\n      projectId,\n      splitsBeneficiary,\n      splitsPreferClaimedTokens,\n      splitsMemo,\n      splitsMetadata,\n      splitsPreferAddToBalance,\n      splitsOwner\n    );\n\n    // Should support these interfaces\n    assertTrue(splitsPayer.supportsInterface(type(IERC165).interfaceId));\n    assertTrue(splitsPayer.supportsInterface(type(IJBSplitsPayer).interfaceId));\n    assertTrue(splitsPayer.supportsInterface(type(IJBProjectPayer).interfaceId));\n\n    // Make sure it doesn't always return true\n    assertTrue(!splitsPayer.supportsInterface(notSupportedInterface));\n  }\n}\n"
    },
    "contracts/JBGasTokenERC20SplitsPayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './interfaces/IJBSplitsPayer.sol';\nimport './interfaces/IJBSplitsStore.sol';\nimport './libraries/JBConstants.sol';\nimport './JBGasTokenERC20ProjectPayer.sol';\n\n/** \n  @notice \n  Sends ETH or ERC20's to a group of splits as it receives direct payments or has its functions called.\n\n  @dev\n  Inherit from this contract or borrow from its logic to forward ETH or ERC20's to a group of splits from within other contracts.\n\n  @dev\n  Adheres to -\n  IJBSplitsPayer:  General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  JBGasTokenERC20ProjectPayer: Sends ETH or ERC20's to a project treasury as it receives direct payments or has it's functions called.\n  ReentrancyGuard: Contract module that helps prevent reentrant calls to a function.\n*/\ncontract JBGasTokenERC20SplitsPayer is IJBSplitsPayer, JBGasTokenERC20ProjectPayer, ReentrancyGuard {\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The contract that stores splits for each project.\n  */\n  IJBSplitsStore public immutable override splitsStore;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The ID of project for which the default splits are stored. \n  */\n  uint256 public override defaultSplitsProjectId;\n\n  /**\n    @notice\n    The domain within which the default splits are stored. \n  */\n  uint256 public override defaultSplitsDomain;\n\n  /**\n    @notice\n    The group within which the default splits are stored. \n  */\n  uint256 public override defaultSplitsGroup;\n\n  //*********************************************************************//\n  // -------------------------- public views --------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n\n    @return A flag indicating if this contract adheres to the specified interface.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(JBGasTokenERC20ProjectPayer, IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBSplitsPayer).interfaceId || super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _defaultSplitsProjectId The ID of project for which the default splits are stored.\n    @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.\n    @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.\n    @param _splitsStore A contract that stores splits for each project.\n    @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.\n    @param _defaultBeneficiary The address that'll receive the project's tokens. \n    @param _defaultPreferClaimedTokens A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. \n    @param _defaultMemo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.  A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _defaultMetadata Bytes to send along to the project's data source and delegate, if provided.\n    @param _preferAddToBalance  A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.\n    @param _owner The address that will own the contract.\n  */\n  constructor(\n    uint256 _defaultSplitsProjectId,\n    uint256 _defaultSplitsDomain,\n    uint256 _defaultSplitsGroup,\n    IJBSplitsStore _splitsStore,\n    uint256 _defaultProjectId,\n    address payable _defaultBeneficiary,\n    bool _defaultPreferClaimedTokens,\n    string memory _defaultMemo,\n    bytes memory _defaultMetadata,\n    bool _preferAddToBalance,\n    address _owner\n  )\n    JBGasTokenERC20ProjectPayer(\n      _defaultProjectId,\n      _defaultBeneficiary,\n      _defaultPreferClaimedTokens,\n      _defaultMemo,\n      _defaultMetadata,\n      _preferAddToBalance,\n      _splitsStore.directory(),\n      _owner\n    )\n  {\n    defaultSplitsProjectId = _defaultSplitsProjectId;\n    defaultSplitsDomain = _defaultSplitsDomain;\n    defaultSplitsGroup = _defaultSplitsGroup;\n    splitsStore = _splitsStore;\n  }\n\n  //*********************************************************************//\n  // ------------------------- default receive ------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Received funds are paid to the default split group using the stored default properties.\n\n    @dev\n    This function is called automatically when the contract receives an ETH payment.\n  */\n  receive() external payable virtual override nonReentrant {\n    // Pay the splits and get a reference to the amount leftover.\n    uint256 _leftoverAmount = _payToSplits(\n      defaultSplitsProjectId,\n      defaultSplitsDomain,\n      defaultSplitsGroup,\n      JBTokens.GAS_TOKEN,\n      address(this).balance,\n      18, // decimals.\n      defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender\n    );\n\n    // If there is no leftover amount, nothing left to pay.\n    if (_leftoverAmount == 0) return;\n\n    // If there's a default project ID, try to pay it.\n    if (defaultProjectId != 0)\n      if (defaultPreferAddToBalance)\n        // Pay the project by adding to its balance if prefered.\n        _addToBalanceOf(\n          defaultProjectId,\n          JBTokens.GAS_TOKEN,\n          _leftoverAmount,\n          18, // decimals.\n          defaultMemo,\n          defaultMetadata\n        );\n        // Otherwise, issue a payment to the project.\n      else\n        _pay(\n          defaultProjectId,\n          JBTokens.GAS_TOKEN,\n          _leftoverAmount,\n          18, // decimals.\n          defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender,\n          0, // min returned tokens.\n          defaultPreferClaimedTokens,\n          defaultMemo,\n          defaultMetadata\n        );\n    // If no project was specified, send the funds directly to the beneficiary or the msg.sender.\n    else\n      Address.sendValue(\n        defaultBeneficiary != address(0) ? payable(defaultBeneficiary) : payable(msg.sender),\n        _leftoverAmount\n      );\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Sets the location of the splits that payments this contract receives will be split between.\n\n    @param _projectId The ID of project for which the default splits are stored. \n    @param _domain The domain within which the default splits are stored. \n    @param _group The group within which the default splits are stored. \n  */\n  function setDefaultSplits(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) external virtual override onlyOwner {\n    // Set the default splits project ID if it's changing.\n    if (_projectId != defaultSplitsProjectId) defaultSplitsProjectId = _projectId;\n\n    // Set the default splits domain if it's changing.\n    if (_domain != defaultSplitsDomain) defaultSplitsDomain = _domain;\n\n    // Set the default splits group if it's changing.\n    if (_group != defaultSplitsGroup) defaultSplitsGroup = _group;\n\n    emit SetDefaultSplits(_projectId, _domain, _group, msg.sender);\n  }\n\n  //*********************************************************************//\n  // ----------------------- public transactions ----------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Make a payment to the specified project after first splitting the amount among the stored default splits.\n\n    @param _projectId The ID of the project that is being paid after.\n    @param _token The token being paid in.\n    @param _amount The amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place.\n    @param _decimals The number of decimals in the `_amount` fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value.\n    @param _beneficiary The address who will receive tokens from the payment made with leftover funds.\n    @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point number with 18 decimals.\n    @param _preferClaimedTokens A flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas.\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n  */\n  function pay(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) public payable virtual override nonReentrant {\n    // ETH shouldn't be sent if the token isn't ETH.\n    if (address(_token) != JBTokens.GAS_TOKEN) {\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\n\n      // Transfer tokens to this contract from the msg sender.\n      IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n    } else {\n      // If ETH is being paid, set the amount to the message value, and decimals to 18.\n      _amount = msg.value;\n      _decimals = 18;\n    }\n\n    // Pay the splits and get a reference to the amount leftover.\n    uint256 _leftoverAmount = _payToSplits(\n      defaultSplitsProjectId,\n      defaultSplitsDomain,\n      defaultSplitsGroup,\n      _token,\n      _amount,\n      _decimals,\n      defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender\n    );\n\n    // Pay any leftover amount.\n    if (_leftoverAmount > 0) {\n      // If there's a default project ID, try to pay it.\n      if (_projectId != 0) {\n        _pay(\n          _projectId,\n          _token,\n          _leftoverAmount,\n          _decimals,\n          _beneficiary != address(0) ? _beneficiary : msg.sender,\n          _minReturnedTokens,\n          _preferClaimedTokens,\n          _memo,\n          _metadata\n        );\n      }\n      // If no project was specified, send the funds directly to the beneficiary or the msg.sender.\n      else {\n        // Transfer the ETH.\n        if (_token == JBTokens.GAS_TOKEN)\n          Address.sendValue(\n            // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender.\n            _beneficiary != address(0) ? payable(_beneficiary) : payable(msg.sender),\n            _leftoverAmount\n          );\n          // Or, transfer the ERC20.\n        else\n          IERC20(_token).transfer(\n            // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender.\n            _beneficiary != address(0) ? _beneficiary : msg.sender,\n            _leftoverAmount\n          );\n      }\n    }\n\n    emit Pay(\n      _projectId,\n      _beneficiary != address(0) ? defaultBeneficiary : msg.sender,\n      _token,\n      _amount,\n      _decimals,\n      _leftoverAmount,\n      _minReturnedTokens,\n      _preferClaimedTokens,\n      _memo,\n      _metadata,\n      msg.sender\n    );\n  }\n\n  /** \n    @notice \n    Add to the balance of the specified project after first splitting the amount among the stored default splits.\n\n    @param _projectId The ID of the project that is being paid after.\n    @param _token The token being paid in.\n    @param _amount The amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place.\n    @param _decimals The number of decimals in the `_amount` fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value.\n    @param _memo A memo to pass along to the emitted event.  \n    @param _metadata Extra data to pass along to the terminal.\n  */\n  function addToBalanceOf(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) public payable virtual override nonReentrant {\n    // ETH shouldn't be sent if this terminal's token isn't ETH.\n    if (address(_token) != JBTokens.GAS_TOKEN) {\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\n\n      // Transfer tokens to this contract from the msg sender.\n      IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n    } else {\n      // If ETH is being paid, set the amount to the message value, and decimals to 18.\n      _amount = msg.value;\n      _decimals = 18;\n    }\n\n    // Pay the splits and get a reference to the amount leftover.\n    uint256 _leftoverAmount = _payToSplits(\n      defaultSplitsProjectId,\n      defaultSplitsDomain,\n      defaultSplitsGroup,\n      _token,\n      _amount,\n      _decimals,\n      defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender\n    );\n\n    // Distribute any leftover amount.\n    if (_leftoverAmount > 0) {\n      // If there's a default project ID, try to add to its balance.\n      if (_projectId != 0)\n        // Add to the project's balance.\n        _addToBalanceOf(_projectId, _token, _leftoverAmount, _decimals, _memo, _metadata);\n\n        // Otherwise, send a payment to the beneficiary.\n      else {\n        // Transfer the ETH.\n        if (_token == JBTokens.GAS_TOKEN)\n          Address.sendValue(\n            // If there's a default beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender.\n            defaultBeneficiary != address(0) ? defaultBeneficiary : payable(msg.sender),\n            _leftoverAmount\n          );\n          // Or, transfer the ERC20.\n        else\n          IERC20(_token).transfer(\n            // If there's a default beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender.\n            defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender,\n            _leftoverAmount\n          );\n      }\n    }\n\n    emit AddToBalance(\n      _projectId,\n      defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender,\n      _token,\n      _amount,\n      _decimals,\n      _leftoverAmount,\n      _memo,\n      _metadata,\n      msg.sender\n    );\n  }\n\n  //*********************************************************************//\n  // ---------------------- internal transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Split an amount between all splits.\n\n    @param _splitsProjectId The ID of the project to which the splits belong.\n    @param _splitsDomain The splits domain to which the group belongs.\n    @param _splitsGroup The splits group to pay.\n    @param _token The token the amonut being split is in.\n    @param _amount The amount of tokens being split, as a fixed point number. If the `_token` is ETH, this is ignored and msg.value is used in its place.\n    @param _decimals The number of decimals in the `_amount` fixed point number. \n    @param _defaultBeneficiary The address that will benefit from any non-specified beneficiaries in splits.\n\n    @return leftoverAmount The amount leftover after all splits were paid.\n  */\n  function _payToSplits(\n    uint256 _splitsProjectId,\n    uint256 _splitsDomain,\n    uint256 _splitsGroup,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    address _defaultBeneficiary\n  ) internal virtual returns (uint256 leftoverAmount) {\n    // Get a reference to the splits.\n    JBSplit[] memory _splits = splitsStore.splitsOf(_splitsProjectId, _splitsDomain, _splitsGroup);\n\n    // Set the leftover amount to the initial balance.\n    leftoverAmount = _amount;\n\n    // Settle between all splits.\n    for (uint256 i = 0; i < _splits.length; i++) {\n      // Get a reference to the split being iterated on.\n      JBSplit memory _split = _splits[i];\n\n      // The amount to send towards the split.\n      uint256 _splitAmount = PRBMath.mulDiv(\n        _amount,\n        _split.percent,\n        JBConstants.SPLITS_TOTAL_PERCENT\n      );\n\n      if (_splitAmount > 0) {\n        // Transfer tokens to the split.\n        // If there's an allocator set, transfer to its `allocate` function.\n        if (_split.allocator != IJBSplitAllocator(address(0))) {\n          // Create the data to send to the allocator.\n          JBSplitAllocationData memory _data = JBSplitAllocationData(\n            _token,\n            _splitAmount,\n            _decimals,\n            defaultProjectId,\n            0,\n            _split\n          );\n\n          // Approve the `_amount` of tokens for the split allocator to transfer tokens from this contract.\n          if (_token != JBTokens.GAS_TOKEN)\n            IERC20(_token).approve(address(_split.allocator), _splitAmount);\n\n          // If the token is ETH, send it in msg.value.\n          uint256 _payableValue = _token == JBTokens.GAS_TOKEN ? _splitAmount : 0;\n\n          // Trigger the allocator's `allocate` function.\n          _split.allocator.allocate{value: _payableValue}(_data);\n\n          // Otherwise, if a project is specified, make a payment to it.\n        } else if (_split.projectId != 0) {\n          if (_split.preferAddToBalance)\n            _addToBalanceOf(\n              _split.projectId,\n              _token,\n              _splitAmount,\n              _decimals,\n              defaultMemo,\n              defaultMetadata\n            );\n          else\n            _pay(\n              _split.projectId,\n              _token,\n              _splitAmount,\n              _decimals,\n              _split.beneficiary != address(0) ? _split.beneficiary : _defaultBeneficiary,\n              0,\n              _split.preferClaimed,\n              defaultMemo,\n              defaultMetadata\n            );\n        } else {\n          // Transfer the ETH.\n          if (_token == JBTokens.GAS_TOKEN)\n            Address.sendValue(\n              // Get a reference to the address receiving the tokens. If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to _defaultBeneficiary.\n              _split.beneficiary != address(0) ? _split.beneficiary : payable(_defaultBeneficiary),\n              _splitAmount\n            );\n            // Or, transfer the ERC20.\n          else {\n            IERC20(_token).transfer(\n              // Get a reference to the address receiving the tokens. If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to _defaultBeneficiary.\n              _split.beneficiary != address(0) ? _split.beneficiary : _defaultBeneficiary,\n              _splitAmount\n            );\n          }\n        }\n\n        // Subtract from the amount to be sent to the beneficiary.\n        leftoverAmount = leftoverAmount - _splitAmount;\n      }\n\n      emit DistributeToSplit(\n        _splitsProjectId,\n        _splitsDomain,\n        _splitsGroup,\n        _split,\n        _splitAmount,\n        _defaultBeneficiary,\n        msg.sender\n      );\n    }\n  }\n}\n"
    },
    "contracts/interfaces/IJBSplitsPayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './../structs/JBSplit.sol';\nimport './IJBSplitsStore.sol';\n\ninterface IJBSplitsPayer is IERC165 {\n  event SetDefaultSplits(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    address caller\n  );\n  event Pay(\n    uint256 indexed projectId,\n    address beneficiary,\n    address token,\n    uint256 amount,\n    uint256 decimals,\n    uint256 leftoverAmount,\n    uint256 minReturnedTokens,\n    bool preferClaimedTokens,\n    string memo,\n    bytes metadata,\n    address caller\n  );\n\n  event AddToBalance(\n    uint256 indexed projectId,\n    address beneficiary,\n    address token,\n    uint256 amount,\n    uint256 decimals,\n    uint256 leftoverAmount,\n    string memo,\n    bytes metadata,\n    address caller\n  );\n\n  event DistributeToSplit(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    JBSplit split,\n    uint256 amount,\n    address defaultBeneficiary,\n    address caller\n  );\n\n  function defaultSplitsProjectId() external view returns (uint256);\n\n  function defaultSplitsDomain() external view returns (uint256);\n\n  function defaultSplitsGroup() external view returns (uint256);\n\n  function splitsStore() external view returns (IJBSplitsStore);\n\n  function setDefaultSplits(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) external;\n}\n"
    },
    "contracts/JBGasTokenERC20ProjectPayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './interfaces/IJBProjectPayer.sol';\nimport './libraries/JBTokens.sol';\n\n/** \n  @notice \n  Sends ETH or ERC20's to a project treasury as it receives direct payments or has it's functions called.\n\n  @dev\n  Inherit from this contract or borrow from its logic to forward ETH or ERC20's to project treasuries from within other contracts.\n\n  @dev\n  Adheres to -\n  IJBProjectPayer:  General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n\n  @dev\n  Inherits from -\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\n  ERC165: Introspection on interface adherance. \n*/\ncontract JBGasTokenERC20ProjectPayer is IJBProjectPayer, Ownable, ERC165 {\n  //*********************************************************************//\n  // -------------------------- custom errors -------------------------- //\n  //*********************************************************************//\n  error INCORRECT_DECIMAL_AMOUNT();\n  error NO_MSG_VALUE_ALLOWED();\n  error TERMINAL_NOT_FOUND();\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    A contract storing directories of terminals and controllers for each project.\n  */\n  IJBDirectory public immutable override directory;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The ID of the project that should be used to forward this contract's received payments.\n  */\n  uint256 public override defaultProjectId;\n\n  /** \n    @notice \n    The beneficiary that should be used in the payment made when this contract receives payments.\n  */\n  address payable public override defaultBeneficiary;\n\n  /** \n    @notice \n    A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. Leaving tokens unclaimed saves gas.\n  */\n  bool public override defaultPreferClaimedTokens;\n\n  /** \n    @notice \n    The memo that should be used in the payment made when this contract receives payments.\n  */\n  string public override defaultMemo;\n\n  /** \n    @notice \n    The metadata that should be used in the payment made when this contract receives payments.\n  */\n  bytes public override defaultMetadata;\n\n  /**\n    @notice \n    A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.\n  */\n  bool public override defaultPreferAddToBalance;\n\n  //*********************************************************************//\n  // ------------------------- public views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Indicates if this contract adheres to the specified interface.\n\n    @dev \n    See {IERC165-supportsInterface}.\n\n    @param _interfaceId The ID of the interface to check for adherance to.\n  */\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == type(IJBProjectPayer).interfaceId || super.supportsInterface(_interfaceId);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _defaultProjectId The ID of the project whose treasury should be forwarded this contract's received payments.\n    @param _defaultBeneficiary The address that'll receive the project's tokens. \n    @param _defaultPreferClaimedTokens A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. \n    @param _defaultMemo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.  A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _defaultMetadata Bytes to send along to the project's data source and delegate, if provided.\n    @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _owner The address that will own the contract.\n  */\n  constructor(\n    uint256 _defaultProjectId,\n    address payable _defaultBeneficiary,\n    bool _defaultPreferClaimedTokens,\n    string memory _defaultMemo,\n    bytes memory _defaultMetadata,\n    bool _defaultPreferAddToBalance,\n    IJBDirectory _directory,\n    address _owner\n  ) {\n    defaultProjectId = _defaultProjectId;\n    defaultBeneficiary = _defaultBeneficiary;\n    defaultPreferClaimedTokens = _defaultPreferClaimedTokens;\n    defaultMemo = _defaultMemo;\n    defaultMetadata = _defaultMetadata;\n    defaultPreferAddToBalance = _defaultPreferAddToBalance;\n    directory = _directory;\n\n    _transferOwnership(_owner);\n  }\n\n  //*********************************************************************//\n  // ------------------------- default receive ------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Received funds are paid to the default project ID using the stored default properties.\n\n    @dev\n    Use the `addToBalance` function if there's a preference to do so. Otherwise use `pay`.\n\n    @dev\n    This function is called automatically when the contract receives an ETH payment.\n  */\n  receive() external payable virtual override {\n    if (defaultPreferAddToBalance)\n      _addToBalanceOf(\n        defaultProjectId,\n        JBTokens.GAS_TOKEN,\n        address(this).balance,\n        18, // balance is a fixed point number with 18 decimals.\n        defaultMemo,\n        defaultMetadata\n      );\n    else\n      _pay(\n        defaultProjectId,\n        JBTokens.GAS_TOKEN,\n        address(this).balance,\n        18, // balance is a fixed point number with 18 decimals.\n        defaultBeneficiary == address(0) ? msg.sender : defaultBeneficiary,\n        0, // Can't determine expectation of returned tokens ahead of time.\n        defaultPreferClaimedTokens,\n        defaultMemo,\n        defaultMetadata\n      );\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Sets the default values that determine how to interact with a protocol treasury when this contract receives ETH directly.\n\n    @param _projectId The ID of the project whose treasury should be forwarded this contract's received payments.\n    @param _beneficiary The address that'll receive the project's tokens. \n    @param _preferClaimedTokens A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. \n    @param _memo The memo that'll be used. \n    @param _metadata The metadata that'll be sent. \n    @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.\n  */\n  function setDefaultValues(\n    uint256 _projectId,\n    address payable _beneficiary,\n    bool _preferClaimedTokens,\n    string memory _memo,\n    bytes memory _metadata,\n    bool _defaultPreferAddToBalance\n  ) external virtual override onlyOwner {\n    // Set the default project ID if it has changed.\n    if (_projectId != defaultProjectId) defaultProjectId = _projectId;\n\n    // Set the default beneficiary if it has changed.\n    if (_beneficiary != defaultBeneficiary) defaultBeneficiary = _beneficiary;\n\n    // Set the default claimed token preference if it has changed.\n    if (_preferClaimedTokens != defaultPreferClaimedTokens)\n      defaultPreferClaimedTokens = _preferClaimedTokens;\n\n    // Set the default memo if it has changed.\n    if (keccak256(abi.encodePacked(_memo)) != keccak256(abi.encodePacked(defaultMemo)))\n      defaultMemo = _memo;\n\n    // Set the default metadata if it has changed.\n    if (keccak256(abi.encodePacked(_metadata)) != keccak256(abi.encodePacked(defaultMetadata)))\n      defaultMetadata = _metadata;\n\n    // Set the add to balance preference if it has changed.\n    if (_defaultPreferAddToBalance != defaultPreferAddToBalance)\n      defaultPreferAddToBalance = _defaultPreferAddToBalance;\n\n    emit SetDefaultValues(\n      _projectId,\n      _beneficiary,\n      _preferClaimedTokens,\n      _memo,\n      _metadata,\n      _defaultPreferAddToBalance,\n      msg.sender\n    );\n  }\n\n  //*********************************************************************//\n  // ----------------------- public transactions ----------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Make a payment to the specified project.\n\n    @param _projectId The ID of the project that is being paid.\n    @param _token The token being paid in.\n    @param _amount The amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place.\n    @param _decimals The number of decimals in the `_amount` fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value.\n    @param _beneficiary The address who will receive tokens from the payment.\n    @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point number with 18 decimals.\n    @param _preferClaimedTokens A flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas.\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n  */\n  function pay(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) public payable virtual override {\n    // ETH shouldn't be sent if the token isn't ETH.\n    if (address(_token) != JBTokens.GAS_TOKEN) {\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\n\n      // Transfer tokens to this contract from the msg sender.\n      IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n    } else {\n      // If ETH is being paid, set the amount to the message value, and decimals to 18.\n      _amount = msg.value;\n      _decimals = 18;\n    }\n\n    _pay(\n      _projectId,\n      _token,\n      _amount,\n      _decimals,\n      _beneficiary,\n      _minReturnedTokens,\n      _preferClaimedTokens,\n      _memo,\n      _metadata\n    );\n  }\n\n  /** \n    @notice \n    Add to the balance of the specified project.\n\n    @param _projectId The ID of the project that is being paid.\n    @param _token The token being paid in.\n    @param _amount The amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place.\n    @param _decimals The number of decimals in the `_amount` fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value.\n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Extra data to pass along to the terminal.\n  */\n  function addToBalanceOf(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    string calldata _memo,\n    bytes calldata _metadata\n  ) public payable virtual override {\n    // ETH shouldn't be sent if the token isn't ETH.\n    if (address(_token) != JBTokens.GAS_TOKEN) {\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\n\n      // Transfer tokens to this contract from the msg sender.\n      IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n    } else {\n      // If ETH is being paid, set the amount to the message value, and decimals to 18.\n      _amount = msg.value;\n      _decimals = 18;\n    }\n\n    _addToBalanceOf(_projectId, _token, _amount, _decimals, _memo, _metadata);\n  }\n\n  //*********************************************************************//\n  // ---------------------- internal transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Make a payment to the specified project.\n\n    @param _projectId The ID of the project that is being paid.\n    @param _token The token being paid in.\n    @param _amount The amount of tokens being paid, as a fixed point number. \n    @param _decimals The number of decimals in the `_amount` fixed point number. \n    @param _beneficiary The address who will receive tokens from the payment.\n    @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point number with 18 decimals.\n    @param _preferClaimedTokens A flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas.\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.  A data source can alter the memo before emitting in the event and forwarding to the delegate.\n    @param _metadata Bytes to send along to the data source and delegate, if provided.\n  */\n  function _pay(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string memory _memo,\n    bytes memory _metadata\n  ) internal virtual {\n    // Find the terminal for the specified project.\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_projectId, _token);\n\n    // There must be a terminal.\n    if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_NOT_FOUND();\n\n    // The amount's decimals must match the terminal's expected decimals.\n    if (_terminal.decimalsForToken(_token) != _decimals) revert INCORRECT_DECIMAL_AMOUNT();\n\n    // Approve the `_amount` of tokens from the destination terminal to transfer tokens from this contract.\n    if (_token != JBTokens.GAS_TOKEN) IERC20(_token).approve(address(_terminal), _amount);\n\n    // If the token is ETH, send it in msg.value.\n    uint256 _payableValue = _token == JBTokens.GAS_TOKEN ? _amount : 0;\n\n    // Send funds to the terminal.\n    // If the token is ETH, send it in msg.value.\n    _terminal.pay{value: _payableValue}(\n      _projectId,\n      _amount, // ignored if the token is JBTokens.GAS_TOKEN.\n      _token,\n      _beneficiary != address(0) ? _beneficiary : msg.sender,\n      _minReturnedTokens,\n      _preferClaimedTokens,\n      _memo,\n      _metadata\n    );\n  }\n\n  /** \n    @notice \n    Add to the balance of the specified project.\n\n    @param _projectId The ID of the project that is being paid.\n    @param _token The token being paid in.\n    @param _amount The amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place.\n    @param _decimals The number of decimals in the `_amount` fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value.\n    @param _memo A memo to pass along to the emitted event.\n    @param _metadata Extra data to pass along to the terminal.\n  */\n  function _addToBalanceOf(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    string memory _memo,\n    bytes memory _metadata\n  ) internal virtual {\n    // Find the terminal for the specified project.\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_projectId, _token);\n\n    // There must be a terminal.\n    if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_NOT_FOUND();\n\n    // The amount's decimals must match the terminal's expected decimals.\n    if (_terminal.decimalsForToken(_token) != _decimals) revert INCORRECT_DECIMAL_AMOUNT();\n\n    // Approve the `_amount` of tokens from the destination terminal to transfer tokens from this contract.\n    if (_token != JBTokens.GAS_TOKEN) IERC20(_token).approve(address(_terminal), _amount);\n\n    // If the token is ETH, send it in msg.value.\n    uint256 _payableValue = _token == JBTokens.GAS_TOKEN ? _amount : 0;\n\n    // Add to balance so tokens don't get issued.\n    _terminal.addToBalanceOf{value: _payableValue}(_projectId, _amount, _token, _memo, _metadata);\n  }\n}\n"
    },
    "contracts/interfaces/IJBProjectPayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport './IJBDirectory.sol';\n\ninterface IJBProjectPayer is IERC165 {\n  event SetDefaultValues(\n    uint256 indexed projectId,\n    address indexed beneficiary,\n    bool preferClaimedTokens,\n    string memo,\n    bytes metadata,\n    bool preferAddToBalance,\n    address caller\n  );\n\n  function directory() external view returns (IJBDirectory);\n\n  function defaultProjectId() external view returns (uint256);\n\n  function defaultBeneficiary() external view returns (address payable);\n\n  function defaultPreferClaimedTokens() external view returns (bool);\n\n  function defaultMemo() external view returns (string memory);\n\n  function defaultMetadata() external view returns (bytes memory);\n\n  function defaultPreferAddToBalance() external view returns (bool);\n\n  function setDefaultValues(\n    uint256 _projectId,\n    address payable _beneficiary,\n    bool _preferClaimedTokens,\n    string memory _memo,\n    bytes memory _metadata,\n    bool _defaultPreferAddToBalance\n  ) external;\n\n  function pay(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string memory _memo,\n    bytes memory _metadata\n  ) external payable;\n\n  function addToBalanceOf(\n    uint256 _projectId,\n    address _token,\n    uint256 _amount,\n    uint256 _decimals,\n    string memory _memo,\n    bytes memory _metadata\n  ) external payable;\n\n  receive() external payable;\n}\n"
    },
    "contracts/JBGasTokenERC20SplitsPayerDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './interfaces/IJBGasTokenERC20SplitsPayerDeployer.sol';\nimport './JBGasTokenERC20SplitsPayer.sol';\n\n/** \n  @notice \n  Deploys splits payer contracts.\n\n  @dev\n  Adheres to -\n  IJBGasTokenERC20SplitsPayerDeployer:  General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\ncontract JBGasTokenERC20SplitsPayerDeployer is IJBGasTokenERC20SplitsPayerDeployer {\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Allows anyone to deploy a new splits payer contract.\n\n    @param _defaultSplitsProjectId The ID of project for which the default splits are stored.\n    @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.\n    @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.\n    @param _splitsStore A contract that stores splits for each project.\n    @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.\n    @param _defaultBeneficiary The address that'll receive the project's tokens when the splits payer receives payments. \n    @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the splits payer's received payments should be automatically claimed into the beneficiary's wallet. \n    @param _defaultMemo The memo that'll be forwarded with the splits payer's received payments. \n    @param _defaultMetadata The metadata that'll be forwarded with the splits payer's received payments. \n    @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.\n    @param _owner The address that will own the splits payer.\n\n    @return splitsPayer The splits payer contract.\n  */\n  function deploySplitsPayer(\n    uint256 _defaultSplitsProjectId,\n    uint256 _defaultSplitsDomain,\n    uint256 _defaultSplitsGroup,\n    IJBSplitsStore _splitsStore,\n    uint256 _defaultProjectId,\n    address payable _defaultBeneficiary,\n    bool _defaultPreferClaimedTokens,\n    string memory _defaultMemo,\n    bytes memory _defaultMetadata,\n    bool _defaultPreferAddToBalance,\n    address _owner\n  ) external override returns (IJBSplitsPayer splitsPayer) {\n    // Deploy the splits payer.\n    splitsPayer = new JBGasTokenERC20SplitsPayer(\n      _defaultSplitsProjectId,\n      _defaultSplitsDomain,\n      _defaultSplitsGroup,\n      _splitsStore,\n      _defaultProjectId,\n      _defaultBeneficiary,\n      _defaultPreferClaimedTokens,\n      _defaultMemo,\n      _defaultMetadata,\n      _defaultPreferAddToBalance,\n      _owner\n    );\n\n    emit DeploySplitsPayer(\n      splitsPayer,\n      _defaultSplitsProjectId,\n      _defaultSplitsDomain,\n      _defaultSplitsGroup,\n      _splitsStore,\n      _defaultProjectId,\n      _defaultBeneficiary,\n      _defaultPreferClaimedTokens,\n      _defaultMemo,\n      _defaultMetadata,\n      _defaultPreferAddToBalance,\n      _owner,\n      msg.sender\n    );\n  }\n}\n"
    },
    "contracts/interfaces/IJBGasTokenERC20SplitsPayerDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBSplitsPayer.sol';\nimport './IJBSplitsStore.sol';\n\ninterface IJBGasTokenERC20SplitsPayerDeployer {\n  event DeploySplitsPayer(\n    IJBSplitsPayer indexed splitsPayer,\n    uint256 defaultSplitsProjectId,\n    uint256 defaultSplitsDomain,\n    uint256 defaultSplitsGroup,\n    IJBSplitsStore splitsStore,\n    uint256 defaultProjectId,\n    address defaultBeneficiary,\n    bool defaultPreferClaimedTokens,\n    string defaultMemo,\n    bytes defaultMetadata,\n    bool preferAddToBalance,\n    address owner,\n    address caller\n  );\n\n  function deploySplitsPayer(\n    uint256 _defaultSplitsProjectId,\n    uint256 _defaultSplitsDomain,\n    uint256 _defaultSplitsGroup,\n    IJBSplitsStore _splitsStore,\n    uint256 _defaultProjectId,\n    address payable _defaultBeneficiary,\n    bool _defaultPreferClaimedTokens,\n    string calldata _defaultMemo,\n    bytes calldata _defaultMetadata,\n    bool _preferAddToBalance,\n    address _owner\n  ) external returns (IJBSplitsPayer splitsPayer);\n}\n"
    },
    "contracts/JBGasTokenERC20ProjectPayerDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './interfaces/IJBGasTokenERC20ProjectPayerDeployer.sol';\nimport './JBGasTokenERC20ProjectPayer.sol';\n\n/** \n  @notice \n  Deploys project payer contracts.\n\n  @dev\n  Adheres to -\n  IJBGasTokenERC20ProjectPayerDeployer:  General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\ncontract JBGasTokenERC20ProjectPayerDeployer is IJBGasTokenERC20ProjectPayerDeployer {\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Allows anyone to deploy a new project payer contract.\n\n    @param _defaultProjectId The ID of the project whose treasury should be forwarded the project payer contract's received payments.\n    @param _defaultBeneficiary The address that'll receive the project's tokens when the project payer receives payments. \n    @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet. \n    @param _defaultMemo The memo that'll be forwarded with the project payer's received payments. \n    @param _defaultMetadata The metadata that'll be forwarded with the project payer's received payments. \n    @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _owner The address that will own the project payer.\n\n    @return projectPayer The project payer contract.\n  */\n  function deployProjectPayer(\n    uint256 _defaultProjectId,\n    address payable _defaultBeneficiary,\n    bool _defaultPreferClaimedTokens,\n    string memory _defaultMemo,\n    bytes memory _defaultMetadata,\n    bool _defaultPreferAddToBalance,\n    IJBDirectory _directory,\n    address _owner\n  ) external override returns (IJBProjectPayer projectPayer) {\n    // Deploy the project payer.\n    projectPayer = new JBGasTokenERC20ProjectPayer(\n      _defaultProjectId,\n      _defaultBeneficiary,\n      _defaultPreferClaimedTokens,\n      _defaultMemo,\n      _defaultMetadata,\n      _defaultPreferAddToBalance,\n      _directory,\n      _owner\n    );\n\n    emit DeployProjectPayer(\n      projectPayer,\n      _defaultProjectId,\n      _defaultBeneficiary,\n      _defaultPreferClaimedTokens,\n      _defaultMemo,\n      _defaultMetadata,\n      _defaultPreferAddToBalance,\n      _directory,\n      _owner,\n      msg.sender\n    );\n  }\n}\n"
    },
    "contracts/interfaces/IJBGasTokenERC20ProjectPayerDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\nimport './IJBProjectPayer.sol';\n\ninterface IJBGasTokenERC20ProjectPayerDeployer {\n  event DeployProjectPayer(\n    IJBProjectPayer indexed projectPayer,\n    uint256 defaultProjectId,\n    address defaultBeneficiary,\n    bool defaultPreferClaimedTokens,\n    string defaultMemo,\n    bytes defaultMetadata,\n    bool preferAddToBalance,\n    IJBDirectory directory,\n    address owner,\n    address caller\n  );\n\n  function deployProjectPayer(\n    uint256 _defaultProjectId,\n    address payable _defaultBeneficiary,\n    bool _defaultPreferClaimedTokens,\n    string memory _defaultMemo,\n    bytes memory _defaultMetadata,\n    bool _preferAddToBalance,\n    IJBDirectory _directory,\n    address _owner\n  ) external returns (IJBProjectPayer projectPayer);\n}\n"
    },
    "contracts/system_tests/TestPayBurnRedeemFlow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\n\nimport './helpers/TestBaseWorkflow.sol';\n\n/**\n * This system test file verifies the following flow:\n * launch project â†’ issue token â†’ pay project (claimed tokens) â†’  burn some of the claimed tokens â†’ redeem rest of tokens\n */\ncontract TestPayBurnRedeemFlow is TestBaseWorkflow {\n  JBController private _controller;\n  JBETHPaymentTerminal private _terminal;\n  JBTokenStore private _tokenStore;\n\n  JBProjectMetadata private _projectMetadata;\n  JBFundingCycleData private _data;\n  JBFundingCycleMetadata private _metadata;\n  JBGroupedSplits[] private _groupedSplits; // Default empty\n  JBFundAccessConstraints[] private _fundAccessConstraints; // Default empty\n  IJBPaymentTerminal[] private _terminals; // Default empty\n\n  uint256 private _projectId;\n  address private _projectOwner;\n  uint256 private _weight = 1000 * 10**18;\n  uint256 private _targetInWei = 10 * 10**18;\n\n  function setUp() public override {\n    super.setUp();\n\n    _controller = jbController();\n    _terminal = jbETHPaymentTerminal();\n    _tokenStore = jbTokenStore();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: _weight,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 0,\n      redemptionRate: 10000, //100%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: false,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _terminals.push(_terminal);\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: _terminal,\n        token: jbLibraries().ETHToken(),\n        distributionLimit: _targetInWei, // 10 ETH target\n        overflowAllowance: 5 ether,\n        distributionLimitCurrency: 1, // Currency = ETH\n        overflowAllowanceCurrency: 1\n      })\n    );\n\n    _projectOwner = multisig();\n\n    _projectId = _controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n  }\n\n  function testFuzzPayBurnRedeemFlow(\n    bool payPreferClaimed, //false\n    bool burnPreferClaimed, //false\n    uint96 payAmountInWei, // 1\n    uint256 burnTokenAmount, // 0\n    uint256 redeemTokenAmount // 0\n  ) external {\n    // issue an ERC-20 token for project\n    evm.prank(_projectOwner);\n    _controller.issueTokenFor(_projectId, 'TestName', 'TestSymbol');\n\n    address _userWallet = address(1234);\n\n    // pay terminal\n    _terminal.pay{value: payAmountInWei}(\n      _projectId,\n      payAmountInWei,\n      address(0),\n      _userWallet,\n      /* _minReturnedTokens */\n      0,\n      /* _preferClaimedTokens */\n      payPreferClaimed,\n      /* _memo */\n      'Take my money!',\n      /* _delegateMetadata */\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of JBTokens\n    uint256 _userTokenBalance = PRBMathUD60x18.mul(payAmountInWei, _weight);\n    assertEq(_tokenStore.balanceOf(_userWallet, _projectId), _userTokenBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    uint256 _terminalBalanceInWei = payAmountInWei;\n    assertEq(jbPaymentTerminalStore().balanceOf(_terminal, _projectId), _terminalBalanceInWei);\n\n    // burn tokens from beneficiary addr\n    if (burnTokenAmount == 0) evm.expectRevert(abi.encodeWithSignature('NO_BURNABLE_TOKENS()'));\n    else if (burnTokenAmount > _userTokenBalance)\n      evm.expectRevert(abi.encodeWithSignature('INSUFFICIENT_FUNDS()'));\n    else if (burnTokenAmount > uint256(type(int256).max))\n      evm.expectRevert(abi.encodeWithSignature('Panic(uint256)', 0x11));\n    else _userTokenBalance = _userTokenBalance - burnTokenAmount;\n\n    evm.prank(_userWallet);\n    _controller.burnTokensOf(\n      _userWallet,\n      _projectId,\n      /* _tokenCount */\n      burnTokenAmount,\n      /* _memo */\n      'I hate tokens!',\n      /* _preferClaimedTokens */\n      burnPreferClaimed\n    );\n\n    // verify: beneficiary should have a new balance of JBTokens\n    assertEq(_tokenStore.balanceOf(_userWallet, _projectId), _userTokenBalance);\n\n    // redeem tokens\n    if (redeemTokenAmount > _userTokenBalance)\n      evm.expectRevert(abi.encodeWithSignature('INSUFFICIENT_TOKENS()'));\n    else _userTokenBalance = _userTokenBalance - redeemTokenAmount;\n\n    evm.prank(_userWallet);\n    uint256 _reclaimAmtInWei = _terminal.redeemTokensOf(\n      /* _holder */\n      _userWallet,\n      /* _projectId */\n      _projectId,\n      /* _tokenCount */\n      redeemTokenAmount,\n      /* token (unused) */\n      address(0),\n      /* _minReturnedWei */\n      0,\n      /* _beneficiary */\n      payable(_userWallet),\n      /* _memo */\n      'Refund me now!',\n      /* _delegateMetadata */\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a new balance of JBTokens\n    assertEq(_tokenStore.balanceOf(_userWallet, _projectId), _userTokenBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    assertEq(\n      jbPaymentTerminalStore().balanceOf(_terminal, _projectId),\n      _terminalBalanceInWei - _reclaimAmtInWei\n    );\n  }\n}\n"
    },
    "@paulrberg/contracts/math/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"prb-math/contracts/PRBMathUD60x18.sol\";\n"
    },
    "prb-math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "contracts/system_tests/TestDistributeHeldFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\n\nimport './helpers/TestBaseWorkflow.sol';\n\ncontract TestDistributeHeldFee is TestBaseWorkflow {\n  JBController private _controller;\n  JBETHPaymentTerminal private _terminal;\n  JBTokenStore private _tokenStore;\n\n  JBProjectMetadata private _projectMetadata;\n  JBFundingCycleData private _data;\n  JBFundingCycleMetadata private _metadata;\n  JBGroupedSplits[] private _groupedSplits; // Default empty\n  JBFundAccessConstraints[] private _fundAccessConstraints; // Default empty\n  IJBPaymentTerminal[] private _terminals; // Default empty\n\n  uint256 private _projectId;\n  address private _projectOwner;\n  uint256 private _weight = 1000 * 10**18;\n  uint256 private _targetInWei = 10 * 10**18;\n\n  function setUp() public override {\n    super.setUp();\n\n    _controller = jbController();\n    _terminal = jbETHPaymentTerminal();\n    _tokenStore = jbTokenStore();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: _weight,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 0,\n      redemptionRate: 10000, //100%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: false,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: true,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _terminals.push(_terminal);\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: _terminal,\n        token: jbLibraries().ETHToken(),\n        distributionLimit: _targetInWei, // 10 ETH target\n        overflowAllowance: 5 ether,\n        distributionLimitCurrency: 1, // Currency = ETH\n        overflowAllowanceCurrency: 1\n      })\n    );\n\n    _projectOwner = multisig();\n\n    _projectId = _controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n  }\n\n  function testHeldFeeReimburse(\n    uint256 payAmountInWei,\n    uint16 fee,\n    uint256 feeDiscount\n  ) external {\n    // Assuming we don't revert when distributing too much\n    evm.assume(payAmountInWei <= _targetInWei);\n    evm.assume(feeDiscount <= jbLibraries().MAX_FEE());\n    evm.assume(fee <= 50_000_000); // fee cap\n    address _userWallet = address(1234);\n\n    evm.prank(multisig());\n    _terminal.setFee(fee);\n\n    IJBFeeGauge feeGauge = IJBFeeGauge(address(69696969));\n    evm.etch(address(feeGauge), new bytes(0x1));\n    evm.mockCall(\n      address(feeGauge),\n      abi.encodeWithSignature('currentDiscountFor(uint256)', _projectId),\n      abi.encode(feeDiscount)\n    );\n    evm.prank(multisig());\n    _terminal.setFeeGauge(feeGauge);\n\n    uint256 discountedFee = fee - PRBMath.mulDiv(fee, feeDiscount, jbLibraries().MAX_FEE());\n\n    // -- pay --\n    _terminal.pay{value: payAmountInWei}(\n      _projectId,\n      payAmountInWei,\n      address(0),\n      /* _beneficiary */\n      _userWallet,\n      /* _minReturnedTokens */\n      0,\n      /* _preferClaimedTokens */\n      false,\n      /* _memo */\n      'Take my money!',\n      /* _delegateMetadata */\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of JBTokens\n    uint256 _userTokenBalance = PRBMathUD60x18.mul(payAmountInWei, _weight);\n    assertEq(_tokenStore.balanceOf(_userWallet, _projectId), _userTokenBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    uint256 _terminalBalanceInWei = payAmountInWei;\n    assertEq(jbPaymentTerminalStore().balanceOf(_terminal, _projectId), _terminalBalanceInWei);\n\n    // -- distribute --\n    _terminal.distributePayoutsOf(\n      _projectId,\n      payAmountInWei,\n      jbLibraries().ETH(),\n      address(0), //token (unused)\n      /*min out*/\n      0,\n      /*LFG*/\n      'lfg'\n    );\n\n    // verify: should have held the fee\n    if (fee > 0 && payAmountInWei > 0) {\n      assertEq(_terminal.heldFeesOf(_projectId)[0].fee, _terminal.fee());\n      assertEq(_terminal.heldFeesOf(_projectId)[0].feeDiscount, feeDiscount);\n      assertEq(_terminal.heldFeesOf(_projectId)[0].amount, payAmountInWei);\n    }\n\n    // -- add to balance --\n    // Will get the fee reimbursed:\n    uint256 heldFee = payAmountInWei -\n      PRBMath.mulDiv(\n        payAmountInWei,\n        jbLibraries().MAX_FEE(),\n        discountedFee + jbLibraries().MAX_FEE()\n      ); // no discount\n    uint256 balanceBefore = jbPaymentTerminalStore().balanceOf(_terminal, _projectId);\n    _terminal.addToBalanceOf{value: payAmountInWei}(\n      _projectId,\n      payAmountInWei,\n      address(0),\n      'thanks for all the fish',\n      /* _delegateMetadata */\n      new bytes(0)\n    );\n\n    // verify: project should get the fee back (plus the addToBalance amount)\n    assertEq(\n      jbPaymentTerminalStore().balanceOf(_terminal, _projectId),\n      balanceBefore + heldFee + payAmountInWei\n    );\n  }\n}\n"
    },
    "contracts/system_tests/TestMultipleTerminals.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport './helpers/TestBaseWorkflow.sol';\nimport './mock/MockPriceFeed.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\n\ncontract TestMultipleTerminals is TestBaseWorkflow {\n  JBController controller;\n  JBProjectMetadata _projectMetadata;\n  JBFundingCycleData _data;\n  JBFundingCycleMetadata _metadata;\n  JBGroupedSplits[] _groupedSplits;\n  JBFundAccessConstraints[] _fundAccessConstraints;\n\n  IJBPaymentTerminal[] _terminals;\n  JBERC20PaymentTerminal ERC20terminal;\n  JBETHPaymentTerminal ETHterminal;\n\n  JBTokenStore _tokenStore;\n  address _projectOwner;\n\n  address caller = address(6942069);\n\n  uint256 FAKE_PRICE = 10;\n  uint256 WEIGHT = 1000 * 10**18;\n  uint256 projectId;\n\n  function setUp() public override {\n    super.setUp();\n    evm.label(caller, 'caller');\n\n    _groupedSplits.push();\n    _groupedSplits[0].group = 1;\n    _groupedSplits[0].splits.push(\n      JBSplit({\n        preferClaimed: false,\n        preferAddToBalance: false,\n        percent: jbLibraries().SPLITS_TOTAL_PERCENT(),\n        projectId: 0,\n        beneficiary: payable(caller),\n        lockedUntil: 0,\n        allocator: IJBSplitAllocator(address(0))\n      })\n    );\n\n    _projectOwner = multisig();\n\n    _tokenStore = jbTokenStore();\n\n    controller = jbController();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: WEIGHT,\n      discountRate: 450_000_000, // out of 1_000_000_000\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 5000, //50%\n      redemptionRate: 10000, //100%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: true,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: true,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    ERC20terminal = new JBERC20PaymentTerminal(\n      jbToken(),\n      jbLibraries().USD(), // currency\n      jbLibraries().ETH(), // base weight currency\n      1, // JBSplitsGroupe\n      jbOperatorStore(),\n      jbProjects(),\n      jbDirectory(),\n      jbSplitsStore(),\n      jbPrices(),\n      jbPaymentTerminalStore(),\n      multisig()\n    );\n    evm.label(address(ERC20terminal), 'JBERC20PaymentTerminalUSD');\n\n    ETHterminal = jbETHPaymentTerminal();\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: ERC20terminal,\n        token: address(jbToken()),\n        distributionLimit: 10 * 10**18,\n        overflowAllowance: 5 * 10**18,\n        distributionLimitCurrency: jbLibraries().USD(),\n        overflowAllowanceCurrency: jbLibraries().USD()\n      })\n    );\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: ETHterminal,\n        token: jbLibraries().ETHToken(),\n        distributionLimit: 10 * 10**18,\n        overflowAllowance: 5 * 10**18,\n        distributionLimitCurrency: jbLibraries().ETH(),\n        overflowAllowanceCurrency: jbLibraries().ETH()\n      })\n    );\n\n    _terminals.push(ERC20terminal);\n    _terminals.push(ETHterminal);\n\n    projectId = controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    evm.startPrank(_projectOwner);\n    MockPriceFeed _priceFeed = new MockPriceFeed(FAKE_PRICE);\n    MockPriceFeed _priceFeedUsdEth = new MockPriceFeed(FAKE_PRICE);\n    evm.label(address(_priceFeed), 'MockPrice Feed');\n\n    jbPrices().addFeedFor(\n      jbLibraries().USD(), // currency\n      jbLibraries().ETH(), // base weight currency\n      _priceFeedUsdEth\n    );\n\n    jbPrices().addFeedFor(\n      jbLibraries().ETH(), // currency\n      jbLibraries().USD(), // base weight currency\n      _priceFeed\n    );\n\n    evm.stopPrank();\n  }\n\n  function testMultipleTerminal() public {\n    // Send some token to the caller, so he can play\n    evm.prank(_projectOwner);\n    jbToken().transfer(caller, 20 * 10**18);\n\n    // ---- Pay in token ----\n    evm.prank(caller); // back to regular msg.sender (bug?)\n    jbToken().approve(address(ERC20terminal), 20 * 10**18);\n    evm.prank(caller); // back to regular msg.sender (bug?)\n    ERC20terminal.pay(\n      projectId,\n      20 * 10**18,\n      address(0),\n      caller,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of JBTokens (divided by 2 -> reserved rate = 50%)\n    // price feed will return FAKE_PRICE*18 (for curr usd/base eth); since it's an 18 decimal terminal (ie calling getPrice(18) )\n    uint256 _userTokenBalance = PRBMath.mulDiv(20 * 10**18, WEIGHT, 36 * FAKE_PRICE);\n    assertEq(_tokenStore.balanceOf(caller, projectId), _userTokenBalance);\n\n    // verify: balance in terminal should be up to date\n    assertEq(jbPaymentTerminalStore().balanceOf(ERC20terminal, projectId), 20 * 10**18);\n\n    // ---- Pay in ETH ----\n    address beneficiaryTwo = address(696969);\n    ETHterminal.pay{value: 20 ether}(\n      projectId,\n      20 ether,\n      address(0),\n      beneficiaryTwo,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    ); // funding target met and 10 ETH are now in the overflow\n\n    // verify: beneficiary should have a balance of JBTokens (divided by 2 -> reserved rate = 50%)\n    uint256 _userEthBalance = PRBMath.mulDiv(20 ether, (WEIGHT / 10**18), 2);\n    assertEq(_tokenStore.balanceOf(beneficiaryTwo, projectId), _userEthBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    assertEq(jbPaymentTerminalStore().balanceOf(ETHterminal, projectId), 20 ether);\n\n    // ---- Use allowance ----\n    evm.startPrank(_projectOwner);\n    ERC20terminal.useAllowanceOf(\n      projectId,\n      5 * 10**18, // amt in ETH (overflow allowance currency is in ETH)\n      jbLibraries().USD(), // Currency -> (fake price is 10)\n      address(0), //token (unused)\n      1, // Min wei out\n      payable(msg.sender), // Beneficiary\n      'MEMO'\n    );\n    evm.stopPrank();\n\n    // Funds leaving the contract -> take the fee\n    assertEq(\n      jbToken().balanceOf(msg.sender),\n      PRBMath.mulDiv(\n        5 * 10**18,\n        jbLibraries().MAX_FEE(),\n        jbLibraries().MAX_FEE() + ERC20terminal.fee()\n      )\n    );\n\n    // Distribute the funding target ETH\n    uint256 initBalance = caller.balance;\n    evm.prank(_projectOwner);\n    ETHterminal.distributePayoutsOf(\n      projectId,\n      10 * 10**18,\n      jbLibraries().ETH(), // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      'Foundry payment' // Memo\n    );\n    // Funds leaving the ecosystem -> fee taken\n    assertEq(\n      caller.balance,\n      initBalance +\n        PRBMath.mulDiv(\n          10 * 10**18,\n          jbLibraries().MAX_FEE(),\n          ETHterminal.fee() + jbLibraries().MAX_FEE()\n        )\n    );\n\n    // redeem eth from the overflow by the token holder:\n    uint256 totalSupply = jbController().totalOutstandingTokensOf(projectId, 5000);\n    uint256 overflow = jbPaymentTerminalStore().currentTotalOverflowOf(projectId, 18, 1);\n\n    uint256 callerEthBalanceBefore = caller.balance;\n\n    evm.prank(caller);\n    ETHterminal.redeemTokensOf(\n      caller,\n      projectId,\n      100_000,\n      address(0), //token (unused)\n      0,\n      payable(caller),\n      'gimme my money back',\n      new bytes(0)\n    );\n\n    assertEq(caller.balance, callerEthBalanceBefore + ((100_000 * overflow) / totalSupply));\n  }\n}\n"
    },
    "contracts/system_tests/mock/MockPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '../../interfaces/IJBPriceFeed.sol';\n\ncontract MockPriceFeed is IJBPriceFeed {\n  uint256 public fakePrice;\n\n  constructor(uint256 _fakePrice) {\n    fakePrice = _fakePrice;\n  }\n\n  function currentPrice(uint256 _decimals) external view override returns (uint256 _quote) {\n    return (fakePrice * _decimals);\n  }\n}\n"
    },
    "contracts/JBChainlinkV3PriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\nimport './interfaces/IJBPriceFeed.sol';\nimport './libraries/JBFixedPointNumber.sol';\n\n/** \n  @notice \n  A generalized price feed for the Chainlink AggregatorV3Interface.\n\n  @dev\n  Adheres to -\n  IJBPriceFeed: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\ncontract JBChainlinkV3PriceFeed is IJBPriceFeed {\n  // A library that provides utility for fixed point numbers.\n  using JBFixedPointNumber for uint256;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The feed that prices are reported from.\n  */\n  AggregatorV3Interface public feed;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Gets the current price from the feed, normalized to the specified number of decimals.\n\n    @param _decimals The number of decimals the returned fixed point price should include.\n\n    @return The current price of the feed, as a fixed point number with the specified number of decimals.\n  */\n  function currentPrice(uint256 _decimals) external view override returns (uint256) {\n    // Get the latest round information. Only need the price is needed.\n    (, int256 _price, , , ) = feed.latestRoundData();\n\n    // Get a reference to the number of decimals the feed uses.\n    uint256 _feedDecimals = feed.decimals();\n\n    // Return the price, adjusted to the target decimals.\n    return uint256(_price).adjustDecimals(_feedDecimals, _decimals);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _feed The feed to report prices from.\n  */\n  constructor(AggregatorV3Interface _feed) {\n    feed = _feed;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/interfaces/IJBTerminalUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\n\ninterface IJBPaymentTerminalUtility {\n  function directory() external view returns (IJBDirectory);\n}\n"
    },
    "contracts/system_tests/TestLaunchProject.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\n\ncontract TestLaunchProject is TestBaseWorkflow {\n  JBController controller;\n  JBProjectMetadata _projectMetadata;\n  JBFundingCycleData _data;\n  JBFundingCycleMetadata _metadata;\n  JBGroupedSplits[] _groupedSplits; // Default empty\n  JBFundAccessConstraints[] _fundAccessConstraints; // Default empty\n  IJBPaymentTerminal[] _terminals; // Default empty\n\n  function setUp() public override {\n    super.setUp();\n\n    controller = jbController();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: 1000 * 10**18,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 5000, //50%\n      redemptionRate: 5000, //50%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: false,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n  }\n\n  function testLaunchProject() public {\n    uint256 projectId = controller.launchProjectFor(\n      msg.sender,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    JBFundingCycle memory fundingCycle = jbFundingCycleStore().currentOf(projectId); //, latestConfig);\n\n    assertEq(fundingCycle.number, 1);\n    assertEq(fundingCycle.weight, 1000 * 10**18);\n  }\n\n  function testLaunchProjectFuzzWeight(uint256 WEIGHT) public {\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: WEIGHT,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    uint256 projectId;\n\n    // expectRevert on the next call if weight overflowing\n    if (WEIGHT > type(uint88).max) {\n      evm.expectRevert(abi.encodeWithSignature('INVALID_WEIGHT()'));\n\n      projectId = controller.launchProjectFor(\n        msg.sender,\n        _projectMetadata,\n        _data,\n        _metadata,\n        block.timestamp,\n        _groupedSplits,\n        _fundAccessConstraints,\n        _terminals,\n        ''\n      );\n    } else {\n      projectId = controller.launchProjectFor(\n        msg.sender,\n        _projectMetadata,\n        _data,\n        _metadata,\n        block.timestamp,\n        _groupedSplits,\n        _fundAccessConstraints,\n        _terminals,\n        ''\n      );\n\n      JBFundingCycle memory fundingCycle = jbFundingCycleStore().currentOf(projectId); //, latestConfig);\n\n      assertEq(fundingCycle.number, 1);\n      assertEq(fundingCycle.weight, WEIGHT);\n    }\n  }\n}\n"
    },
    "contracts/system_tests/TestERC20Terminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\n\ncontract TestERC20Terminal is TestBaseWorkflow {\n  JBController controller;\n  JBProjectMetadata _projectMetadata;\n  JBFundingCycleData _data;\n  JBFundingCycleMetadata _metadata;\n  JBGroupedSplits[] _groupedSplits;\n  JBFundAccessConstraints[] _fundAccessConstraints;\n  IJBPaymentTerminal[] _terminals;\n  JBTokenStore _tokenStore;\n  address _projectOwner;\n\n  uint256 WEIGHT = 1000 * 10**18;\n\n  function setUp() public override {\n    super.setUp();\n\n    _projectOwner = multisig();\n\n    _tokenStore = jbTokenStore();\n\n    controller = jbController();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: WEIGHT,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 5000, //50%\n      redemptionRate: 5000, //50%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: false,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _terminals.push(jbERC20PaymentTerminal());\n  }\n\n  function testAllowanceERC20() public {\n    JBERC20PaymentTerminal terminal = jbERC20PaymentTerminal();\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: terminal,\n        token: address(jbToken()),\n        distributionLimit: 10 * 10**18,\n        overflowAllowance: 5 * 10**18,\n        distributionLimitCurrency: jbLibraries().ETH(),\n        overflowAllowanceCurrency: jbLibraries().ETH()\n      })\n    );\n\n    uint256 projectId = controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    address caller = msg.sender;\n    evm.label(caller, 'caller');\n    evm.prank(_projectOwner);\n    jbToken().transfer(caller, 20 * 10**18);\n\n    evm.prank(caller); // back to regular msg.sender (bug?)\n    jbToken().approve(address(terminal), 20 * 10**18);\n    evm.prank(caller); // back to regular msg.sender (bug?)\n    terminal.pay(\n      projectId,\n      20 * 10**18,\n      address(0),\n      msg.sender,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    ); // funding target met and 10 token are now in the overflow\n\n    // verify: beneficiary should have a balance of JBTokens (divided by 2 -> reserved rate = 50%)\n    uint256 _userTokenBalance = PRBMath.mulDiv(20, WEIGHT, 2); // 18dec is in WEIGHT\n    assertEq(_tokenStore.balanceOf(msg.sender, projectId), _userTokenBalance);\n\n    // verify: balance in terminal should be up to date\n    assertEq(jbPaymentTerminalStore().balanceOf(terminal, projectId), 20 * 10**18);\n\n    // Discretionary use of overflow allowance by project owner (allowance = 5ETH)\n    evm.prank(_projectOwner); // Prank only next call\n    terminal.useAllowanceOf(\n      projectId,\n      5 * 10**18,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      payable(msg.sender), // Beneficiary\n      'MEMO'\n    );\n    assertEq(\n      jbToken().balanceOf(msg.sender),\n      PRBMath.mulDiv(5 * 10**18, jbLibraries().MAX_FEE(), jbLibraries().MAX_FEE() + terminal.fee())\n    );\n\n    // Distribute the funding target ETH -> splits[] is empty -> everything in left-over, to project owner\n    uint256 initBalance = jbToken().balanceOf(_projectOwner);\n    evm.prank(_projectOwner);\n    terminal.distributePayoutsOf(\n      projectId,\n      10 * 10**18,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      'Foundry payment' // Memo\n    );\n    // Funds leaving the ecosystem -> fee taken\n    assertEq(\n      jbToken().balanceOf(_projectOwner),\n      initBalance +\n        (10 * 10**18 * jbLibraries().MAX_FEE()) /\n        (terminal.fee() + jbLibraries().MAX_FEE())\n    );\n\n    // redeem eth from the overflow by the token holder:\n    uint256 senderBalance = _tokenStore.balanceOf(msg.sender, projectId);\n    evm.prank(msg.sender);\n    terminal.redeemTokensOf(\n      msg.sender,\n      projectId,\n      senderBalance,\n      address(0), //token (unused)\n      0,\n      payable(msg.sender),\n      'gimme my money back',\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of 0 JBTokens\n    assertEq(_tokenStore.balanceOf(msg.sender, projectId), 0);\n  }\n\n  function testFuzzedAllowanceERC20(\n    uint232 ALLOWANCE,\n    uint232 TARGET,\n    uint96 BALANCE\n  ) public {\n    evm.assume(jbToken().totalSupply() >= BALANCE);\n\n    JBERC20PaymentTerminal terminal = jbERC20PaymentTerminal();\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: terminal,\n        token: address(jbToken()),\n        distributionLimit: TARGET,\n        overflowAllowance: ALLOWANCE,\n        distributionLimitCurrency: jbLibraries().ETH(),\n        overflowAllowanceCurrency: jbLibraries().ETH()\n      })\n    );\n\n    uint256 projectId = controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    address caller = msg.sender;\n    evm.label(caller, 'caller');\n    evm.prank(_projectOwner);\n    jbToken().transfer(caller, BALANCE);\n\n    evm.prank(caller); // back to regular msg.sender (bug?)\n    jbToken().approve(address(terminal), BALANCE);\n    evm.prank(caller); // back to regular msg.sender (bug?)\n    terminal.pay(projectId, BALANCE, address(0), msg.sender, 0, false, 'Forge test', new bytes(0)); // funding target met and 10 ETH are now in the overflow\n\n    // verify: beneficiary should have a balance of JBTokens (divided by 2 -> reserved rate = 50%)\n    uint256 _userTokenBalance = PRBMath.mulDiv(BALANCE, (WEIGHT / 10**18), 2);\n    if (BALANCE != 0) assertEq(_tokenStore.balanceOf(msg.sender, projectId), _userTokenBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    assertEq(jbPaymentTerminalStore().balanceOf(terminal, projectId), BALANCE);\n\n    bool willRevert;\n\n    // Discretionary use of overflow allowance by project owner (allowance = 5ETH)\n    if (ALLOWANCE == 0) {\n      evm.expectRevert(abi.encodeWithSignature('INADEQUATE_CONTROLLER_ALLOWANCE()'));\n      willRevert = true;\n    } else if (TARGET >= BALANCE || ALLOWANCE > (BALANCE - TARGET)) {\n      // Too much to withdraw or no overflow ?\n      evm.expectRevert(abi.encodeWithSignature('INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE()'));\n      willRevert = true;\n    }\n\n    evm.prank(_projectOwner); // Prank only next call\n    terminal.useAllowanceOf(\n      projectId,\n      ALLOWANCE,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      payable(msg.sender), // Beneficiary\n      'MEMO'\n    );\n\n    if (BALANCE != 0 && !willRevert)\n      assertEq(\n        jbToken().balanceOf(msg.sender),\n        PRBMath.mulDiv(ALLOWANCE, jbLibraries().MAX_FEE(), jbLibraries().MAX_FEE() + terminal.fee())\n      );\n\n    // Distribute the funding target ETH -> no split then beneficiary is the project owner\n    uint256 initBalance = jbToken().balanceOf(_projectOwner);\n\n    if (TARGET > BALANCE)\n      evm.expectRevert(abi.encodeWithSignature('INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE()'));\n\n    if (TARGET == 0)\n      evm.expectRevert(abi.encodeWithSignature('DISTRIBUTION_AMOUNT_LIMIT_REACHED()'));\n\n    evm.prank(_projectOwner);\n    terminal.distributePayoutsOf(\n      projectId,\n      TARGET,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      'Foundry payment' // Memo\n    );\n    // Funds leaving the ecosystem -> fee taken\n    if (TARGET <= BALANCE && TARGET != 0)\n      assertEq(\n        jbToken().balanceOf(_projectOwner),\n        initBalance +\n          PRBMath.mulDiv(TARGET, jbLibraries().MAX_FEE(), terminal.fee() + jbLibraries().MAX_FEE())\n      );\n\n    // redeem eth from the overflow by the token holder:\n    uint256 senderBalance = _tokenStore.balanceOf(msg.sender, projectId);\n\n    evm.prank(msg.sender);\n    terminal.redeemTokensOf(\n      msg.sender,\n      projectId,\n      senderBalance,\n      address(0), //token (unused)\n      0,\n      payable(msg.sender),\n      'gimme my token back',\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of 0 JBTokens\n    assertEq(_tokenStore.balanceOf(msg.sender, projectId), 0);\n  }\n}\n"
    },
    "contracts/system_tests/TestAllowance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\n\ncontract TestAllowance is TestBaseWorkflow {\n  JBController controller;\n  JBProjectMetadata _projectMetadata;\n  JBFundingCycleData _data;\n  JBFundingCycleMetadata _metadata;\n  JBGroupedSplits[] _groupedSplits;\n  JBFundAccessConstraints[] _fundAccessConstraints;\n  IJBPaymentTerminal[] _terminals;\n  JBTokenStore _tokenStore;\n  address _projectOwner;\n  address _beneficiary;\n\n  uint256 WEIGHT = 1000 * 10**18;\n\n  function setUp() public override {\n    super.setUp();\n\n    _projectOwner = multisig();\n\n    _beneficiary = beneficiary();\n\n    _tokenStore = jbTokenStore();\n\n    controller = jbController();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: WEIGHT,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 5000, //50%\n      redemptionRate: 5000, //50%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: false,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _terminals.push(jbETHPaymentTerminal());\n  }\n\n  function testAllowance() public {\n    JBETHPaymentTerminal terminal = jbETHPaymentTerminal();\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: terminal,\n        token: jbLibraries().ETHToken(),\n        distributionLimit: 10 ether,\n        overflowAllowance: 5 ether,\n        distributionLimitCurrency: jbLibraries().ETH(),\n        overflowAllowanceCurrency: jbLibraries().ETH()\n      })\n    );\n\n    uint256 projectId = controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    terminal.pay{value: 20 ether}(\n      projectId,\n      20 ether,\n      address(0),\n      _beneficiary,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    ); // funding target met and 10 ETH are now in the overflow\n\n    // verify: beneficiary should have a balance of JBTokens (divided by 2 -> reserved rate = 50%)\n    uint256 _userTokenBalance = PRBMath.mulDiv(20 ether, (WEIGHT / 10**18), 2);\n    assertEq(_tokenStore.balanceOf(_beneficiary, projectId), _userTokenBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    assertEq(jbPaymentTerminalStore().balanceOf(terminal, projectId), 20 ether);\n\n    // Discretionary use of overflow allowance by project owner (allowance = 5ETH)\n    evm.prank(_projectOwner); // Prank only next call\n    terminal.useAllowanceOf(\n      projectId,\n      5 ether,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      payable(_beneficiary), // Beneficiary\n      'MEMO'\n    );\n    assertEq(\n      (_beneficiary).balance,\n      PRBMath.mulDiv(5 ether, jbLibraries().MAX_FEE(), jbLibraries().MAX_FEE() + terminal.fee())\n    );\n\n    // Distribute the funding target ETH -> splits[] is empty -> everything in left-over, to project owner\n    evm.prank(_projectOwner);\n    terminal.distributePayoutsOf(\n      projectId,\n      10 ether,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      'Foundry payment' // Memo\n    );\n    assertEq(\n      _projectOwner.balance,\n      (10 ether * jbLibraries().MAX_FEE()) / (terminal.fee() + jbLibraries().MAX_FEE())\n    );\n\n    // redeem eth from the overflow by the token holder:\n    uint256 senderBalance = _tokenStore.balanceOf(_beneficiary, projectId);\n    evm.prank(_beneficiary);\n    terminal.redeemTokensOf(\n      _beneficiary,\n      projectId,\n      senderBalance,\n      address(0), //token (unused)\n      0,\n      payable(_beneficiary),\n      'gimme my money back',\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of 0 JBTokens\n    assertEq(_tokenStore.balanceOf(_beneficiary, projectId), 0);\n  }\n\n  function testFuzzAllowance(\n    uint232 ALLOWANCE,\n    uint232 TARGET,\n    uint96 BALANCE\n  ) public {\n    evm.assume(jbToken().totalSupply() >= BALANCE);\n\n    unchecked {\n      // Check for overflow\n      evm.assume(ALLOWANCE + TARGET >= ALLOWANCE && ALLOWANCE + TARGET >= TARGET);\n    }\n\n    uint256 CURRENCY = jbLibraries().ETH(); // Avoid testing revert on this call...\n\n    JBETHPaymentTerminal terminal = jbETHPaymentTerminal();\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: terminal,\n        token: jbLibraries().ETHToken(),\n        distributionLimit: TARGET,\n        distributionLimitCurrency: CURRENCY,\n        overflowAllowance: ALLOWANCE,\n        overflowAllowanceCurrency: CURRENCY\n      })\n    );\n\n    uint256 projectId = controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    terminal.pay{value: BALANCE}(\n      projectId,\n      BALANCE,\n      address(0),\n      _beneficiary,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    );\n\n    // verify: beneficiary should have a balance of JBTokens (divided by 2 -> reserved rate = 50%)\n    uint256 _userTokenBalance = PRBMath.mulDiv(BALANCE, (WEIGHT / 10**18), 2);\n    if (BALANCE != 0) assertEq(_tokenStore.balanceOf(_beneficiary, projectId), _userTokenBalance);\n\n    // verify: ETH balance in terminal should be up to date\n    assertEq(jbPaymentTerminalStore().balanceOf(terminal, projectId), BALANCE);\n\n    evm.startPrank(_projectOwner);\n\n    bool willRevert;\n\n    if (ALLOWANCE == 0) {\n      evm.expectRevert(abi.encodeWithSignature('INADEQUATE_CONTROLLER_ALLOWANCE()'));\n      willRevert = true;\n    } else if (TARGET >= BALANCE || ALLOWANCE > (BALANCE - TARGET)) {\n      // Too much to withdraw or no overflow ?\n      evm.expectRevert(abi.encodeWithSignature('INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE()'));\n      willRevert = true;\n    }\n    terminal.useAllowanceOf(\n      projectId,\n      ALLOWANCE,\n      CURRENCY, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      payable(_beneficiary), // Beneficiary\n      'MEMO'\n    );\n\n    if (\n      !willRevert && BALANCE != 0 // if allowance ==0 or not enough overflow (target>=balance, allowance > overflow) // there is something to transfer\n    )\n      assertEq(\n        (_beneficiary).balance,\n        PRBMath.mulDiv(ALLOWANCE, jbLibraries().MAX_FEE(), jbLibraries().MAX_FEE() + terminal.fee())\n      );\n\n    if (TARGET > BALANCE)\n      evm.expectRevert(abi.encodeWithSignature('INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE()'));\n\n    if (TARGET == 0)\n      evm.expectRevert(abi.encodeWithSignature('DISTRIBUTION_AMOUNT_LIMIT_REACHED()'));\n\n    terminal.distributePayoutsOf(\n      projectId,\n      TARGET,\n      1, // Currency\n      address(0), //token (unused)\n      0, // Min wei out\n      'Foundry payment' // Memo\n    );\n    if (TARGET <= BALANCE && TARGET != 0)\n      assertEq(\n        _projectOwner.balance,\n        (TARGET * jbLibraries().MAX_FEE()) / (terminal.fee() + jbLibraries().MAX_FEE())\n      );\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}